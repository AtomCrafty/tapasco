//
// Generated by Bluespec Compiler, version 2015.09.beta2 (build 34689, 2015-09-07)
//
// On Fri Jul  7 14:37:16 CEST 2017
//
//
// Ports:
// Name                         I/O  size props
// S_AXI_arready                  O     1 reg
// S_AXI_rvalid                   O     1 reg
// S_AXI_rdata                    O    64
// S_AXI_rresp                    O     2
// S_AXI_awready                  O     1
// S_AXI_wready                   O     1
// S_AXI_bvalid                   O     1 reg
// S_AXI_bresp                    O     2
// pcie_rd_arvalid                O     1 reg
// pcie_rd_araddr                 O    64
// pcie_rd_arlen                  O     8
// pcie_rd_arsize                 O     3
// pcie_rd_arburst                O     2
// pcie_rd_arlock                 O     1
// pcie_rd_arcache                O     4
// pcie_rd_arprot                 O     3
// pcie_rd_arqos                  O     4
// pcie_rd_arregion               O     4
// pcie_rd_aruser                 O     1
// pcie_rd_rready                 O     1 reg
// pcie_wr_awvalid                O     1 reg
// pcie_wr_awaddr                 O    64
// pcie_wr_awlen                  O     8
// pcie_wr_awsize                 O     3
// pcie_wr_awburst                O     2
// pcie_wr_awlock                 O     1
// pcie_wr_awcache                O     4
// pcie_wr_awprot                 O     3
// pcie_wr_awqos                  O     4
// pcie_wr_awregion               O     4
// pcie_wr_awuser                 O     1
// pcie_wr_wvalid                 O     1 reg
// pcie_wr_wdata                  O   256
// pcie_wr_wstrb                  O    32
// pcie_wr_wlast                  O     1
// pcie_wr_wuser                  O     1
// pcie_wr_bready                 O     1 reg
// fpga_rd_arvalid                O     1 reg
// fpga_rd_araddr                 O    64
// fpga_rd_arlen                  O     8
// fpga_rd_arsize                 O     3
// fpga_rd_arburst                O     2
// fpga_rd_arlock                 O     1
// fpga_rd_arcache                O     4
// fpga_rd_arprot                 O     3
// fpga_rd_arqos                  O     4
// fpga_rd_arregion               O     4
// fpga_rd_aruser                 O     1
// fpga_rd_rready                 O     1 reg
// fpga_wr_awvalid                O     1 reg
// fpga_wr_awaddr                 O    64
// fpga_wr_awlen                  O     8
// fpga_wr_awsize                 O     3
// fpga_wr_awburst                O     2
// fpga_wr_awlock                 O     1
// fpga_wr_awcache                O     4
// fpga_wr_awprot                 O     3
// fpga_wr_awqos                  O     4
// fpga_wr_awregion               O     4
// fpga_wr_awuser                 O     1
// fpga_wr_wvalid                 O     1 reg
// fpga_wr_wdata                  O   512
// fpga_wr_wstrb                  O    64
// fpga_wr_wlast                  O     1
// fpga_wr_wuser                  O     1
// fpga_wr_bready                 O     1 reg
// interrupt                      O     1 reg
// CLK_m32_axi_aclk               I     1 clock
// RST_N_m32_axi_arestn           I     1 reset
// CLK_m64_axi_aclk               I     1 clock
// RST_N_m64_axi_arestn           I     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// S_AXI_arvalid                  I     1
// S_AXI_araddr                   I    64 reg
// S_AXI_arprot                   I     3 reg
// S_AXI_rready                   I     1
// S_AXI_awvalid                  I     1
// S_AXI_awaddr                   I    64
// S_AXI_awprot                   I     3
// S_AXI_wvalid                   I     1
// S_AXI_wdata                    I    64
// S_AXI_wstrb                    I     8
// S_AXI_bready                   I     1
// pcie_rd_arready                I     1
// pcie_rd_rvalid                 I     1
// pcie_rd_rdata                  I   256 reg
// pcie_rd_rresp                  I     2 reg
// pcie_rd_rlast                  I     1 reg
// pcie_rd_ruser                  I     1 reg
// pcie_wr_awready                I     1
// pcie_wr_wready                 I     1
// pcie_wr_bvalid                 I     1
// pcie_wr_bresp                  I     2 reg
// pcie_wr_buser                  I     1 reg
// fpga_rd_arready                I     1
// fpga_rd_rvalid                 I     1
// fpga_rd_rdata                  I   512 reg
// fpga_rd_rresp                  I     2 reg
// fpga_rd_rlast                  I     1 reg
// fpga_rd_ruser                  I     1 reg
// fpga_wr_awready                I     1
// fpga_wr_wready                 I     1
// fpga_wr_bvalid                 I     1
// fpga_wr_bresp                  I     2 reg
// fpga_wr_buser                  I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkBlueDMA(CLK_m32_axi_aclk,
		 RST_N_m32_axi_arestn,
		 CLK_m64_axi_aclk,
		 RST_N_m64_axi_arestn,
		 CLK,
		 RST_N,

		 S_AXI_arready,

		 S_AXI_arvalid,

		 S_AXI_araddr,

		 S_AXI_arprot,

		 S_AXI_rvalid,

		 S_AXI_rready,

		 S_AXI_rdata,

		 S_AXI_rresp,

		 S_AXI_awready,

		 S_AXI_awvalid,

		 S_AXI_awaddr,

		 S_AXI_awprot,

		 S_AXI_wready,

		 S_AXI_wvalid,

		 S_AXI_wdata,

		 S_AXI_wstrb,

		 S_AXI_bvalid,

		 S_AXI_bready,

		 S_AXI_bresp,

		 pcie_rd_arvalid,

		 pcie_rd_arready,

		 pcie_rd_araddr,

		 pcie_rd_arlen,

		 pcie_rd_arsize,

		 pcie_rd_arburst,

		 pcie_rd_arlock,

		 pcie_rd_arcache,

		 pcie_rd_arprot,

		 pcie_rd_arqos,

		 pcie_rd_arregion,

		 pcie_rd_aruser,

		 pcie_rd_rready,

		 pcie_rd_rvalid,

		 pcie_rd_rdata,
		 pcie_rd_rresp,
		 pcie_rd_rlast,
		 pcie_rd_ruser,

		 pcie_wr_awready,

		 pcie_wr_awvalid,

		 pcie_wr_awaddr,

		 pcie_wr_awlen,

		 pcie_wr_awsize,

		 pcie_wr_awburst,

		 pcie_wr_awlock,

		 pcie_wr_awcache,

		 pcie_wr_awprot,

		 pcie_wr_awqos,

		 pcie_wr_awregion,

		 pcie_wr_awuser,

		 pcie_wr_wready,

		 pcie_wr_wvalid,

		 pcie_wr_wdata,

		 pcie_wr_wstrb,

		 pcie_wr_wlast,

		 pcie_wr_wuser,

		 pcie_wr_bvalid,

		 pcie_wr_bready,

		 pcie_wr_bresp,
		 pcie_wr_buser,

		 fpga_rd_arvalid,

		 fpga_rd_arready,

		 fpga_rd_araddr,

		 fpga_rd_arlen,

		 fpga_rd_arsize,

		 fpga_rd_arburst,

		 fpga_rd_arlock,

		 fpga_rd_arcache,

		 fpga_rd_arprot,

		 fpga_rd_arqos,

		 fpga_rd_arregion,

		 fpga_rd_aruser,

		 fpga_rd_rready,

		 fpga_rd_rvalid,

		 fpga_rd_rdata,
		 fpga_rd_rresp,
		 fpga_rd_rlast,
		 fpga_rd_ruser,

		 fpga_wr_awready,

		 fpga_wr_awvalid,

		 fpga_wr_awaddr,

		 fpga_wr_awlen,

		 fpga_wr_awsize,

		 fpga_wr_awburst,

		 fpga_wr_awlock,

		 fpga_wr_awcache,

		 fpga_wr_awprot,

		 fpga_wr_awqos,

		 fpga_wr_awregion,

		 fpga_wr_awuser,

		 fpga_wr_wready,

		 fpga_wr_wvalid,

		 fpga_wr_wdata,

		 fpga_wr_wstrb,

		 fpga_wr_wlast,

		 fpga_wr_wuser,

		 fpga_wr_bvalid,

		 fpga_wr_bready,

		 fpga_wr_bresp,
		 fpga_wr_buser,

		 interrupt);
  input  CLK_m32_axi_aclk;
  input  RST_N_m32_axi_arestn;
  input  CLK_m64_axi_aclk;
  input  RST_N_m64_axi_arestn;
  input  CLK;
  input  RST_N;

  // value method s_rd_arready
  output S_AXI_arready;

  // action method s_rd_parvalid
  input  S_AXI_arvalid;

  // action method s_rd_paraddr
  input  [63 : 0] S_AXI_araddr;

  // action method s_rd_parprot
  input  [2 : 0] S_AXI_arprot;

  // value method s_rd_rvalid
  output S_AXI_rvalid;

  // action method s_rd_prready
  input  S_AXI_rready;

  // value method s_rd_rdata
  output [63 : 0] S_AXI_rdata;

  // value method s_rd_rresp
  output [1 : 0] S_AXI_rresp;

  // value method s_wr_awready
  output S_AXI_awready;

  // action method s_wr_pawvalid
  input  S_AXI_awvalid;

  // action method s_wr_pawaddr
  input  [63 : 0] S_AXI_awaddr;

  // action method s_wr_pawprot
  input  [2 : 0] S_AXI_awprot;

  // value method s_wr_wready
  output S_AXI_wready;

  // action method s_wr_pwvalid
  input  S_AXI_wvalid;

  // action method s_wr_pwdata
  input  [63 : 0] S_AXI_wdata;

  // action method s_wr_pwstrb
  input  [7 : 0] S_AXI_wstrb;

  // value method s_wr_bvalid
  output S_AXI_bvalid;

  // action method s_wr_pbready
  input  S_AXI_bready;

  // value method s_wr_bresp
  output [1 : 0] S_AXI_bresp;

  // value method pcie_rd_arvalid
  output pcie_rd_arvalid;

  // action method pcie_rd_parready
  input  pcie_rd_arready;

  // value method pcie_rd_arid

  // value method pcie_rd_araddr
  output [63 : 0] pcie_rd_araddr;

  // value method pcie_rd_arlen
  output [7 : 0] pcie_rd_arlen;

  // value method pcie_rd_arsize
  output [2 : 0] pcie_rd_arsize;

  // value method pcie_rd_arburst
  output [1 : 0] pcie_rd_arburst;

  // value method pcie_rd_arlock
  output pcie_rd_arlock;

  // value method pcie_rd_arcache
  output [3 : 0] pcie_rd_arcache;

  // value method pcie_rd_arprot
  output [2 : 0] pcie_rd_arprot;

  // value method pcie_rd_arqos
  output [3 : 0] pcie_rd_arqos;

  // value method pcie_rd_arregion
  output [3 : 0] pcie_rd_arregion;

  // value method pcie_rd_aruser
  output pcie_rd_aruser;

  // value method pcie_rd_rready
  output pcie_rd_rready;

  // action method pcie_rd_prvalid
  input  pcie_rd_rvalid;

  // action method pcie_rd_prchannel
  input  [255 : 0] pcie_rd_rdata;
  input  [1 : 0] pcie_rd_rresp;
  input  pcie_rd_rlast;
  input  pcie_rd_ruser;

  // action method pcie_wr_pawready
  input  pcie_wr_awready;

  // value method pcie_wr_awvalid
  output pcie_wr_awvalid;

  // value method pcie_wr_awid

  // value method pcie_wr_awaddr
  output [63 : 0] pcie_wr_awaddr;

  // value method pcie_wr_awlen
  output [7 : 0] pcie_wr_awlen;

  // value method pcie_wr_awsize
  output [2 : 0] pcie_wr_awsize;

  // value method pcie_wr_awburst
  output [1 : 0] pcie_wr_awburst;

  // value method pcie_wr_awlock
  output pcie_wr_awlock;

  // value method pcie_wr_awcache
  output [3 : 0] pcie_wr_awcache;

  // value method pcie_wr_awprot
  output [2 : 0] pcie_wr_awprot;

  // value method pcie_wr_awqos
  output [3 : 0] pcie_wr_awqos;

  // value method pcie_wr_awregion
  output [3 : 0] pcie_wr_awregion;

  // value method pcie_wr_awuser
  output pcie_wr_awuser;

  // action method pcie_wr_pwready
  input  pcie_wr_wready;

  // value method pcie_wr_wvalid
  output pcie_wr_wvalid;

  // value method pcie_wr_wdata
  output [255 : 0] pcie_wr_wdata;

  // value method pcie_wr_wstrb
  output [31 : 0] pcie_wr_wstrb;

  // value method pcie_wr_wlast
  output pcie_wr_wlast;

  // value method pcie_wr_wuser
  output pcie_wr_wuser;

  // action method pcie_wr_pbvalid
  input  pcie_wr_bvalid;

  // value method pcie_wr_bready
  output pcie_wr_bready;

  // action method pcie_wr_bin
  input  [1 : 0] pcie_wr_bresp;
  input  pcie_wr_buser;

  // value method fpga_rd_arvalid
  output fpga_rd_arvalid;

  // action method fpga_rd_parready
  input  fpga_rd_arready;

  // value method fpga_rd_arid

  // value method fpga_rd_araddr
  output [63 : 0] fpga_rd_araddr;

  // value method fpga_rd_arlen
  output [7 : 0] fpga_rd_arlen;

  // value method fpga_rd_arsize
  output [2 : 0] fpga_rd_arsize;

  // value method fpga_rd_arburst
  output [1 : 0] fpga_rd_arburst;

  // value method fpga_rd_arlock
  output fpga_rd_arlock;

  // value method fpga_rd_arcache
  output [3 : 0] fpga_rd_arcache;

  // value method fpga_rd_arprot
  output [2 : 0] fpga_rd_arprot;

  // value method fpga_rd_arqos
  output [3 : 0] fpga_rd_arqos;

  // value method fpga_rd_arregion
  output [3 : 0] fpga_rd_arregion;

  // value method fpga_rd_aruser
  output fpga_rd_aruser;

  // value method fpga_rd_rready
  output fpga_rd_rready;

  // action method fpga_rd_prvalid
  input  fpga_rd_rvalid;

  // action method fpga_rd_prchannel
  input  [511 : 0] fpga_rd_rdata;
  input  [1 : 0] fpga_rd_rresp;
  input  fpga_rd_rlast;
  input  fpga_rd_ruser;

  // action method fpga_wr_pawready
  input  fpga_wr_awready;

  // value method fpga_wr_awvalid
  output fpga_wr_awvalid;

  // value method fpga_wr_awid

  // value method fpga_wr_awaddr
  output [63 : 0] fpga_wr_awaddr;

  // value method fpga_wr_awlen
  output [7 : 0] fpga_wr_awlen;

  // value method fpga_wr_awsize
  output [2 : 0] fpga_wr_awsize;

  // value method fpga_wr_awburst
  output [1 : 0] fpga_wr_awburst;

  // value method fpga_wr_awlock
  output fpga_wr_awlock;

  // value method fpga_wr_awcache
  output [3 : 0] fpga_wr_awcache;

  // value method fpga_wr_awprot
  output [2 : 0] fpga_wr_awprot;

  // value method fpga_wr_awqos
  output [3 : 0] fpga_wr_awqos;

  // value method fpga_wr_awregion
  output [3 : 0] fpga_wr_awregion;

  // value method fpga_wr_awuser
  output fpga_wr_awuser;

  // action method fpga_wr_pwready
  input  fpga_wr_wready;

  // value method fpga_wr_wvalid
  output fpga_wr_wvalid;

  // value method fpga_wr_wdata
  output [511 : 0] fpga_wr_wdata;

  // value method fpga_wr_wstrb
  output [63 : 0] fpga_wr_wstrb;

  // value method fpga_wr_wlast
  output fpga_wr_wlast;

  // value method fpga_wr_wuser
  output fpga_wr_wuser;

  // action method fpga_wr_pbvalid
  input  fpga_wr_bvalid;

  // value method fpga_wr_bready
  output fpga_wr_bready;

  // action method fpga_wr_bin
  input  [1 : 0] fpga_wr_bresp;
  input  fpga_wr_buser;

  // value method interrupt
  output interrupt;

  // signals for module outputs
  wire [511 : 0] fpga_wr_wdata;
  wire [255 : 0] pcie_wr_wdata;
  wire [63 : 0] S_AXI_rdata,
		fpga_rd_araddr,
		fpga_wr_awaddr,
		fpga_wr_wstrb,
		pcie_rd_araddr,
		pcie_wr_awaddr;
  wire [31 : 0] pcie_wr_wstrb;
  wire [7 : 0] fpga_rd_arlen, fpga_wr_awlen, pcie_rd_arlen, pcie_wr_awlen;
  wire [3 : 0] fpga_rd_arcache,
	       fpga_rd_arqos,
	       fpga_rd_arregion,
	       fpga_wr_awcache,
	       fpga_wr_awqos,
	       fpga_wr_awregion,
	       pcie_rd_arcache,
	       pcie_rd_arqos,
	       pcie_rd_arregion,
	       pcie_wr_awcache,
	       pcie_wr_awqos,
	       pcie_wr_awregion;
  wire [2 : 0] fpga_rd_arprot,
	       fpga_rd_arsize,
	       fpga_wr_awprot,
	       fpga_wr_awsize,
	       pcie_rd_arprot,
	       pcie_rd_arsize,
	       pcie_wr_awprot,
	       pcie_wr_awsize;
  wire [1 : 0] S_AXI_bresp,
	       S_AXI_rresp,
	       fpga_rd_arburst,
	       fpga_wr_awburst,
	       pcie_rd_arburst,
	       pcie_wr_awburst;
  wire S_AXI_arready,
       S_AXI_awready,
       S_AXI_bvalid,
       S_AXI_rvalid,
       S_AXI_wready,
       fpga_rd_arlock,
       fpga_rd_aruser,
       fpga_rd_arvalid,
       fpga_rd_rready,
       fpga_wr_awlock,
       fpga_wr_awuser,
       fpga_wr_awvalid,
       fpga_wr_bready,
       fpga_wr_wlast,
       fpga_wr_wuser,
       fpga_wr_wvalid,
       interrupt,
       pcie_rd_arlock,
       pcie_rd_aruser,
       pcie_rd_arvalid,
       pcie_rd_rready,
       pcie_wr_awlock,
       pcie_wr_awuser,
       pcie_wr_awvalid,
       pcie_wr_bready,
       pcie_wr_wlast,
       pcie_wr_wuser,
       pcie_wr_wvalid;

  // inlined wires
  reg [3 : 0] m_fpga_rd_master_rd_warcache$wget,
	      m_fpga_wr_master_wr_wawcache$wget,
	      m_pcie_rd_master_rd_warcache$wget,
	      m_pcie_wr_master_wr_wawcache$wget;
  wire [515 : 0] m_fpga_rd_master_rd_rinpkg$wget;
  wire [511 : 0] byteAlignerReader_buffer$port0__write_1,
		 byteAlignerReader_buffer$port1__read,
		 byteAlignerReader_buffer$port1__write_1,
		 byteAlignerReader_buffer$port2__read,
		 byteAlignerWriter_buffer$port0__write_1,
		 byteAlignerWriter_buffer$port1__read,
		 byteAlignerWriter_buffer$port1__write_1,
		 byteAlignerWriter_buffer$port2__read;
  wire [259 : 0] m_pcie_rd_master_rd_rinpkg$wget;
  wire [192 : 0] readIn_rv$port1__read,
		 readIn_rv$port1__write_1,
		 readIn_rv$port2__read,
		 writeIn_rv$port1__read,
		 writeIn_rv$port2__read;
  wire [72 : 0] s_config_writeSlave_dataIn_rv$port0__write_1,
		s_config_writeSlave_dataIn_rv$port1__read,
		s_config_writeSlave_dataIn_rv$port2__read;
  wire [67 : 0] s_config_writeSlave_addrIn_rv$port0__write_1,
		s_config_writeSlave_addrIn_rv$port1__read,
		s_config_writeSlave_addrIn_rv$port2__read;
  wire [5 : 0] byteAlignerReader_bytes_left_in_buffer$port0__write_1,
	       byteAlignerReader_bytes_left_in_buffer$port1__write_1,
	       byteAlignerReader_bytes_left_in_buffer$port2__read,
	       byteAlignerWriter_bytes_left_in_buffer$port0__write_1,
	       byteAlignerWriter_bytes_left_in_buffer$port1__write_1,
	       byteAlignerWriter_bytes_left_in_buffer$port2__read;
  wire [2 : 0] m_fpga_wr_master_wr_rinpkg$wget,
	       m_pcie_wr_master_wr_rinpkg$wget;
  wire byteAlignerReader_buffer$EN_port0__write,
       byteAlignerReader_bytes_left_in_buffer$EN_port0__write,
       byteAlignerReader_fetchedDatum$EN_port0__write,
       byteAlignerReader_fetchedDatum$port1__read,
       byteAlignerReader_fetchedDatum$port2__read,
       byteAlignerWriter_buffer$EN_port0__write,
       byteAlignerWriter_bytes_left_in_buffer$EN_port0__write,
       byteAlignerWriter_fetchedDatum$EN_port0__write,
       byteAlignerWriter_fetchedDatum$port1__read,
       byteAlignerWriter_fetchedDatum$port2__read,
       readConverter_bufferEmpty$EN_port0__write,
       readConverter_bufferEmpty$EN_port1__write,
       readConverter_bufferEmpty$port1__read,
       readConverter_bufferEmpty$port2__read,
       readIn_rv$EN_port1__write,
       s_config_readIsHandled$whas,
       s_config_writeIsHandled$whas,
       s_config_writeSlave_addrIn_rv$EN_port0__write,
       s_config_writeSlave_addrIn_rv$EN_port1__write,
       s_config_writeSlave_dataIn_rv$EN_port0__write,
       s_config_writeSlave_dataIn_rv$EN_port1__write,
       writeIn_rv$EN_port1__write;

  // register byteAlignerReader_buffer
  reg [511 : 0] byteAlignerReader_buffer;
  wire [511 : 0] byteAlignerReader_buffer$D_IN;
  wire byteAlignerReader_buffer$EN;

  // register byteAlignerReader_bytes_in
  reg [63 : 0] byteAlignerReader_bytes_in;
  wire [63 : 0] byteAlignerReader_bytes_in$D_IN;
  wire byteAlignerReader_bytes_in$EN;

  // register byteAlignerReader_bytes_left_in_buffer
  reg [5 : 0] byteAlignerReader_bytes_left_in_buffer;
  wire [5 : 0] byteAlignerReader_bytes_left_in_buffer$D_IN;
  wire byteAlignerReader_bytes_left_in_buffer$EN;

  // register byteAlignerReader_bytes_out
  reg [63 : 0] byteAlignerReader_bytes_out;
  reg [63 : 0] byteAlignerReader_bytes_out$D_IN;
  wire byteAlignerReader_bytes_out$EN;

  // register byteAlignerReader_bytes_out_needed
  reg [5 : 0] byteAlignerReader_bytes_out_needed;
  wire [5 : 0] byteAlignerReader_bytes_out_needed$D_IN;
  wire byteAlignerReader_bytes_out_needed$EN;

  // register byteAlignerReader_bytes_total
  reg [63 : 0] byteAlignerReader_bytes_total;
  wire [63 : 0] byteAlignerReader_bytes_total$D_IN;
  wire byteAlignerReader_bytes_total$EN;

  // register byteAlignerReader_fetchedDatum
  reg byteAlignerReader_fetchedDatum;
  wire byteAlignerReader_fetchedDatum$D_IN, byteAlignerReader_fetchedDatum$EN;

  // register byteAlignerWriter_buffer
  reg [511 : 0] byteAlignerWriter_buffer;
  wire [511 : 0] byteAlignerWriter_buffer$D_IN;
  wire byteAlignerWriter_buffer$EN;

  // register byteAlignerWriter_bytes_in
  reg [63 : 0] byteAlignerWriter_bytes_in;
  wire [63 : 0] byteAlignerWriter_bytes_in$D_IN;
  wire byteAlignerWriter_bytes_in$EN;

  // register byteAlignerWriter_bytes_left_in_buffer
  reg [5 : 0] byteAlignerWriter_bytes_left_in_buffer;
  wire [5 : 0] byteAlignerWriter_bytes_left_in_buffer$D_IN;
  wire byteAlignerWriter_bytes_left_in_buffer$EN;

  // register byteAlignerWriter_bytes_out
  reg [63 : 0] byteAlignerWriter_bytes_out;
  reg [63 : 0] byteAlignerWriter_bytes_out$D_IN;
  wire byteAlignerWriter_bytes_out$EN;

  // register byteAlignerWriter_bytes_out_needed
  reg [5 : 0] byteAlignerWriter_bytes_out_needed;
  wire [5 : 0] byteAlignerWriter_bytes_out_needed$D_IN;
  wire byteAlignerWriter_bytes_out_needed$EN;

  // register byteAlignerWriter_bytes_total
  reg [63 : 0] byteAlignerWriter_bytes_total;
  wire [63 : 0] byteAlignerWriter_bytes_total$D_IN;
  wire byteAlignerWriter_bytes_total$EN;

  // register byteAlignerWriter_fetchedDatum
  reg byteAlignerWriter_fetchedDatum;
  wire byteAlignerWriter_fetchedDatum$D_IN, byteAlignerWriter_fetchedDatum$EN;

  // register clkCntr
  reg [31 : 0] clkCntr;
  wire [31 : 0] clkCntr$D_IN;
  wire clkCntr$EN;

  // register cycles_between
  reg [63 : 0] cycles_between;
  wire [63 : 0] cycles_between$D_IN;
  wire cycles_between$EN;

  // register cycles_between_set
  reg [63 : 0] cycles_between_set;
  wire [63 : 0] cycles_between_set$D_IN;
  wire cycles_between_set$EN;

  // register cycles_last_request
  reg [63 : 0] cycles_last_request;
  wire [63 : 0] cycles_last_request$D_IN;
  wire cycles_last_request$EN;

  // register doneInterruptReg
  reg doneInterruptReg;
  wire doneInterruptReg$D_IN, doneInterruptReg$EN;

  // register fpgaLastCycle
  reg fpgaLastCycle;
  wire fpgaLastCycle$D_IN, fpgaLastCycle$EN;

  // register fpga_addr
  reg [63 : 0] fpga_addr;
  wire [63 : 0] fpga_addr$D_IN;
  wire fpga_addr$EN;

  // register host_addr
  reg [63 : 0] host_addr;
  wire [63 : 0] host_addr$D_IN;
  wire host_addr$EN;

  // register id
  reg [63 : 0] id;
  wire [63 : 0] id$D_IN;
  wire id$EN;

  // register isWriteActive
  reg isWriteActive;
  wire isWriteActive$D_IN, isWriteActive$EN;

  // register m_fpga_rd_clkCntr
  reg [31 : 0] m_fpga_rd_clkCntr;
  wire [31 : 0] m_fpga_rd_clkCntr$D_IN;
  wire m_fpga_rd_clkCntr$EN;

  // register m_fpga_rd_lastPut
  reg [31 : 0] m_fpga_rd_lastPut;
  wire [31 : 0] m_fpga_rd_lastPut$D_IN;
  wire m_fpga_rd_lastPut$EN;

  // register m_fpga_rd_putDelay
  reg [31 : 0] m_fpga_rd_putDelay;
  wire [31 : 0] m_fpga_rd_putDelay$D_IN;
  wire m_fpga_rd_putDelay$EN;

  // register m_fpga_rd_task_data_output_reg
  reg [76 : 0] m_fpga_rd_task_data_output_reg;
  wire [76 : 0] m_fpga_rd_task_data_output_reg$D_IN;
  wire m_fpga_rd_task_data_output_reg$EN;

  // register m_fpga_rd_task_data_requests_reg
  reg [133 : 0] m_fpga_rd_task_data_requests_reg;
  wire [133 : 0] m_fpga_rd_task_data_requests_reg$D_IN;
  wire m_fpga_rd_task_data_requests_reg$EN;

  // register m_fpga_rd_totalPuts
  reg [31 : 0] m_fpga_rd_totalPuts;
  wire [31 : 0] m_fpga_rd_totalPuts$D_IN;
  wire m_fpga_rd_totalPuts$EN;

  // register m_fpga_wr_beatsThisRequestCntr
  reg [7 : 0] m_fpga_wr_beatsThisRequestCntr;
  wire [7 : 0] m_fpga_wr_beatsThisRequestCntr$D_IN;
  wire m_fpga_wr_beatsThisRequestCntr$EN;

  // register m_fpga_wr_clkCntr
  reg [31 : 0] m_fpga_wr_clkCntr;
  wire [31 : 0] m_fpga_wr_clkCntr$D_IN;
  wire m_fpga_wr_clkCntr$EN;

  // register m_fpga_wr_lastPut
  reg [31 : 0] m_fpga_wr_lastPut;
  wire [31 : 0] m_fpga_wr_lastPut$D_IN;
  wire m_fpga_wr_lastPut$EN;

  // register m_fpga_wr_putDelay
  reg [31 : 0] m_fpga_wr_putDelay;
  wire [31 : 0] m_fpga_wr_putDelay$D_IN;
  wire m_fpga_wr_putDelay$EN;

  // register m_fpga_wr_task_data_output_reg
  reg [76 : 0] m_fpga_wr_task_data_output_reg;
  wire [76 : 0] m_fpga_wr_task_data_output_reg$D_IN;
  wire m_fpga_wr_task_data_output_reg$EN;

  // register m_fpga_wr_task_data_requests_reg
  reg [133 : 0] m_fpga_wr_task_data_requests_reg;
  wire [133 : 0] m_fpga_wr_task_data_requests_reg$D_IN;
  wire m_fpga_wr_task_data_requests_reg$EN;

  // register m_fpga_wr_totalPuts
  reg [31 : 0] m_fpga_wr_totalPuts;
  wire [31 : 0] m_fpga_wr_totalPuts$D_IN;
  wire m_fpga_wr_totalPuts$EN;

  // register m_pcie_rd_clkCntr
  reg [31 : 0] m_pcie_rd_clkCntr;
  wire [31 : 0] m_pcie_rd_clkCntr$D_IN;
  wire m_pcie_rd_clkCntr$EN;

  // register m_pcie_rd_lastPut
  reg [31 : 0] m_pcie_rd_lastPut;
  wire [31 : 0] m_pcie_rd_lastPut$D_IN;
  wire m_pcie_rd_lastPut$EN;

  // register m_pcie_rd_putDelay
  reg [31 : 0] m_pcie_rd_putDelay;
  wire [31 : 0] m_pcie_rd_putDelay$D_IN;
  wire m_pcie_rd_putDelay$EN;

  // register m_pcie_rd_task_data_output_reg
  reg [74 : 0] m_pcie_rd_task_data_output_reg;
  wire [74 : 0] m_pcie_rd_task_data_output_reg$D_IN;
  wire m_pcie_rd_task_data_output_reg$EN;

  // register m_pcie_rd_task_data_requests_reg
  reg [134 : 0] m_pcie_rd_task_data_requests_reg;
  wire [134 : 0] m_pcie_rd_task_data_requests_reg$D_IN;
  wire m_pcie_rd_task_data_requests_reg$EN;

  // register m_pcie_rd_totalPuts
  reg [31 : 0] m_pcie_rd_totalPuts;
  wire [31 : 0] m_pcie_rd_totalPuts$D_IN;
  wire m_pcie_rd_totalPuts$EN;

  // register m_pcie_wr_beatsThisRequestCntr
  reg [7 : 0] m_pcie_wr_beatsThisRequestCntr;
  wire [7 : 0] m_pcie_wr_beatsThisRequestCntr$D_IN;
  wire m_pcie_wr_beatsThisRequestCntr$EN;

  // register m_pcie_wr_clkCntr
  reg [31 : 0] m_pcie_wr_clkCntr;
  wire [31 : 0] m_pcie_wr_clkCntr$D_IN;
  wire m_pcie_wr_clkCntr$EN;

  // register m_pcie_wr_lastPut
  reg [31 : 0] m_pcie_wr_lastPut;
  wire [31 : 0] m_pcie_wr_lastPut$D_IN;
  wire m_pcie_wr_lastPut$EN;

  // register m_pcie_wr_putDelay
  reg [31 : 0] m_pcie_wr_putDelay;
  wire [31 : 0] m_pcie_wr_putDelay$D_IN;
  wire m_pcie_wr_putDelay$EN;

  // register m_pcie_wr_task_data_output_reg
  reg [74 : 0] m_pcie_wr_task_data_output_reg;
  wire [74 : 0] m_pcie_wr_task_data_output_reg$D_IN;
  wire m_pcie_wr_task_data_output_reg$EN;

  // register m_pcie_wr_task_data_requests_reg
  reg [134 : 0] m_pcie_wr_task_data_requests_reg;
  wire [134 : 0] m_pcie_wr_task_data_requests_reg$D_IN;
  wire m_pcie_wr_task_data_requests_reg$EN;

  // register m_pcie_wr_totalPuts
  reg [31 : 0] m_pcie_wr_totalPuts;
  wire [31 : 0] m_pcie_wr_totalPuts$D_IN;
  wire m_pcie_wr_totalPuts$EN;

  // register opInProgress
  reg opInProgress;
  wire opInProgress$D_IN, opInProgress$EN;

  // register pc_betweenStart
  reg [31 : 0] pc_betweenStart;
  wire [31 : 0] pc_betweenStart$D_IN;
  wire pc_betweenStart$EN;

  // register pc_reqCntr
  reg [11 : 0] pc_reqCntr;
  wire [11 : 0] pc_reqCntr$D_IN;
  wire pc_reqCntr$EN;

  // register pc_start
  reg [31 : 0] pc_start;
  wire [31 : 0] pc_start$D_IN;
  wire pc_start$EN;

  // register pcieLastCycle
  reg pcieLastCycle;
  wire pcieLastCycle$D_IN, pcieLastCycle$EN;

  // register readConverter_buffer
  reg [511 : 0] readConverter_buffer;
  wire [511 : 0] readConverter_buffer$D_IN;
  wire readConverter_buffer$EN;

  // register readConverter_bufferEmpty
  reg readConverter_bufferEmpty;
  wire readConverter_bufferEmpty$D_IN, readConverter_bufferEmpty$EN;

  // register readConverter_byteCntr
  reg [63 : 0] readConverter_byteCntr;
  wire [63 : 0] readConverter_byteCntr$D_IN;
  wire readConverter_byteCntr$EN;

  // register readConverter_wordInCntr
  reg readConverter_wordInCntr;
  wire readConverter_wordInCntr$D_IN, readConverter_wordInCntr$EN;

  // register readIn_rv
  reg [192 : 0] readIn_rv;
  wire [192 : 0] readIn_rv$D_IN;
  wire readIn_rv$EN;

  // register read_requests
  reg [63 : 0] read_requests;
  wire [63 : 0] read_requests$D_IN;
  wire read_requests$EN;

  // register s_config_readBusy
  reg s_config_readBusy;
  wire s_config_readBusy$D_IN, s_config_readBusy$EN;

  // register s_config_writeSlave_addrIn_rv
  reg [67 : 0] s_config_writeSlave_addrIn_rv;
  wire [67 : 0] s_config_writeSlave_addrIn_rv$D_IN;
  wire s_config_writeSlave_addrIn_rv$EN;

  // register s_config_writeSlave_dataIn_rv
  reg [72 : 0] s_config_writeSlave_dataIn_rv;
  wire [72 : 0] s_config_writeSlave_dataIn_rv$D_IN;
  wire s_config_writeSlave_dataIn_rv$EN;

  // register transfer_length
  reg [63 : 0] transfer_length;
  wire [63 : 0] transfer_length$D_IN;
  wire transfer_length$EN;

  // register writeConverter_buffer_0
  reg [255 : 0] writeConverter_buffer_0;
  wire [255 : 0] writeConverter_buffer_0$D_IN;
  wire writeConverter_buffer_0$EN;

  // register writeConverter_byteCntr
  reg [63 : 0] writeConverter_byteCntr;
  wire [63 : 0] writeConverter_byteCntr$D_IN;
  wire writeConverter_byteCntr$EN;

  // register writeConverter_wordInCntr
  reg [1 : 0] writeConverter_wordInCntr;
  wire [1 : 0] writeConverter_wordInCntr$D_IN;
  wire writeConverter_wordInCntr$EN;

  // register writeIn_rv
  reg [192 : 0] writeIn_rv;
  wire [192 : 0] writeIn_rv$D_IN;
  wire writeIn_rv$EN;

  // register write_requests
  reg [63 : 0] write_requests;
  wire [63 : 0] write_requests$D_IN;
  wire write_requests$EN;

  // ports of submodule byteAlignerReader_addr_ff
  wire [191 : 0] byteAlignerReader_addr_ff$dD_OUT,
		 byteAlignerReader_addr_ff$sD_IN;
  wire byteAlignerReader_addr_ff$dDEQ,
       byteAlignerReader_addr_ff$dEMPTY_N,
       byteAlignerReader_addr_ff$sENQ;

  // ports of submodule byteAlignerReader_incoming
  wire [255 : 0] byteAlignerReader_incoming$D_IN,
		 byteAlignerReader_incoming$D_OUT;
  wire byteAlignerReader_incoming$CLR,
       byteAlignerReader_incoming$DEQ,
       byteAlignerReader_incoming$EMPTY_N,
       byteAlignerReader_incoming$ENQ;

  // ports of submodule byteAlignerReader_outgoing
  wire [255 : 0] byteAlignerReader_outgoing$D_IN;
  wire byteAlignerReader_outgoing$CLR,
       byteAlignerReader_outgoing$DEQ,
       byteAlignerReader_outgoing$ENQ,
       byteAlignerReader_outgoing$FULL_N;

  // ports of submodule byteAlignerWriter_addr_ff
  wire [191 : 0] byteAlignerWriter_addr_ff$dD_OUT,
		 byteAlignerWriter_addr_ff$sD_IN;
  wire byteAlignerWriter_addr_ff$dDEQ,
       byteAlignerWriter_addr_ff$dEMPTY_N,
       byteAlignerWriter_addr_ff$sENQ;

  // ports of submodule byteAlignerWriter_incoming
  wire [255 : 0] byteAlignerWriter_incoming$D_IN,
		 byteAlignerWriter_incoming$D_OUT;
  wire byteAlignerWriter_incoming$CLR,
       byteAlignerWriter_incoming$DEQ,
       byteAlignerWriter_incoming$EMPTY_N,
       byteAlignerWriter_incoming$ENQ;

  // ports of submodule byteAlignerWriter_outgoing
  wire [255 : 0] byteAlignerWriter_outgoing$D_IN;
  wire byteAlignerWriter_outgoing$CLR,
       byteAlignerWriter_outgoing$DEQ,
       byteAlignerWriter_outgoing$ENQ,
       byteAlignerWriter_outgoing$FULL_N;

  // ports of submodule cmdsIn
  wire cmdsIn$CLR,
       cmdsIn$DEQ,
       cmdsIn$D_IN,
       cmdsIn$D_OUT,
       cmdsIn$EMPTY_N,
       cmdsIn$ENQ,
       cmdsIn$FULL_N;

  // ports of submodule fpgaDone
  wire fpgaDone$dDEQ,
       fpgaDone$dEMPTY_N,
       fpgaDone$sD_IN,
       fpgaDone$sENQ,
       fpgaDone$sFULL_N;

  // ports of submodule fpga_request_converter
  wire [511 : 0] fpga_request_converter$dD_OUT, fpga_request_converter$sD_IN;
  wire fpga_request_converter$dDEQ,
       fpga_request_converter$dEMPTY_N,
       fpga_request_converter$sENQ,
       fpga_request_converter$sFULL_N;

  // ports of submodule fpga_response_converter
  wire [511 : 0] fpga_response_converter$dD_OUT,
		 fpga_response_converter$sD_IN;
  wire fpga_response_converter$dDEQ,
       fpga_response_converter$dEMPTY_N,
       fpga_response_converter$sENQ,
       fpga_response_converter$sFULL_N;

  // ports of submodule m_fpga_rd_master_rd_in
  wire [93 : 0] m_fpga_rd_master_rd_in$D_IN, m_fpga_rd_master_rd_in$D_OUT;
  wire m_fpga_rd_master_rd_in$CLR,
       m_fpga_rd_master_rd_in$DEQ,
       m_fpga_rd_master_rd_in$EMPTY_N,
       m_fpga_rd_master_rd_in$ENQ,
       m_fpga_rd_master_rd_in$FULL_N;

  // ports of submodule m_fpga_rd_master_rd_out
  wire [515 : 0] m_fpga_rd_master_rd_out$D_IN, m_fpga_rd_master_rd_out$D_OUT;
  wire m_fpga_rd_master_rd_out$CLR,
       m_fpga_rd_master_rd_out$DEQ,
       m_fpga_rd_master_rd_out$EMPTY_N,
       m_fpga_rd_master_rd_out$ENQ,
       m_fpga_rd_master_rd_out$FULL_N;

  // ports of submodule m_fpga_rd_outgoingBuffer
  wire [511 : 0] m_fpga_rd_outgoingBuffer$D_IN,
		 m_fpga_rd_outgoingBuffer$D_OUT;
  wire m_fpga_rd_outgoingBuffer$CLR,
       m_fpga_rd_outgoingBuffer$DEQ,
       m_fpga_rd_outgoingBuffer$EMPTY_N,
       m_fpga_rd_outgoingBuffer$ENQ,
       m_fpga_rd_outgoingBuffer$FULL_N;

  // ports of submodule m_fpga_rd_reqGen_incomingBuffer
  wire [131 : 0] m_fpga_rd_reqGen_incomingBuffer$D_IN,
		 m_fpga_rd_reqGen_incomingBuffer$D_OUT;
  wire m_fpga_rd_reqGen_incomingBuffer$CLR,
       m_fpga_rd_reqGen_incomingBuffer$DEQ,
       m_fpga_rd_reqGen_incomingBuffer$EMPTY_N,
       m_fpga_rd_reqGen_incomingBuffer$ENQ,
       m_fpga_rd_reqGen_incomingBuffer$FULL_N;

  // ports of submodule m_fpga_rd_reqGen_intermediateBuffer
  wire [143 : 0] m_fpga_rd_reqGen_intermediateBuffer$D_IN,
		 m_fpga_rd_reqGen_intermediateBuffer$D_OUT;
  wire m_fpga_rd_reqGen_intermediateBuffer$CLR,
       m_fpga_rd_reqGen_intermediateBuffer$DEQ,
       m_fpga_rd_reqGen_intermediateBuffer$EMPTY_N,
       m_fpga_rd_reqGen_intermediateBuffer$ENQ,
       m_fpga_rd_reqGen_intermediateBuffer$FULL_N;

  // ports of submodule m_fpga_rd_reqGen_intermediateBuffer2
  wire [201 : 0] m_fpga_rd_reqGen_intermediateBuffer2$D_IN,
		 m_fpga_rd_reqGen_intermediateBuffer2$D_OUT;
  wire m_fpga_rd_reqGen_intermediateBuffer2$CLR,
       m_fpga_rd_reqGen_intermediateBuffer2$DEQ,
       m_fpga_rd_reqGen_intermediateBuffer2$EMPTY_N,
       m_fpga_rd_reqGen_intermediateBuffer2$ENQ,
       m_fpga_rd_reqGen_intermediateBuffer2$FULL_N;

  // ports of submodule m_fpga_rd_reqGen_outgoingBuffer
  wire [210 : 0] m_fpga_rd_reqGen_outgoingBuffer$D_IN,
		 m_fpga_rd_reqGen_outgoingBuffer$D_OUT;
  wire m_fpga_rd_reqGen_outgoingBuffer$CLR,
       m_fpga_rd_reqGen_outgoingBuffer$DEQ,
       m_fpga_rd_reqGen_outgoingBuffer$EMPTY_N,
       m_fpga_rd_reqGen_outgoingBuffer$ENQ,
       m_fpga_rd_reqGen_outgoingBuffer$FULL_N;

  // ports of submodule m_fpga_wr_beatsPerRequestFIFO
  wire [7 : 0] m_fpga_wr_beatsPerRequestFIFO$D_IN,
	       m_fpga_wr_beatsPerRequestFIFO$D_OUT;
  wire m_fpga_wr_beatsPerRequestFIFO$CLR,
       m_fpga_wr_beatsPerRequestFIFO$DEQ,
       m_fpga_wr_beatsPerRequestFIFO$EMPTY_N,
       m_fpga_wr_beatsPerRequestFIFO$ENQ,
       m_fpga_wr_beatsPerRequestFIFO$FULL_N;

  // ports of submodule m_fpga_wr_incomingBuffer
  wire [511 : 0] m_fpga_wr_incomingBuffer$D_IN,
		 m_fpga_wr_incomingBuffer$D_OUT;
  wire m_fpga_wr_incomingBuffer$CLR,
       m_fpga_wr_incomingBuffer$DEQ,
       m_fpga_wr_incomingBuffer$EMPTY_N,
       m_fpga_wr_incomingBuffer$ENQ,
       m_fpga_wr_incomingBuffer$FULL_N;

  // ports of submodule m_fpga_wr_master_wr_in_addr
  wire [93 : 0] m_fpga_wr_master_wr_in_addr$D_IN,
		m_fpga_wr_master_wr_in_addr$D_OUT;
  wire m_fpga_wr_master_wr_in_addr$CLR,
       m_fpga_wr_master_wr_in_addr$DEQ,
       m_fpga_wr_master_wr_in_addr$EMPTY_N,
       m_fpga_wr_master_wr_in_addr$ENQ,
       m_fpga_wr_master_wr_in_addr$FULL_N;

  // ports of submodule m_fpga_wr_master_wr_in_data
  wire [577 : 0] m_fpga_wr_master_wr_in_data$D_IN,
		 m_fpga_wr_master_wr_in_data$D_OUT;
  wire m_fpga_wr_master_wr_in_data$CLR,
       m_fpga_wr_master_wr_in_data$DEQ,
       m_fpga_wr_master_wr_in_data$EMPTY_N,
       m_fpga_wr_master_wr_in_data$ENQ,
       m_fpga_wr_master_wr_in_data$FULL_N;

  // ports of submodule m_fpga_wr_master_wr_out
  wire [2 : 0] m_fpga_wr_master_wr_out$D_IN;
  wire m_fpga_wr_master_wr_out$CLR,
       m_fpga_wr_master_wr_out$DEQ,
       m_fpga_wr_master_wr_out$EMPTY_N,
       m_fpga_wr_master_wr_out$ENQ,
       m_fpga_wr_master_wr_out$FULL_N;

  // ports of submodule m_fpga_wr_reqGen_incomingBuffer
  wire [131 : 0] m_fpga_wr_reqGen_incomingBuffer$D_IN,
		 m_fpga_wr_reqGen_incomingBuffer$D_OUT;
  wire m_fpga_wr_reqGen_incomingBuffer$CLR,
       m_fpga_wr_reqGen_incomingBuffer$DEQ,
       m_fpga_wr_reqGen_incomingBuffer$EMPTY_N,
       m_fpga_wr_reqGen_incomingBuffer$ENQ,
       m_fpga_wr_reqGen_incomingBuffer$FULL_N;

  // ports of submodule m_fpga_wr_reqGen_intermediateBuffer
  wire [143 : 0] m_fpga_wr_reqGen_intermediateBuffer$D_IN,
		 m_fpga_wr_reqGen_intermediateBuffer$D_OUT;
  wire m_fpga_wr_reqGen_intermediateBuffer$CLR,
       m_fpga_wr_reqGen_intermediateBuffer$DEQ,
       m_fpga_wr_reqGen_intermediateBuffer$EMPTY_N,
       m_fpga_wr_reqGen_intermediateBuffer$ENQ,
       m_fpga_wr_reqGen_intermediateBuffer$FULL_N;

  // ports of submodule m_fpga_wr_reqGen_intermediateBuffer2
  wire [201 : 0] m_fpga_wr_reqGen_intermediateBuffer2$D_IN,
		 m_fpga_wr_reqGen_intermediateBuffer2$D_OUT;
  wire m_fpga_wr_reqGen_intermediateBuffer2$CLR,
       m_fpga_wr_reqGen_intermediateBuffer2$DEQ,
       m_fpga_wr_reqGen_intermediateBuffer2$EMPTY_N,
       m_fpga_wr_reqGen_intermediateBuffer2$ENQ,
       m_fpga_wr_reqGen_intermediateBuffer2$FULL_N;

  // ports of submodule m_fpga_wr_reqGen_outgoingBuffer
  wire [210 : 0] m_fpga_wr_reqGen_outgoingBuffer$D_IN,
		 m_fpga_wr_reqGen_outgoingBuffer$D_OUT;
  wire m_fpga_wr_reqGen_outgoingBuffer$CLR,
       m_fpga_wr_reqGen_outgoingBuffer$DEQ,
       m_fpga_wr_reqGen_outgoingBuffer$EMPTY_N,
       m_fpga_wr_reqGen_outgoingBuffer$ENQ,
       m_fpga_wr_reqGen_outgoingBuffer$FULL_N;

  // ports of submodule m_pcie_rd_master_rd_in
  wire [93 : 0] m_pcie_rd_master_rd_in$D_IN, m_pcie_rd_master_rd_in$D_OUT;
  wire m_pcie_rd_master_rd_in$CLR,
       m_pcie_rd_master_rd_in$DEQ,
       m_pcie_rd_master_rd_in$EMPTY_N,
       m_pcie_rd_master_rd_in$ENQ,
       m_pcie_rd_master_rd_in$FULL_N;

  // ports of submodule m_pcie_rd_master_rd_out
  wire [259 : 0] m_pcie_rd_master_rd_out$D_IN, m_pcie_rd_master_rd_out$D_OUT;
  wire m_pcie_rd_master_rd_out$CLR,
       m_pcie_rd_master_rd_out$DEQ,
       m_pcie_rd_master_rd_out$EMPTY_N,
       m_pcie_rd_master_rd_out$ENQ,
       m_pcie_rd_master_rd_out$FULL_N;

  // ports of submodule m_pcie_rd_outgoingBuffer
  wire [255 : 0] m_pcie_rd_outgoingBuffer$D_IN,
		 m_pcie_rd_outgoingBuffer$D_OUT;
  wire m_pcie_rd_outgoingBuffer$CLR,
       m_pcie_rd_outgoingBuffer$DEQ,
       m_pcie_rd_outgoingBuffer$EMPTY_N,
       m_pcie_rd_outgoingBuffer$ENQ,
       m_pcie_rd_outgoingBuffer$FULL_N;

  // ports of submodule m_pcie_rd_reqGen_incomingBuffer
  wire [131 : 0] m_pcie_rd_reqGen_incomingBuffer$D_IN,
		 m_pcie_rd_reqGen_incomingBuffer$D_OUT;
  wire m_pcie_rd_reqGen_incomingBuffer$CLR,
       m_pcie_rd_reqGen_incomingBuffer$DEQ,
       m_pcie_rd_reqGen_incomingBuffer$EMPTY_N,
       m_pcie_rd_reqGen_incomingBuffer$ENQ,
       m_pcie_rd_reqGen_incomingBuffer$FULL_N;

  // ports of submodule m_pcie_rd_reqGen_intermediateBuffer
  wire [141 : 0] m_pcie_rd_reqGen_intermediateBuffer$D_IN,
		 m_pcie_rd_reqGen_intermediateBuffer$D_OUT;
  wire m_pcie_rd_reqGen_intermediateBuffer$CLR,
       m_pcie_rd_reqGen_intermediateBuffer$DEQ,
       m_pcie_rd_reqGen_intermediateBuffer$EMPTY_N,
       m_pcie_rd_reqGen_intermediateBuffer$ENQ,
       m_pcie_rd_reqGen_intermediateBuffer$FULL_N;

  // ports of submodule m_pcie_rd_reqGen_intermediateBuffer2
  wire [200 : 0] m_pcie_rd_reqGen_intermediateBuffer2$D_IN,
		 m_pcie_rd_reqGen_intermediateBuffer2$D_OUT;
  wire m_pcie_rd_reqGen_intermediateBuffer2$CLR,
       m_pcie_rd_reqGen_intermediateBuffer2$DEQ,
       m_pcie_rd_reqGen_intermediateBuffer2$EMPTY_N,
       m_pcie_rd_reqGen_intermediateBuffer2$ENQ,
       m_pcie_rd_reqGen_intermediateBuffer2$FULL_N;

  // ports of submodule m_pcie_rd_reqGen_outgoingBuffer
  wire [209 : 0] m_pcie_rd_reqGen_outgoingBuffer$D_IN,
		 m_pcie_rd_reqGen_outgoingBuffer$D_OUT;
  wire m_pcie_rd_reqGen_outgoingBuffer$CLR,
       m_pcie_rd_reqGen_outgoingBuffer$DEQ,
       m_pcie_rd_reqGen_outgoingBuffer$EMPTY_N,
       m_pcie_rd_reqGen_outgoingBuffer$ENQ,
       m_pcie_rd_reqGen_outgoingBuffer$FULL_N;

  // ports of submodule m_pcie_wr_beatsPerRequestFIFO
  wire [7 : 0] m_pcie_wr_beatsPerRequestFIFO$D_IN,
	       m_pcie_wr_beatsPerRequestFIFO$D_OUT;
  wire m_pcie_wr_beatsPerRequestFIFO$CLR,
       m_pcie_wr_beatsPerRequestFIFO$DEQ,
       m_pcie_wr_beatsPerRequestFIFO$EMPTY_N,
       m_pcie_wr_beatsPerRequestFIFO$ENQ,
       m_pcie_wr_beatsPerRequestFIFO$FULL_N;

  // ports of submodule m_pcie_wr_incomingBuffer
  reg [255 : 0] m_pcie_wr_incomingBuffer$D_IN;
  wire [255 : 0] m_pcie_wr_incomingBuffer$D_OUT;
  wire m_pcie_wr_incomingBuffer$CLR,
       m_pcie_wr_incomingBuffer$DEQ,
       m_pcie_wr_incomingBuffer$EMPTY_N,
       m_pcie_wr_incomingBuffer$ENQ,
       m_pcie_wr_incomingBuffer$FULL_N;

  // ports of submodule m_pcie_wr_master_wr_in_addr
  wire [93 : 0] m_pcie_wr_master_wr_in_addr$D_IN,
		m_pcie_wr_master_wr_in_addr$D_OUT;
  wire m_pcie_wr_master_wr_in_addr$CLR,
       m_pcie_wr_master_wr_in_addr$DEQ,
       m_pcie_wr_master_wr_in_addr$EMPTY_N,
       m_pcie_wr_master_wr_in_addr$ENQ,
       m_pcie_wr_master_wr_in_addr$FULL_N;

  // ports of submodule m_pcie_wr_master_wr_in_data
  wire [289 : 0] m_pcie_wr_master_wr_in_data$D_IN,
		 m_pcie_wr_master_wr_in_data$D_OUT;
  wire m_pcie_wr_master_wr_in_data$CLR,
       m_pcie_wr_master_wr_in_data$DEQ,
       m_pcie_wr_master_wr_in_data$EMPTY_N,
       m_pcie_wr_master_wr_in_data$ENQ,
       m_pcie_wr_master_wr_in_data$FULL_N;

  // ports of submodule m_pcie_wr_master_wr_out
  wire [2 : 0] m_pcie_wr_master_wr_out$D_IN;
  wire m_pcie_wr_master_wr_out$CLR,
       m_pcie_wr_master_wr_out$DEQ,
       m_pcie_wr_master_wr_out$EMPTY_N,
       m_pcie_wr_master_wr_out$ENQ,
       m_pcie_wr_master_wr_out$FULL_N;

  // ports of submodule m_pcie_wr_reqGen_incomingBuffer
  wire [131 : 0] m_pcie_wr_reqGen_incomingBuffer$D_IN,
		 m_pcie_wr_reqGen_incomingBuffer$D_OUT;
  wire m_pcie_wr_reqGen_incomingBuffer$CLR,
       m_pcie_wr_reqGen_incomingBuffer$DEQ,
       m_pcie_wr_reqGen_incomingBuffer$EMPTY_N,
       m_pcie_wr_reqGen_incomingBuffer$ENQ,
       m_pcie_wr_reqGen_incomingBuffer$FULL_N;

  // ports of submodule m_pcie_wr_reqGen_intermediateBuffer
  wire [141 : 0] m_pcie_wr_reqGen_intermediateBuffer$D_IN,
		 m_pcie_wr_reqGen_intermediateBuffer$D_OUT;
  wire m_pcie_wr_reqGen_intermediateBuffer$CLR,
       m_pcie_wr_reqGen_intermediateBuffer$DEQ,
       m_pcie_wr_reqGen_intermediateBuffer$EMPTY_N,
       m_pcie_wr_reqGen_intermediateBuffer$ENQ,
       m_pcie_wr_reqGen_intermediateBuffer$FULL_N;

  // ports of submodule m_pcie_wr_reqGen_intermediateBuffer2
  wire [200 : 0] m_pcie_wr_reqGen_intermediateBuffer2$D_IN,
		 m_pcie_wr_reqGen_intermediateBuffer2$D_OUT;
  wire m_pcie_wr_reqGen_intermediateBuffer2$CLR,
       m_pcie_wr_reqGen_intermediateBuffer2$DEQ,
       m_pcie_wr_reqGen_intermediateBuffer2$EMPTY_N,
       m_pcie_wr_reqGen_intermediateBuffer2$ENQ,
       m_pcie_wr_reqGen_intermediateBuffer2$FULL_N;

  // ports of submodule m_pcie_wr_reqGen_outgoingBuffer
  wire [209 : 0] m_pcie_wr_reqGen_outgoingBuffer$D_IN,
		 m_pcie_wr_reqGen_outgoingBuffer$D_OUT;
  wire m_pcie_wr_reqGen_outgoingBuffer$CLR,
       m_pcie_wr_reqGen_outgoingBuffer$DEQ,
       m_pcie_wr_reqGen_outgoingBuffer$EMPTY_N,
       m_pcie_wr_reqGen_outgoingBuffer$ENQ,
       m_pcie_wr_reqGen_outgoingBuffer$FULL_N;

  // ports of submodule mclk_m_fpga_put_req_rd_ff
  wire [131 : 0] mclk_m_fpga_put_req_rd_ff$dD_OUT,
		 mclk_m_fpga_put_req_rd_ff$sD_IN;
  wire mclk_m_fpga_put_req_rd_ff$dDEQ,
       mclk_m_fpga_put_req_rd_ff$dEMPTY_N,
       mclk_m_fpga_put_req_rd_ff$sENQ,
       mclk_m_fpga_put_req_rd_ff$sFULL_N;

  // ports of submodule mclk_m_fpga_put_req_wr_ff
  wire [131 : 0] mclk_m_fpga_put_req_wr_ff$dD_OUT,
		 mclk_m_fpga_put_req_wr_ff$sD_IN;
  wire mclk_m_fpga_put_req_wr_ff$dDEQ,
       mclk_m_fpga_put_req_wr_ff$dEMPTY_N,
       mclk_m_fpga_put_req_wr_ff$sENQ,
       mclk_m_fpga_put_req_wr_ff$sFULL_N;

  // ports of submodule mclk_m_pcie_put_req_rd_ff
  wire [131 : 0] mclk_m_pcie_put_req_rd_ff$dD_OUT,
		 mclk_m_pcie_put_req_rd_ff$sD_IN;
  wire mclk_m_pcie_put_req_rd_ff$dDEQ,
       mclk_m_pcie_put_req_rd_ff$dEMPTY_N,
       mclk_m_pcie_put_req_rd_ff$sENQ,
       mclk_m_pcie_put_req_rd_ff$sFULL_N;

  // ports of submodule mclk_m_pcie_put_req_wr_ff
  wire [131 : 0] mclk_m_pcie_put_req_wr_ff$dD_OUT,
		 mclk_m_pcie_put_req_wr_ff$sD_IN;
  wire mclk_m_pcie_put_req_wr_ff$dDEQ,
       mclk_m_pcie_put_req_wr_ff$dEMPTY_N,
       mclk_m_pcie_put_req_wr_ff$sENQ,
       mclk_m_pcie_put_req_wr_ff$sFULL_N;

  // ports of submodule pcieDone
  wire pcieDone$dDEQ,
       pcieDone$dEMPTY_N,
       pcieDone$sD_IN,
       pcieDone$sENQ,
       pcieDone$sFULL_N;

  // ports of submodule readConvBTT_ff
  wire [64 : 0] readConvBTT_ff$dD_OUT, readConvBTT_ff$sD_IN;
  wire readConvBTT_ff$dDEQ,
       readConvBTT_ff$dEMPTY_N,
       readConvBTT_ff$sENQ,
       readConvBTT_ff$sFULL_N;

  // ports of submodule s_config_readSlave_in
  wire [66 : 0] s_config_readSlave_in$D_IN, s_config_readSlave_in$D_OUT;
  wire s_config_readSlave_in$CLR,
       s_config_readSlave_in$DEQ,
       s_config_readSlave_in$EMPTY_N,
       s_config_readSlave_in$ENQ,
       s_config_readSlave_in$FULL_N;

  // ports of submodule s_config_readSlave_out
  reg [65 : 0] s_config_readSlave_out$D_IN;
  wire [65 : 0] s_config_readSlave_out$D_OUT;
  wire s_config_readSlave_out$CLR,
       s_config_readSlave_out$DEQ,
       s_config_readSlave_out$EMPTY_N,
       s_config_readSlave_out$ENQ,
       s_config_readSlave_out$FULL_N;

  // ports of submodule s_config_writeSlave_in
  wire [138 : 0] s_config_writeSlave_in$D_IN, s_config_writeSlave_in$D_OUT;
  wire s_config_writeSlave_in$CLR,
       s_config_writeSlave_in$DEQ,
       s_config_writeSlave_in$EMPTY_N,
       s_config_writeSlave_in$ENQ,
       s_config_writeSlave_in$FULL_N;

  // ports of submodule s_config_writeSlave_out
  wire [1 : 0] s_config_writeSlave_out$D_IN, s_config_writeSlave_out$D_OUT;
  wire s_config_writeSlave_out$CLR,
       s_config_writeSlave_out$DEQ,
       s_config_writeSlave_out$EMPTY_N,
       s_config_writeSlave_out$ENQ,
       s_config_writeSlave_out$FULL_N;

  // ports of submodule writeConvBTT_ff
  wire [64 : 0] writeConvBTT_ff$dD_OUT, writeConvBTT_ff$sD_IN;
  wire writeConvBTT_ff$dDEQ,
       writeConvBTT_ff$dEMPTY_N,
       writeConvBTT_ff$sENQ,
       writeConvBTT_ff$sFULL_N;

  // ports of submodule writeConverter_dataSync
  wire [511 : 0] writeConverter_dataSync$D_IN, writeConverter_dataSync$D_OUT;
  wire writeConverter_dataSync$CLR,
       writeConverter_dataSync$DEQ,
       writeConverter_dataSync$EMPTY_N,
       writeConverter_dataSync$ENQ,
       writeConverter_dataSync$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_byteAlignerReader_forwardOutputLast,
       CAN_FIRE_RL_byteAlignerWriter_forwardOutputLast,
       CAN_FIRE_RL_handleRead,
       WILL_FIRE_RL_byteAlignerReader_fetchNewData,
       WILL_FIRE_RL_byteAlignerReader_forwardOutput,
       WILL_FIRE_RL_byteAlignerReader_forwardOutputLast,
       WILL_FIRE_RL_byteAlignerWriter_fetchNewData,
       WILL_FIRE_RL_byteAlignerWriter_forwardOutput,
       WILL_FIRE_RL_byteAlignerWriter_forwardOutputLast,
       WILL_FIRE_RL_handleRead,
       WILL_FIRE_RL_handleWrite,
       WILL_FIRE_RL_m_fpga_rd_fillBuffer,
       WILL_FIRE_RL_m_fpga_rd_forwardData,
       WILL_FIRE_RL_m_fpga_rd_placeRequest,
       WILL_FIRE_RL_m_fpga_rd_reqGen_finishRequest,
       WILL_FIRE_RL_m_fpga_wr_fillBuffer,
       WILL_FIRE_RL_m_fpga_wr_forwardData,
       WILL_FIRE_RL_m_fpga_wr_placeRequest,
       WILL_FIRE_RL_m_fpga_wr_reqGen_finishRequest,
       WILL_FIRE_RL_m_pcie_rd_fillBuffer,
       WILL_FIRE_RL_m_pcie_rd_forwardData,
       WILL_FIRE_RL_m_pcie_rd_placeRequest,
       WILL_FIRE_RL_m_pcie_rd_reqGen_finishRequest,
       WILL_FIRE_RL_m_pcie_wr_fillBuffer,
       WILL_FIRE_RL_m_pcie_wr_forwardData,
       WILL_FIRE_RL_m_pcie_wr_placeRequest,
       WILL_FIRE_RL_m_pcie_wr_reqGen_finishRequest,
       WILL_FIRE_RL_mkConnectionGetPut_1,
       WILL_FIRE_RL_mkConnectionGetPut_2,
       WILL_FIRE_RL_mkConnectionGetPut_3,
       WILL_FIRE_RL_s_config_1_axiWriteFallback,
       WILL_FIRE_RL_s_config_1_axiWriteSpecial,
       WILL_FIRE_RL_s_config_1_axiWriteSpecialIsHandled,
       WILL_FIRE_RL_s_config_1_axiWriteSpecial_1,
       WILL_FIRE_RL_s_config_1_axiWriteSpecial_2,
       WILL_FIRE_RL_s_config_1_axiWriteSpecial_3,
       WILL_FIRE_RL_s_config_1_axiWriteSpecial_4,
       WILL_FIRE_RL_s_config_1_axiWriteSpecial_5,
       WILL_FIRE_RL_s_config_1_axiWriteSpecial_6,
       WILL_FIRE_RL_s_config_axiReadFallback,
       WILL_FIRE_RL_s_config_axiReadSpecial,
       WILL_FIRE_RL_s_config_axiReadSpecialIsHandled,
       WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_1,
       WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_2,
       WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_3,
       WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_4,
       WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_5,
       WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_6,
       WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_7,
       WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_8,
       WILL_FIRE_RL_s_config_axiReadSpecial_1,
       WILL_FIRE_RL_s_config_axiReadSpecial_2,
       WILL_FIRE_RL_s_config_axiReadSpecial_3,
       WILL_FIRE_RL_s_config_axiReadSpecial_4,
       WILL_FIRE_RL_s_config_axiReadSpecial_5,
       WILL_FIRE_RL_s_config_axiReadSpecial_6,
       WILL_FIRE_RL_s_config_axiReadSpecial_7,
       WILL_FIRE_RL_s_config_axiReadSpecial_8,
       WILL_FIRE_RL_setInterrupt;

  // inputs to muxes for submodule ports
  wire [511 : 0] MUX_byteAlignerReader_buffer$port0__write_1__VAL_1,
		 MUX_byteAlignerWriter_buffer$port0__write_1__VAL_1;
  wire [134 : 0] MUX_m_pcie_rd_task_data_requests_reg$write_1__VAL_1,
		 MUX_m_pcie_wr_task_data_requests_reg$write_1__VAL_1;
  wire [133 : 0] MUX_m_fpga_rd_task_data_requests_reg$write_1__VAL_1,
		 MUX_m_fpga_wr_task_data_requests_reg$write_1__VAL_1;
  wire [76 : 0] MUX_m_fpga_rd_task_data_output_reg$write_1__VAL_1,
		MUX_m_fpga_wr_task_data_output_reg$write_1__VAL_1;
  wire [74 : 0] MUX_m_pcie_rd_task_data_output_reg$write_1__VAL_1,
		MUX_m_pcie_wr_task_data_output_reg$write_1__VAL_1;
  wire [65 : 0] MUX_s_config_readSlave_out$enq_1__VAL_1,
		MUX_s_config_readSlave_out$enq_1__VAL_2,
		MUX_s_config_readSlave_out$enq_1__VAL_3,
		MUX_s_config_readSlave_out$enq_1__VAL_4,
		MUX_s_config_readSlave_out$enq_1__VAL_5,
		MUX_s_config_readSlave_out$enq_1__VAL_6,
		MUX_s_config_readSlave_out$enq_1__VAL_7,
		MUX_s_config_readSlave_out$enq_1__VAL_8,
		MUX_s_config_readSlave_out$enq_1__VAL_9;
  wire [63 : 0] MUX_byteAlignerReader_bytes_in$write_1__VAL_1,
		MUX_byteAlignerReader_bytes_out$write_1__VAL_1,
		MUX_byteAlignerReader_bytes_out$write_1__VAL_2,
		MUX_byteAlignerWriter_bytes_in$write_1__VAL_1,
		MUX_byteAlignerWriter_bytes_out$write_1__VAL_1,
		MUX_byteAlignerWriter_bytes_out$write_1__VAL_2,
		MUX_cycles_between$write_1__VAL_1,
		MUX_cycles_between$write_1__VAL_2,
		MUX_cycles_last_request$write_1__VAL_1,
		MUX_cycles_last_request$write_1__VAL_2,
		MUX_readConverter_byteCntr$write_1__VAL_2,
		MUX_writeConverter_byteCntr$write_1__VAL_2;
  wire [7 : 0] MUX_m_fpga_wr_beatsThisRequestCntr$write_1__VAL_1,
	       MUX_m_pcie_wr_beatsThisRequestCntr$write_1__VAL_1;
  wire [5 : 0] MUX_byteAlignerReader_bytes_left_in_buffer$port0__write_1__VAL_1,
	       MUX_byteAlignerReader_bytes_out_needed$write_1__VAL_1,
	       MUX_byteAlignerWriter_bytes_left_in_buffer$port0__write_1__VAL_1,
	       MUX_byteAlignerWriter_bytes_out_needed$write_1__VAL_1;
  wire [1 : 0] MUX_writeConverter_wordInCntr$write_1__VAL_1,
	       MUX_writeConverter_wordInCntr$write_1__VAL_2;
  wire MUX_cycles_between$write_1__SEL_1, MUX_opInProgress$write_1__SEL_2;

  // remaining internal signals
  reg [3 : 0] CASE_m_fpga_rd_master_rd_warcachewget_1_m_fpg_ETC__q5,
	      CASE_m_fpga_wr_master_wr_wawcachewget_1_m_fpg_ETC__q4,
	      CASE_m_pcie_rd_master_rd_warcachewget_1_m_pci_ETC__q3,
	      CASE_m_pcie_wr_master_wr_wawcachewget_1_m_pci_ETC__q2;
  wire [63 : 0] _theResult____h26331,
		_theResult____h26515,
		_theResult____h36270,
		_theResult____h36454,
		_theResult____h40144,
		_theResult____h40328,
		_theResult____h55476,
		_theResult____h55660,
		btt__h102029,
		btt__h145135,
		bytes_first___1__h26366,
		bytes_first___1__h36305,
		bytes_first___1__h40179,
		bytes_first___1__h55511,
		bytes_first__h26330,
		bytes_first__h36269,
		bytes_first__h40143,
		bytes_first__h55475,
		m_fpga_rd_reqGen_incomingBufferD_OUT_BITS_67__ETC__q6,
		m_fpga_wr_reqGen_incomingBufferD_OUT_BITS_67__ETC__q7,
		m_pcie_rd_reqGen_incomingBufferD_OUT_BITS_67__ETC__q8,
		m_pcie_wr_reqGen_incomingBufferD_OUT_BITS_67__ETC__q9,
		request_data_address__h26655,
		request_data_address__h36594,
		request_data_address__h40468,
		request_data_address__h55800,
		transfers_total___1__h26523,
		transfers_total___1__h36462,
		transfers_total___1__h40336,
		transfers_total___1__h55668,
		transfers_total__h26514,
		transfers_total__h26520,
		transfers_total__h36453,
		transfers_total__h36459,
		transfers_total__h40327,
		transfers_total__h40333,
		transfers_total__h55659,
		transfers_total__h55665,
		x__h26336,
		x__h26517,
		x__h26543,
		x__h36275,
		x__h36456,
		x__h36482,
		x__h40149,
		x__h40330,
		x__h40356,
		x__h55481,
		x__h55662,
		x__h55688,
		x_address__h29562,
		x_address__h38704,
		x_address__h43360,
		x_address__h57907,
		x_strb__h43876,
		y__h102066,
		y__h145163,
		y__h26410,
		y__h26544,
		y__h26546,
		y__h36349,
		y__h36483,
		y__h36485,
		y__h40223,
		y__h40357,
		y__h40359,
		y__h55555,
		y__h55689,
		y__h55691;
  wire [58 : 0] request_data_requests_total__h26654,
		request_data_requests_total__h36593,
		requests_total___1__h26680,
		requests_total___1__h36619,
		requests_total__h26618,
		requests_total__h36557,
		x_requests_total__h29561,
		x_requests_total__h38703,
		x_transfers_total__h35588,
		x_transfers_total__h39153;
  wire [57 : 0] request_data_requests_total__h40467,
		request_data_requests_total__h55799,
		requests_total___1__h40493,
		requests_total___1__h55825,
		requests_total__h40431,
		requests_total__h55763,
		x_requests_total__h43359,
		x_requests_total__h57906,
		x_transfers_total__h54794,
		x_transfers_total__h58356;
  wire [31 : 0] x_strb__h30078;
  wire [7 : 0] _theResult____h29456,
	       _theResult____h43254,
	       beatsThisRequestCntrT__h29964,
	       beatsThisRequestCntrT__h43762,
	       beatsThisRequest___1__h29504,
	       beatsThisRequest___1__h38675,
	       beatsThisRequest___1__h43302,
	       beatsThisRequest___1__h57878,
	       requests_last__h26617,
	       requests_last__h36556;
  wire [6 : 0] IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944,
	       endByte___1__h46785,
	       endByte___1__h46811,
	       startByte___1__h46784,
	       x__h46771;
  wire [5 : 0] IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463,
	       b__h115415,
	       b__h72232,
	       endByte___1__h31579,
	       endByte___1__h31605,
	       startByte___1__h31578,
	       x__h31565;
  wire [1 : 0] IF_0_CONCAT_readConverter_wordInCntr_EQ_1_OR_r_ETC__q1;
  wire byteAlignerReader_bytes_in_430_ULT_byteAligner_ETC___d1432,
       byteAlignerReader_bytes_left_in_buffer_port0___ETC___d1447,
       byteAlignerWriter_bytes_in_552_ULT_byteAligner_ETC___d1554,
       byteAlignerWriter_bytes_left_in_buffer_port0___ETC___d1569,
       fpgaLastCycle_662_AND_m_fpga_rd_task_data_outp_ETC___d1664,
       m_fpga_wr_beatsThisRequestCntr_21_EQ_m_fpga_wr_ETC___d923,
       m_pcie_wr_beatsThisRequestCntr_40_EQ_m_pcie_wr_ETC___d442,
       pc_reqCntr_491_EQ_cycles_between_set_6_BITS_11_ETC___d1673,
       pcieLastCycle_655_AND_m_pcie_rd_task_data_outp_ETC___d1657;

  // value method s_rd_arready
  assign S_AXI_arready = s_config_readSlave_in$FULL_N ;

  // value method s_rd_rvalid
  assign S_AXI_rvalid = s_config_readSlave_out$EMPTY_N ;

  // value method s_rd_rdata
  assign S_AXI_rdata =
	     s_config_readSlave_out$EMPTY_N ?
	       s_config_readSlave_out$D_OUT[65:2] :
	       64'd0 ;

  // value method s_rd_rresp
  assign S_AXI_rresp =
	     s_config_readSlave_out$EMPTY_N ?
	       s_config_readSlave_out$D_OUT[1:0] :
	       2'd0 ;

  // value method s_wr_awready
  assign S_AXI_awready = !s_config_writeSlave_addrIn_rv[67] ;

  // value method s_wr_wready
  assign S_AXI_wready = !s_config_writeSlave_dataIn_rv[72] ;

  // value method s_wr_bvalid
  assign S_AXI_bvalid = s_config_writeSlave_out$EMPTY_N ;

  // value method s_wr_bresp
  assign S_AXI_bresp =
	     s_config_writeSlave_out$EMPTY_N ?
	       s_config_writeSlave_out$D_OUT :
	       2'd0 ;

  // value method pcie_rd_arvalid
  assign pcie_rd_arvalid = m_pcie_rd_master_rd_in$EMPTY_N ;

  // value method pcie_rd_araddr
  assign pcie_rd_araddr =
	     m_pcie_rd_master_rd_in$EMPTY_N ?
	       m_pcie_rd_master_rd_in$D_OUT[93:30] :
	       64'd0 ;

  // value method pcie_rd_arlen
  assign pcie_rd_arlen =
	     m_pcie_rd_master_rd_in$EMPTY_N ?
	       m_pcie_rd_master_rd_in$D_OUT[29:22] :
	       8'd0 ;

  // value method pcie_rd_arsize
  assign pcie_rd_arsize =
	     m_pcie_rd_master_rd_in$EMPTY_N ?
	       m_pcie_rd_master_rd_in$D_OUT[21:19] :
	       3'd0 ;

  // value method pcie_rd_arburst
  assign pcie_rd_arburst =
	     m_pcie_rd_master_rd_in$EMPTY_N ?
	       m_pcie_rd_master_rd_in$D_OUT[18:17] :
	       2'd0 ;

  // value method pcie_rd_arlock
  assign pcie_rd_arlock =
	     m_pcie_rd_master_rd_in$EMPTY_N &&
	     m_pcie_rd_master_rd_in$D_OUT[16] ;

  // value method pcie_rd_arcache
  assign pcie_rd_arcache =
	     (!m_pcie_rd_master_rd_in$EMPTY_N ||
	      m_pcie_rd_master_rd_warcache$wget == 4'd0) ?
	       4'd0 :
	       CASE_m_pcie_rd_master_rd_warcachewget_1_m_pci_ETC__q3 ;

  // value method pcie_rd_arprot
  assign pcie_rd_arprot =
	     m_pcie_rd_master_rd_in$EMPTY_N ?
	       m_pcie_rd_master_rd_in$D_OUT[11:9] :
	       3'd0 ;

  // value method pcie_rd_arqos
  assign pcie_rd_arqos =
	     m_pcie_rd_master_rd_in$EMPTY_N ?
	       m_pcie_rd_master_rd_in$D_OUT[8:5] :
	       4'd0 ;

  // value method pcie_rd_arregion
  assign pcie_rd_arregion =
	     m_pcie_rd_master_rd_in$EMPTY_N ?
	       m_pcie_rd_master_rd_in$D_OUT[4:1] :
	       4'd0 ;

  // value method pcie_rd_aruser
  assign pcie_rd_aruser =
	     m_pcie_rd_master_rd_in$EMPTY_N &&
	     m_pcie_rd_master_rd_in$D_OUT[0] ;

  // value method pcie_rd_rready
  assign pcie_rd_rready = m_pcie_rd_master_rd_out$FULL_N ;

  // value method pcie_wr_awvalid
  assign pcie_wr_awvalid = m_pcie_wr_master_wr_in_addr$EMPTY_N ;

  // value method pcie_wr_awaddr
  assign pcie_wr_awaddr =
	     m_pcie_wr_master_wr_in_addr$EMPTY_N ?
	       m_pcie_wr_master_wr_in_addr$D_OUT[93:30] :
	       64'd0 ;

  // value method pcie_wr_awlen
  assign pcie_wr_awlen =
	     m_pcie_wr_master_wr_in_addr$EMPTY_N ?
	       m_pcie_wr_master_wr_in_addr$D_OUT[29:22] :
	       8'd0 ;

  // value method pcie_wr_awsize
  assign pcie_wr_awsize =
	     m_pcie_wr_master_wr_in_addr$EMPTY_N ?
	       m_pcie_wr_master_wr_in_addr$D_OUT[21:19] :
	       3'd0 ;

  // value method pcie_wr_awburst
  assign pcie_wr_awburst =
	     m_pcie_wr_master_wr_in_addr$EMPTY_N ?
	       m_pcie_wr_master_wr_in_addr$D_OUT[18:17] :
	       2'd0 ;

  // value method pcie_wr_awlock
  assign pcie_wr_awlock =
	     m_pcie_wr_master_wr_in_addr$EMPTY_N &&
	     m_pcie_wr_master_wr_in_addr$D_OUT[16] ;

  // value method pcie_wr_awcache
  assign pcie_wr_awcache =
	     (!m_pcie_wr_master_wr_in_addr$EMPTY_N ||
	      m_pcie_wr_master_wr_wawcache$wget == 4'd0) ?
	       4'd0 :
	       CASE_m_pcie_wr_master_wr_wawcachewget_1_m_pci_ETC__q2 ;

  // value method pcie_wr_awprot
  assign pcie_wr_awprot =
	     m_pcie_wr_master_wr_in_addr$EMPTY_N ?
	       m_pcie_wr_master_wr_in_addr$D_OUT[11:9] :
	       3'd0 ;

  // value method pcie_wr_awqos
  assign pcie_wr_awqos =
	     m_pcie_wr_master_wr_in_addr$EMPTY_N ?
	       m_pcie_wr_master_wr_in_addr$D_OUT[8:5] :
	       4'd0 ;

  // value method pcie_wr_awregion
  assign pcie_wr_awregion =
	     m_pcie_wr_master_wr_in_addr$EMPTY_N ?
	       m_pcie_wr_master_wr_in_addr$D_OUT[4:1] :
	       4'd0 ;

  // value method pcie_wr_awuser
  assign pcie_wr_awuser =
	     m_pcie_wr_master_wr_in_addr$EMPTY_N &&
	     m_pcie_wr_master_wr_in_addr$D_OUT[0] ;

  // value method pcie_wr_wvalid
  assign pcie_wr_wvalid = m_pcie_wr_master_wr_in_data$EMPTY_N ;

  // value method pcie_wr_wdata
  assign pcie_wr_wdata =
	     m_pcie_wr_master_wr_in_data$EMPTY_N ?
	       m_pcie_wr_master_wr_in_data$D_OUT[289:34] :
	       256'd0 ;

  // value method pcie_wr_wstrb
  assign pcie_wr_wstrb =
	     m_pcie_wr_master_wr_in_data$EMPTY_N ?
	       m_pcie_wr_master_wr_in_data$D_OUT[33:2] :
	       32'd0 ;

  // value method pcie_wr_wlast
  assign pcie_wr_wlast =
	     m_pcie_wr_master_wr_in_data$EMPTY_N &&
	     m_pcie_wr_master_wr_in_data$D_OUT[1] ;

  // value method pcie_wr_wuser
  assign pcie_wr_wuser =
	     m_pcie_wr_master_wr_in_data$EMPTY_N &&
	     m_pcie_wr_master_wr_in_data$D_OUT[0] ;

  // value method pcie_wr_bready
  assign pcie_wr_bready = m_pcie_wr_master_wr_out$FULL_N ;

  // value method fpga_rd_arvalid
  assign fpga_rd_arvalid = m_fpga_rd_master_rd_in$EMPTY_N ;

  // value method fpga_rd_araddr
  assign fpga_rd_araddr =
	     m_fpga_rd_master_rd_in$EMPTY_N ?
	       m_fpga_rd_master_rd_in$D_OUT[93:30] :
	       64'd0 ;

  // value method fpga_rd_arlen
  assign fpga_rd_arlen =
	     m_fpga_rd_master_rd_in$EMPTY_N ?
	       m_fpga_rd_master_rd_in$D_OUT[29:22] :
	       8'd0 ;

  // value method fpga_rd_arsize
  assign fpga_rd_arsize =
	     m_fpga_rd_master_rd_in$EMPTY_N ?
	       m_fpga_rd_master_rd_in$D_OUT[21:19] :
	       3'd0 ;

  // value method fpga_rd_arburst
  assign fpga_rd_arburst =
	     m_fpga_rd_master_rd_in$EMPTY_N ?
	       m_fpga_rd_master_rd_in$D_OUT[18:17] :
	       2'd0 ;

  // value method fpga_rd_arlock
  assign fpga_rd_arlock =
	     m_fpga_rd_master_rd_in$EMPTY_N &&
	     m_fpga_rd_master_rd_in$D_OUT[16] ;

  // value method fpga_rd_arcache
  assign fpga_rd_arcache =
	     (!m_fpga_rd_master_rd_in$EMPTY_N ||
	      m_fpga_rd_master_rd_warcache$wget == 4'd0) ?
	       4'd0 :
	       CASE_m_fpga_rd_master_rd_warcachewget_1_m_fpg_ETC__q5 ;

  // value method fpga_rd_arprot
  assign fpga_rd_arprot =
	     m_fpga_rd_master_rd_in$EMPTY_N ?
	       m_fpga_rd_master_rd_in$D_OUT[11:9] :
	       3'd0 ;

  // value method fpga_rd_arqos
  assign fpga_rd_arqos =
	     m_fpga_rd_master_rd_in$EMPTY_N ?
	       m_fpga_rd_master_rd_in$D_OUT[8:5] :
	       4'd0 ;

  // value method fpga_rd_arregion
  assign fpga_rd_arregion =
	     m_fpga_rd_master_rd_in$EMPTY_N ?
	       m_fpga_rd_master_rd_in$D_OUT[4:1] :
	       4'd0 ;

  // value method fpga_rd_aruser
  assign fpga_rd_aruser =
	     m_fpga_rd_master_rd_in$EMPTY_N &&
	     m_fpga_rd_master_rd_in$D_OUT[0] ;

  // value method fpga_rd_rready
  assign fpga_rd_rready = m_fpga_rd_master_rd_out$FULL_N ;

  // value method fpga_wr_awvalid
  assign fpga_wr_awvalid = m_fpga_wr_master_wr_in_addr$EMPTY_N ;

  // value method fpga_wr_awaddr
  assign fpga_wr_awaddr =
	     m_fpga_wr_master_wr_in_addr$EMPTY_N ?
	       m_fpga_wr_master_wr_in_addr$D_OUT[93:30] :
	       64'd0 ;

  // value method fpga_wr_awlen
  assign fpga_wr_awlen =
	     m_fpga_wr_master_wr_in_addr$EMPTY_N ?
	       m_fpga_wr_master_wr_in_addr$D_OUT[29:22] :
	       8'd0 ;

  // value method fpga_wr_awsize
  assign fpga_wr_awsize =
	     m_fpga_wr_master_wr_in_addr$EMPTY_N ?
	       m_fpga_wr_master_wr_in_addr$D_OUT[21:19] :
	       3'd0 ;

  // value method fpga_wr_awburst
  assign fpga_wr_awburst =
	     m_fpga_wr_master_wr_in_addr$EMPTY_N ?
	       m_fpga_wr_master_wr_in_addr$D_OUT[18:17] :
	       2'd0 ;

  // value method fpga_wr_awlock
  assign fpga_wr_awlock =
	     m_fpga_wr_master_wr_in_addr$EMPTY_N &&
	     m_fpga_wr_master_wr_in_addr$D_OUT[16] ;

  // value method fpga_wr_awcache
  assign fpga_wr_awcache =
	     (!m_fpga_wr_master_wr_in_addr$EMPTY_N ||
	      m_fpga_wr_master_wr_wawcache$wget == 4'd0) ?
	       4'd0 :
	       CASE_m_fpga_wr_master_wr_wawcachewget_1_m_fpg_ETC__q4 ;

  // value method fpga_wr_awprot
  assign fpga_wr_awprot =
	     m_fpga_wr_master_wr_in_addr$EMPTY_N ?
	       m_fpga_wr_master_wr_in_addr$D_OUT[11:9] :
	       3'd0 ;

  // value method fpga_wr_awqos
  assign fpga_wr_awqos =
	     m_fpga_wr_master_wr_in_addr$EMPTY_N ?
	       m_fpga_wr_master_wr_in_addr$D_OUT[8:5] :
	       4'd0 ;

  // value method fpga_wr_awregion
  assign fpga_wr_awregion =
	     m_fpga_wr_master_wr_in_addr$EMPTY_N ?
	       m_fpga_wr_master_wr_in_addr$D_OUT[4:1] :
	       4'd0 ;

  // value method fpga_wr_awuser
  assign fpga_wr_awuser =
	     m_fpga_wr_master_wr_in_addr$EMPTY_N &&
	     m_fpga_wr_master_wr_in_addr$D_OUT[0] ;

  // value method fpga_wr_wvalid
  assign fpga_wr_wvalid = m_fpga_wr_master_wr_in_data$EMPTY_N ;

  // value method fpga_wr_wdata
  assign fpga_wr_wdata =
	     m_fpga_wr_master_wr_in_data$EMPTY_N ?
	       m_fpga_wr_master_wr_in_data$D_OUT[577:66] :
	       512'd0 ;

  // value method fpga_wr_wstrb
  assign fpga_wr_wstrb =
	     m_fpga_wr_master_wr_in_data$EMPTY_N ?
	       m_fpga_wr_master_wr_in_data$D_OUT[65:2] :
	       64'd0 ;

  // value method fpga_wr_wlast
  assign fpga_wr_wlast =
	     m_fpga_wr_master_wr_in_data$EMPTY_N &&
	     m_fpga_wr_master_wr_in_data$D_OUT[1] ;

  // value method fpga_wr_wuser
  assign fpga_wr_wuser =
	     m_fpga_wr_master_wr_in_data$EMPTY_N &&
	     m_fpga_wr_master_wr_in_data$D_OUT[0] ;

  // value method fpga_wr_bready
  assign fpga_wr_bready = m_fpga_wr_master_wr_out$FULL_N ;

  // value method interrupt
  assign interrupt = doneInterruptReg ;

  // submodule byteAlignerReader_addr_ff
  SyncFIFO1 #(.dataWidth(32'd192)) byteAlignerReader_addr_ff(.sCLK(CLK),
							     .dCLK(CLK_m64_axi_aclk),
							     .sRST(RST_N),
							     .sD_IN(byteAlignerReader_addr_ff$sD_IN),
							     .sENQ(byteAlignerReader_addr_ff$sENQ),
							     .dDEQ(byteAlignerReader_addr_ff$dDEQ),
							     .sFULL_N(),
							     .dEMPTY_N(byteAlignerReader_addr_ff$dEMPTY_N),
							     .dD_OUT(byteAlignerReader_addr_ff$dD_OUT));

  // submodule byteAlignerReader_incoming
  FIFO2 #(.width(32'd256),
	  .guarded(32'd1)) byteAlignerReader_incoming(.RST(RST_N_m64_axi_arestn),
						      .CLK(CLK_m64_axi_aclk),
						      .D_IN(byteAlignerReader_incoming$D_IN),
						      .ENQ(byteAlignerReader_incoming$ENQ),
						      .DEQ(byteAlignerReader_incoming$DEQ),
						      .CLR(byteAlignerReader_incoming$CLR),
						      .D_OUT(byteAlignerReader_incoming$D_OUT),
						      .FULL_N(),
						      .EMPTY_N(byteAlignerReader_incoming$EMPTY_N));

  // submodule byteAlignerReader_outgoing
  FIFO2 #(.width(32'd256),
	  .guarded(32'd1)) byteAlignerReader_outgoing(.RST(RST_N_m64_axi_arestn),
						      .CLK(CLK_m64_axi_aclk),
						      .D_IN(byteAlignerReader_outgoing$D_IN),
						      .ENQ(byteAlignerReader_outgoing$ENQ),
						      .DEQ(byteAlignerReader_outgoing$DEQ),
						      .CLR(byteAlignerReader_outgoing$CLR),
						      .D_OUT(),
						      .FULL_N(byteAlignerReader_outgoing$FULL_N),
						      .EMPTY_N());

  // submodule byteAlignerWriter_addr_ff
  SyncFIFO1 #(.dataWidth(32'd192)) byteAlignerWriter_addr_ff(.sCLK(CLK),
							     .dCLK(CLK_m64_axi_aclk),
							     .sRST(RST_N),
							     .sD_IN(byteAlignerWriter_addr_ff$sD_IN),
							     .sENQ(byteAlignerWriter_addr_ff$sENQ),
							     .dDEQ(byteAlignerWriter_addr_ff$dDEQ),
							     .sFULL_N(),
							     .dEMPTY_N(byteAlignerWriter_addr_ff$dEMPTY_N),
							     .dD_OUT(byteAlignerWriter_addr_ff$dD_OUT));

  // submodule byteAlignerWriter_incoming
  FIFO2 #(.width(32'd256),
	  .guarded(32'd1)) byteAlignerWriter_incoming(.RST(RST_N_m64_axi_arestn),
						      .CLK(CLK_m64_axi_aclk),
						      .D_IN(byteAlignerWriter_incoming$D_IN),
						      .ENQ(byteAlignerWriter_incoming$ENQ),
						      .DEQ(byteAlignerWriter_incoming$DEQ),
						      .CLR(byteAlignerWriter_incoming$CLR),
						      .D_OUT(byteAlignerWriter_incoming$D_OUT),
						      .FULL_N(),
						      .EMPTY_N(byteAlignerWriter_incoming$EMPTY_N));

  // submodule byteAlignerWriter_outgoing
  FIFO2 #(.width(32'd256),
	  .guarded(32'd1)) byteAlignerWriter_outgoing(.RST(RST_N_m64_axi_arestn),
						      .CLK(CLK_m64_axi_aclk),
						      .D_IN(byteAlignerWriter_outgoing$D_IN),
						      .ENQ(byteAlignerWriter_outgoing$ENQ),
						      .DEQ(byteAlignerWriter_outgoing$DEQ),
						      .CLR(byteAlignerWriter_outgoing$CLR),
						      .D_OUT(),
						      .FULL_N(byteAlignerWriter_outgoing$FULL_N),
						      .EMPTY_N());

  // submodule cmdsIn
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cmdsIn(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(cmdsIn$D_IN),
						 .ENQ(cmdsIn$ENQ),
						 .DEQ(cmdsIn$DEQ),
						 .CLR(cmdsIn$CLR),
						 .D_OUT(cmdsIn$D_OUT),
						 .FULL_N(cmdsIn$FULL_N),
						 .EMPTY_N(cmdsIn$EMPTY_N));

  // submodule fpgaDone
  SyncFIFO1 #(.dataWidth(32'd1)) fpgaDone(.sCLK(CLK_m32_axi_aclk),
					  .dCLK(CLK),
					  .sRST(RST_N_m32_axi_arestn),
					  .sD_IN(fpgaDone$sD_IN),
					  .sENQ(fpgaDone$sENQ),
					  .dDEQ(fpgaDone$dDEQ),
					  .sFULL_N(fpgaDone$sFULL_N),
					  .dEMPTY_N(fpgaDone$dEMPTY_N),
					  .dD_OUT());

  // submodule fpga_request_converter
  SyncFIFO #(.dataWidth(32'd512),
	     .depth(32'd512),
	     .indxWidth(32'd9)) fpga_request_converter(.sCLK(CLK_m64_axi_aclk),
						       .dCLK(CLK_m32_axi_aclk),
						       .sRST(RST_N_m64_axi_arestn),
						       .sD_IN(fpga_request_converter$sD_IN),
						       .sENQ(fpga_request_converter$sENQ),
						       .dDEQ(fpga_request_converter$dDEQ),
						       .sFULL_N(fpga_request_converter$sFULL_N),
						       .dEMPTY_N(fpga_request_converter$dEMPTY_N),
						       .dD_OUT(fpga_request_converter$dD_OUT));

  // submodule fpga_response_converter
  SyncFIFO #(.dataWidth(32'd512),
	     .depth(32'd512),
	     .indxWidth(32'd9)) fpga_response_converter(.sCLK(CLK_m32_axi_aclk),
							.dCLK(CLK_m64_axi_aclk),
							.sRST(RST_N_m32_axi_arestn),
							.sD_IN(fpga_response_converter$sD_IN),
							.sENQ(fpga_response_converter$sENQ),
							.dDEQ(fpga_response_converter$dDEQ),
							.sFULL_N(fpga_response_converter$sFULL_N),
							.dEMPTY_N(fpga_response_converter$dEMPTY_N),
							.dD_OUT(fpga_response_converter$dD_OUT));

  // submodule m_fpga_rd_master_rd_in
  SizedFIFO #(.p1width(32'd94),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) m_fpga_rd_master_rd_in(.RST(RST_N_m32_axi_arestn),
						      .CLK(CLK_m32_axi_aclk),
						      .D_IN(m_fpga_rd_master_rd_in$D_IN),
						      .ENQ(m_fpga_rd_master_rd_in$ENQ),
						      .DEQ(m_fpga_rd_master_rd_in$DEQ),
						      .CLR(m_fpga_rd_master_rd_in$CLR),
						      .D_OUT(m_fpga_rd_master_rd_in$D_OUT),
						      .FULL_N(m_fpga_rd_master_rd_in$FULL_N),
						      .EMPTY_N(m_fpga_rd_master_rd_in$EMPTY_N));

  // submodule m_fpga_rd_master_rd_out
  FIFO2 #(.width(32'd516),
	  .guarded(32'd1)) m_fpga_rd_master_rd_out(.RST(RST_N_m32_axi_arestn),
						   .CLK(CLK_m32_axi_aclk),
						   .D_IN(m_fpga_rd_master_rd_out$D_IN),
						   .ENQ(m_fpga_rd_master_rd_out$ENQ),
						   .DEQ(m_fpga_rd_master_rd_out$DEQ),
						   .CLR(m_fpga_rd_master_rd_out$CLR),
						   .D_OUT(m_fpga_rd_master_rd_out$D_OUT),
						   .FULL_N(m_fpga_rd_master_rd_out$FULL_N),
						   .EMPTY_N(m_fpga_rd_master_rd_out$EMPTY_N));

  // submodule m_fpga_rd_outgoingBuffer
  FIFO2 #(.width(32'd512),
	  .guarded(32'd1)) m_fpga_rd_outgoingBuffer(.RST(RST_N_m32_axi_arestn),
						    .CLK(CLK_m32_axi_aclk),
						    .D_IN(m_fpga_rd_outgoingBuffer$D_IN),
						    .ENQ(m_fpga_rd_outgoingBuffer$ENQ),
						    .DEQ(m_fpga_rd_outgoingBuffer$DEQ),
						    .CLR(m_fpga_rd_outgoingBuffer$CLR),
						    .D_OUT(m_fpga_rd_outgoingBuffer$D_OUT),
						    .FULL_N(m_fpga_rd_outgoingBuffer$FULL_N),
						    .EMPTY_N(m_fpga_rd_outgoingBuffer$EMPTY_N));

  // submodule m_fpga_rd_reqGen_incomingBuffer
  FIFO2 #(.width(32'd132),
	  .guarded(32'd1)) m_fpga_rd_reqGen_incomingBuffer(.RST(RST_N_m32_axi_arestn),
							   .CLK(CLK_m32_axi_aclk),
							   .D_IN(m_fpga_rd_reqGen_incomingBuffer$D_IN),
							   .ENQ(m_fpga_rd_reqGen_incomingBuffer$ENQ),
							   .DEQ(m_fpga_rd_reqGen_incomingBuffer$DEQ),
							   .CLR(m_fpga_rd_reqGen_incomingBuffer$CLR),
							   .D_OUT(m_fpga_rd_reqGen_incomingBuffer$D_OUT),
							   .FULL_N(m_fpga_rd_reqGen_incomingBuffer$FULL_N),
							   .EMPTY_N(m_fpga_rd_reqGen_incomingBuffer$EMPTY_N));

  // submodule m_fpga_rd_reqGen_intermediateBuffer
  FIFO2 #(.width(32'd144),
	  .guarded(32'd1)) m_fpga_rd_reqGen_intermediateBuffer(.RST(RST_N_m32_axi_arestn),
							       .CLK(CLK_m32_axi_aclk),
							       .D_IN(m_fpga_rd_reqGen_intermediateBuffer$D_IN),
							       .ENQ(m_fpga_rd_reqGen_intermediateBuffer$ENQ),
							       .DEQ(m_fpga_rd_reqGen_intermediateBuffer$DEQ),
							       .CLR(m_fpga_rd_reqGen_intermediateBuffer$CLR),
							       .D_OUT(m_fpga_rd_reqGen_intermediateBuffer$D_OUT),
							       .FULL_N(m_fpga_rd_reqGen_intermediateBuffer$FULL_N),
							       .EMPTY_N(m_fpga_rd_reqGen_intermediateBuffer$EMPTY_N));

  // submodule m_fpga_rd_reqGen_intermediateBuffer2
  FIFO2 #(.width(32'd202),
	  .guarded(32'd1)) m_fpga_rd_reqGen_intermediateBuffer2(.RST(RST_N_m32_axi_arestn),
								.CLK(CLK_m32_axi_aclk),
								.D_IN(m_fpga_rd_reqGen_intermediateBuffer2$D_IN),
								.ENQ(m_fpga_rd_reqGen_intermediateBuffer2$ENQ),
								.DEQ(m_fpga_rd_reqGen_intermediateBuffer2$DEQ),
								.CLR(m_fpga_rd_reqGen_intermediateBuffer2$CLR),
								.D_OUT(m_fpga_rd_reqGen_intermediateBuffer2$D_OUT),
								.FULL_N(m_fpga_rd_reqGen_intermediateBuffer2$FULL_N),
								.EMPTY_N(m_fpga_rd_reqGen_intermediateBuffer2$EMPTY_N));

  // submodule m_fpga_rd_reqGen_outgoingBuffer
  FIFO2 #(.width(32'd211),
	  .guarded(32'd1)) m_fpga_rd_reqGen_outgoingBuffer(.RST(RST_N_m32_axi_arestn),
							   .CLK(CLK_m32_axi_aclk),
							   .D_IN(m_fpga_rd_reqGen_outgoingBuffer$D_IN),
							   .ENQ(m_fpga_rd_reqGen_outgoingBuffer$ENQ),
							   .DEQ(m_fpga_rd_reqGen_outgoingBuffer$DEQ),
							   .CLR(m_fpga_rd_reqGen_outgoingBuffer$CLR),
							   .D_OUT(m_fpga_rd_reqGen_outgoingBuffer$D_OUT),
							   .FULL_N(m_fpga_rd_reqGen_outgoingBuffer$FULL_N),
							   .EMPTY_N(m_fpga_rd_reqGen_outgoingBuffer$EMPTY_N));

  // submodule m_fpga_wr_beatsPerRequestFIFO
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) m_fpga_wr_beatsPerRequestFIFO(.RST(RST_N_m32_axi_arestn),
							     .CLK(CLK_m32_axi_aclk),
							     .D_IN(m_fpga_wr_beatsPerRequestFIFO$D_IN),
							     .ENQ(m_fpga_wr_beatsPerRequestFIFO$ENQ),
							     .DEQ(m_fpga_wr_beatsPerRequestFIFO$DEQ),
							     .CLR(m_fpga_wr_beatsPerRequestFIFO$CLR),
							     .D_OUT(m_fpga_wr_beatsPerRequestFIFO$D_OUT),
							     .FULL_N(m_fpga_wr_beatsPerRequestFIFO$FULL_N),
							     .EMPTY_N(m_fpga_wr_beatsPerRequestFIFO$EMPTY_N));

  // submodule m_fpga_wr_incomingBuffer
  FIFO2 #(.width(32'd512),
	  .guarded(32'd1)) m_fpga_wr_incomingBuffer(.RST(RST_N_m32_axi_arestn),
						    .CLK(CLK_m32_axi_aclk),
						    .D_IN(m_fpga_wr_incomingBuffer$D_IN),
						    .ENQ(m_fpga_wr_incomingBuffer$ENQ),
						    .DEQ(m_fpga_wr_incomingBuffer$DEQ),
						    .CLR(m_fpga_wr_incomingBuffer$CLR),
						    .D_OUT(m_fpga_wr_incomingBuffer$D_OUT),
						    .FULL_N(m_fpga_wr_incomingBuffer$FULL_N),
						    .EMPTY_N(m_fpga_wr_incomingBuffer$EMPTY_N));

  // submodule m_fpga_wr_master_wr_in_addr
  SizedFIFO #(.p1width(32'd94),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) m_fpga_wr_master_wr_in_addr(.RST(RST_N_m32_axi_arestn),
							   .CLK(CLK_m32_axi_aclk),
							   .D_IN(m_fpga_wr_master_wr_in_addr$D_IN),
							   .ENQ(m_fpga_wr_master_wr_in_addr$ENQ),
							   .DEQ(m_fpga_wr_master_wr_in_addr$DEQ),
							   .CLR(m_fpga_wr_master_wr_in_addr$CLR),
							   .D_OUT(m_fpga_wr_master_wr_in_addr$D_OUT),
							   .FULL_N(m_fpga_wr_master_wr_in_addr$FULL_N),
							   .EMPTY_N(m_fpga_wr_master_wr_in_addr$EMPTY_N));

  // submodule m_fpga_wr_master_wr_in_data
  FIFO2 #(.width(32'd578),
	  .guarded(32'd1)) m_fpga_wr_master_wr_in_data(.RST(RST_N_m32_axi_arestn),
						       .CLK(CLK_m32_axi_aclk),
						       .D_IN(m_fpga_wr_master_wr_in_data$D_IN),
						       .ENQ(m_fpga_wr_master_wr_in_data$ENQ),
						       .DEQ(m_fpga_wr_master_wr_in_data$DEQ),
						       .CLR(m_fpga_wr_master_wr_in_data$CLR),
						       .D_OUT(m_fpga_wr_master_wr_in_data$D_OUT),
						       .FULL_N(m_fpga_wr_master_wr_in_data$FULL_N),
						       .EMPTY_N(m_fpga_wr_master_wr_in_data$EMPTY_N));

  // submodule m_fpga_wr_master_wr_out
  FIFO2 #(.width(32'd3),
	  .guarded(32'd1)) m_fpga_wr_master_wr_out(.RST(RST_N_m32_axi_arestn),
						   .CLK(CLK_m32_axi_aclk),
						   .D_IN(m_fpga_wr_master_wr_out$D_IN),
						   .ENQ(m_fpga_wr_master_wr_out$ENQ),
						   .DEQ(m_fpga_wr_master_wr_out$DEQ),
						   .CLR(m_fpga_wr_master_wr_out$CLR),
						   .D_OUT(),
						   .FULL_N(m_fpga_wr_master_wr_out$FULL_N),
						   .EMPTY_N(m_fpga_wr_master_wr_out$EMPTY_N));

  // submodule m_fpga_wr_reqGen_incomingBuffer
  FIFO2 #(.width(32'd132),
	  .guarded(32'd1)) m_fpga_wr_reqGen_incomingBuffer(.RST(RST_N_m32_axi_arestn),
							   .CLK(CLK_m32_axi_aclk),
							   .D_IN(m_fpga_wr_reqGen_incomingBuffer$D_IN),
							   .ENQ(m_fpga_wr_reqGen_incomingBuffer$ENQ),
							   .DEQ(m_fpga_wr_reqGen_incomingBuffer$DEQ),
							   .CLR(m_fpga_wr_reqGen_incomingBuffer$CLR),
							   .D_OUT(m_fpga_wr_reqGen_incomingBuffer$D_OUT),
							   .FULL_N(m_fpga_wr_reqGen_incomingBuffer$FULL_N),
							   .EMPTY_N(m_fpga_wr_reqGen_incomingBuffer$EMPTY_N));

  // submodule m_fpga_wr_reqGen_intermediateBuffer
  FIFO2 #(.width(32'd144),
	  .guarded(32'd1)) m_fpga_wr_reqGen_intermediateBuffer(.RST(RST_N_m32_axi_arestn),
							       .CLK(CLK_m32_axi_aclk),
							       .D_IN(m_fpga_wr_reqGen_intermediateBuffer$D_IN),
							       .ENQ(m_fpga_wr_reqGen_intermediateBuffer$ENQ),
							       .DEQ(m_fpga_wr_reqGen_intermediateBuffer$DEQ),
							       .CLR(m_fpga_wr_reqGen_intermediateBuffer$CLR),
							       .D_OUT(m_fpga_wr_reqGen_intermediateBuffer$D_OUT),
							       .FULL_N(m_fpga_wr_reqGen_intermediateBuffer$FULL_N),
							       .EMPTY_N(m_fpga_wr_reqGen_intermediateBuffer$EMPTY_N));

  // submodule m_fpga_wr_reqGen_intermediateBuffer2
  FIFO2 #(.width(32'd202),
	  .guarded(32'd1)) m_fpga_wr_reqGen_intermediateBuffer2(.RST(RST_N_m32_axi_arestn),
								.CLK(CLK_m32_axi_aclk),
								.D_IN(m_fpga_wr_reqGen_intermediateBuffer2$D_IN),
								.ENQ(m_fpga_wr_reqGen_intermediateBuffer2$ENQ),
								.DEQ(m_fpga_wr_reqGen_intermediateBuffer2$DEQ),
								.CLR(m_fpga_wr_reqGen_intermediateBuffer2$CLR),
								.D_OUT(m_fpga_wr_reqGen_intermediateBuffer2$D_OUT),
								.FULL_N(m_fpga_wr_reqGen_intermediateBuffer2$FULL_N),
								.EMPTY_N(m_fpga_wr_reqGen_intermediateBuffer2$EMPTY_N));

  // submodule m_fpga_wr_reqGen_outgoingBuffer
  FIFO2 #(.width(32'd211),
	  .guarded(32'd1)) m_fpga_wr_reqGen_outgoingBuffer(.RST(RST_N_m32_axi_arestn),
							   .CLK(CLK_m32_axi_aclk),
							   .D_IN(m_fpga_wr_reqGen_outgoingBuffer$D_IN),
							   .ENQ(m_fpga_wr_reqGen_outgoingBuffer$ENQ),
							   .DEQ(m_fpga_wr_reqGen_outgoingBuffer$DEQ),
							   .CLR(m_fpga_wr_reqGen_outgoingBuffer$CLR),
							   .D_OUT(m_fpga_wr_reqGen_outgoingBuffer$D_OUT),
							   .FULL_N(m_fpga_wr_reqGen_outgoingBuffer$FULL_N),
							   .EMPTY_N(m_fpga_wr_reqGen_outgoingBuffer$EMPTY_N));

  // submodule m_pcie_rd_master_rd_in
  SizedFIFO #(.p1width(32'd94),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) m_pcie_rd_master_rd_in(.RST(RST_N_m64_axi_arestn),
						      .CLK(CLK_m64_axi_aclk),
						      .D_IN(m_pcie_rd_master_rd_in$D_IN),
						      .ENQ(m_pcie_rd_master_rd_in$ENQ),
						      .DEQ(m_pcie_rd_master_rd_in$DEQ),
						      .CLR(m_pcie_rd_master_rd_in$CLR),
						      .D_OUT(m_pcie_rd_master_rd_in$D_OUT),
						      .FULL_N(m_pcie_rd_master_rd_in$FULL_N),
						      .EMPTY_N(m_pcie_rd_master_rd_in$EMPTY_N));

  // submodule m_pcie_rd_master_rd_out
  FIFO2 #(.width(32'd260),
	  .guarded(32'd1)) m_pcie_rd_master_rd_out(.RST(RST_N_m64_axi_arestn),
						   .CLK(CLK_m64_axi_aclk),
						   .D_IN(m_pcie_rd_master_rd_out$D_IN),
						   .ENQ(m_pcie_rd_master_rd_out$ENQ),
						   .DEQ(m_pcie_rd_master_rd_out$DEQ),
						   .CLR(m_pcie_rd_master_rd_out$CLR),
						   .D_OUT(m_pcie_rd_master_rd_out$D_OUT),
						   .FULL_N(m_pcie_rd_master_rd_out$FULL_N),
						   .EMPTY_N(m_pcie_rd_master_rd_out$EMPTY_N));

  // submodule m_pcie_rd_outgoingBuffer
  FIFO2 #(.width(32'd256),
	  .guarded(32'd1)) m_pcie_rd_outgoingBuffer(.RST(RST_N_m64_axi_arestn),
						    .CLK(CLK_m64_axi_aclk),
						    .D_IN(m_pcie_rd_outgoingBuffer$D_IN),
						    .ENQ(m_pcie_rd_outgoingBuffer$ENQ),
						    .DEQ(m_pcie_rd_outgoingBuffer$DEQ),
						    .CLR(m_pcie_rd_outgoingBuffer$CLR),
						    .D_OUT(m_pcie_rd_outgoingBuffer$D_OUT),
						    .FULL_N(m_pcie_rd_outgoingBuffer$FULL_N),
						    .EMPTY_N(m_pcie_rd_outgoingBuffer$EMPTY_N));

  // submodule m_pcie_rd_reqGen_incomingBuffer
  FIFO2 #(.width(32'd132),
	  .guarded(32'd1)) m_pcie_rd_reqGen_incomingBuffer(.RST(RST_N_m64_axi_arestn),
							   .CLK(CLK_m64_axi_aclk),
							   .D_IN(m_pcie_rd_reqGen_incomingBuffer$D_IN),
							   .ENQ(m_pcie_rd_reqGen_incomingBuffer$ENQ),
							   .DEQ(m_pcie_rd_reqGen_incomingBuffer$DEQ),
							   .CLR(m_pcie_rd_reqGen_incomingBuffer$CLR),
							   .D_OUT(m_pcie_rd_reqGen_incomingBuffer$D_OUT),
							   .FULL_N(m_pcie_rd_reqGen_incomingBuffer$FULL_N),
							   .EMPTY_N(m_pcie_rd_reqGen_incomingBuffer$EMPTY_N));

  // submodule m_pcie_rd_reqGen_intermediateBuffer
  FIFO2 #(.width(32'd142),
	  .guarded(32'd1)) m_pcie_rd_reqGen_intermediateBuffer(.RST(RST_N_m64_axi_arestn),
							       .CLK(CLK_m64_axi_aclk),
							       .D_IN(m_pcie_rd_reqGen_intermediateBuffer$D_IN),
							       .ENQ(m_pcie_rd_reqGen_intermediateBuffer$ENQ),
							       .DEQ(m_pcie_rd_reqGen_intermediateBuffer$DEQ),
							       .CLR(m_pcie_rd_reqGen_intermediateBuffer$CLR),
							       .D_OUT(m_pcie_rd_reqGen_intermediateBuffer$D_OUT),
							       .FULL_N(m_pcie_rd_reqGen_intermediateBuffer$FULL_N),
							       .EMPTY_N(m_pcie_rd_reqGen_intermediateBuffer$EMPTY_N));

  // submodule m_pcie_rd_reqGen_intermediateBuffer2
  FIFO2 #(.width(32'd201),
	  .guarded(32'd1)) m_pcie_rd_reqGen_intermediateBuffer2(.RST(RST_N_m64_axi_arestn),
								.CLK(CLK_m64_axi_aclk),
								.D_IN(m_pcie_rd_reqGen_intermediateBuffer2$D_IN),
								.ENQ(m_pcie_rd_reqGen_intermediateBuffer2$ENQ),
								.DEQ(m_pcie_rd_reqGen_intermediateBuffer2$DEQ),
								.CLR(m_pcie_rd_reqGen_intermediateBuffer2$CLR),
								.D_OUT(m_pcie_rd_reqGen_intermediateBuffer2$D_OUT),
								.FULL_N(m_pcie_rd_reqGen_intermediateBuffer2$FULL_N),
								.EMPTY_N(m_pcie_rd_reqGen_intermediateBuffer2$EMPTY_N));

  // submodule m_pcie_rd_reqGen_outgoingBuffer
  FIFO2 #(.width(32'd210),
	  .guarded(32'd1)) m_pcie_rd_reqGen_outgoingBuffer(.RST(RST_N_m64_axi_arestn),
							   .CLK(CLK_m64_axi_aclk),
							   .D_IN(m_pcie_rd_reqGen_outgoingBuffer$D_IN),
							   .ENQ(m_pcie_rd_reqGen_outgoingBuffer$ENQ),
							   .DEQ(m_pcie_rd_reqGen_outgoingBuffer$DEQ),
							   .CLR(m_pcie_rd_reqGen_outgoingBuffer$CLR),
							   .D_OUT(m_pcie_rd_reqGen_outgoingBuffer$D_OUT),
							   .FULL_N(m_pcie_rd_reqGen_outgoingBuffer$FULL_N),
							   .EMPTY_N(m_pcie_rd_reqGen_outgoingBuffer$EMPTY_N));

  // submodule m_pcie_wr_beatsPerRequestFIFO
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) m_pcie_wr_beatsPerRequestFIFO(.RST(RST_N_m64_axi_arestn),
							     .CLK(CLK_m64_axi_aclk),
							     .D_IN(m_pcie_wr_beatsPerRequestFIFO$D_IN),
							     .ENQ(m_pcie_wr_beatsPerRequestFIFO$ENQ),
							     .DEQ(m_pcie_wr_beatsPerRequestFIFO$DEQ),
							     .CLR(m_pcie_wr_beatsPerRequestFIFO$CLR),
							     .D_OUT(m_pcie_wr_beatsPerRequestFIFO$D_OUT),
							     .FULL_N(m_pcie_wr_beatsPerRequestFIFO$FULL_N),
							     .EMPTY_N(m_pcie_wr_beatsPerRequestFIFO$EMPTY_N));

  // submodule m_pcie_wr_incomingBuffer
  FIFO2 #(.width(32'd256),
	  .guarded(32'd1)) m_pcie_wr_incomingBuffer(.RST(RST_N_m64_axi_arestn),
						    .CLK(CLK_m64_axi_aclk),
						    .D_IN(m_pcie_wr_incomingBuffer$D_IN),
						    .ENQ(m_pcie_wr_incomingBuffer$ENQ),
						    .DEQ(m_pcie_wr_incomingBuffer$DEQ),
						    .CLR(m_pcie_wr_incomingBuffer$CLR),
						    .D_OUT(m_pcie_wr_incomingBuffer$D_OUT),
						    .FULL_N(m_pcie_wr_incomingBuffer$FULL_N),
						    .EMPTY_N(m_pcie_wr_incomingBuffer$EMPTY_N));

  // submodule m_pcie_wr_master_wr_in_addr
  SizedFIFO #(.p1width(32'd94),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) m_pcie_wr_master_wr_in_addr(.RST(RST_N_m64_axi_arestn),
							   .CLK(CLK_m64_axi_aclk),
							   .D_IN(m_pcie_wr_master_wr_in_addr$D_IN),
							   .ENQ(m_pcie_wr_master_wr_in_addr$ENQ),
							   .DEQ(m_pcie_wr_master_wr_in_addr$DEQ),
							   .CLR(m_pcie_wr_master_wr_in_addr$CLR),
							   .D_OUT(m_pcie_wr_master_wr_in_addr$D_OUT),
							   .FULL_N(m_pcie_wr_master_wr_in_addr$FULL_N),
							   .EMPTY_N(m_pcie_wr_master_wr_in_addr$EMPTY_N));

  // submodule m_pcie_wr_master_wr_in_data
  FIFO2 #(.width(32'd290),
	  .guarded(32'd1)) m_pcie_wr_master_wr_in_data(.RST(RST_N_m64_axi_arestn),
						       .CLK(CLK_m64_axi_aclk),
						       .D_IN(m_pcie_wr_master_wr_in_data$D_IN),
						       .ENQ(m_pcie_wr_master_wr_in_data$ENQ),
						       .DEQ(m_pcie_wr_master_wr_in_data$DEQ),
						       .CLR(m_pcie_wr_master_wr_in_data$CLR),
						       .D_OUT(m_pcie_wr_master_wr_in_data$D_OUT),
						       .FULL_N(m_pcie_wr_master_wr_in_data$FULL_N),
						       .EMPTY_N(m_pcie_wr_master_wr_in_data$EMPTY_N));

  // submodule m_pcie_wr_master_wr_out
  FIFO2 #(.width(32'd3),
	  .guarded(32'd1)) m_pcie_wr_master_wr_out(.RST(RST_N_m64_axi_arestn),
						   .CLK(CLK_m64_axi_aclk),
						   .D_IN(m_pcie_wr_master_wr_out$D_IN),
						   .ENQ(m_pcie_wr_master_wr_out$ENQ),
						   .DEQ(m_pcie_wr_master_wr_out$DEQ),
						   .CLR(m_pcie_wr_master_wr_out$CLR),
						   .D_OUT(),
						   .FULL_N(m_pcie_wr_master_wr_out$FULL_N),
						   .EMPTY_N(m_pcie_wr_master_wr_out$EMPTY_N));

  // submodule m_pcie_wr_reqGen_incomingBuffer
  FIFO2 #(.width(32'd132),
	  .guarded(32'd1)) m_pcie_wr_reqGen_incomingBuffer(.RST(RST_N_m64_axi_arestn),
							   .CLK(CLK_m64_axi_aclk),
							   .D_IN(m_pcie_wr_reqGen_incomingBuffer$D_IN),
							   .ENQ(m_pcie_wr_reqGen_incomingBuffer$ENQ),
							   .DEQ(m_pcie_wr_reqGen_incomingBuffer$DEQ),
							   .CLR(m_pcie_wr_reqGen_incomingBuffer$CLR),
							   .D_OUT(m_pcie_wr_reqGen_incomingBuffer$D_OUT),
							   .FULL_N(m_pcie_wr_reqGen_incomingBuffer$FULL_N),
							   .EMPTY_N(m_pcie_wr_reqGen_incomingBuffer$EMPTY_N));

  // submodule m_pcie_wr_reqGen_intermediateBuffer
  FIFO2 #(.width(32'd142),
	  .guarded(32'd1)) m_pcie_wr_reqGen_intermediateBuffer(.RST(RST_N_m64_axi_arestn),
							       .CLK(CLK_m64_axi_aclk),
							       .D_IN(m_pcie_wr_reqGen_intermediateBuffer$D_IN),
							       .ENQ(m_pcie_wr_reqGen_intermediateBuffer$ENQ),
							       .DEQ(m_pcie_wr_reqGen_intermediateBuffer$DEQ),
							       .CLR(m_pcie_wr_reqGen_intermediateBuffer$CLR),
							       .D_OUT(m_pcie_wr_reqGen_intermediateBuffer$D_OUT),
							       .FULL_N(m_pcie_wr_reqGen_intermediateBuffer$FULL_N),
							       .EMPTY_N(m_pcie_wr_reqGen_intermediateBuffer$EMPTY_N));

  // submodule m_pcie_wr_reqGen_intermediateBuffer2
  FIFO2 #(.width(32'd201),
	  .guarded(32'd1)) m_pcie_wr_reqGen_intermediateBuffer2(.RST(RST_N_m64_axi_arestn),
								.CLK(CLK_m64_axi_aclk),
								.D_IN(m_pcie_wr_reqGen_intermediateBuffer2$D_IN),
								.ENQ(m_pcie_wr_reqGen_intermediateBuffer2$ENQ),
								.DEQ(m_pcie_wr_reqGen_intermediateBuffer2$DEQ),
								.CLR(m_pcie_wr_reqGen_intermediateBuffer2$CLR),
								.D_OUT(m_pcie_wr_reqGen_intermediateBuffer2$D_OUT),
								.FULL_N(m_pcie_wr_reqGen_intermediateBuffer2$FULL_N),
								.EMPTY_N(m_pcie_wr_reqGen_intermediateBuffer2$EMPTY_N));

  // submodule m_pcie_wr_reqGen_outgoingBuffer
  FIFO2 #(.width(32'd210),
	  .guarded(32'd1)) m_pcie_wr_reqGen_outgoingBuffer(.RST(RST_N_m64_axi_arestn),
							   .CLK(CLK_m64_axi_aclk),
							   .D_IN(m_pcie_wr_reqGen_outgoingBuffer$D_IN),
							   .ENQ(m_pcie_wr_reqGen_outgoingBuffer$ENQ),
							   .DEQ(m_pcie_wr_reqGen_outgoingBuffer$DEQ),
							   .CLR(m_pcie_wr_reqGen_outgoingBuffer$CLR),
							   .D_OUT(m_pcie_wr_reqGen_outgoingBuffer$D_OUT),
							   .FULL_N(m_pcie_wr_reqGen_outgoingBuffer$FULL_N),
							   .EMPTY_N(m_pcie_wr_reqGen_outgoingBuffer$EMPTY_N));

  // submodule mclk_m_fpga_put_req_rd_ff
  SyncFIFO1 #(.dataWidth(32'd132)) mclk_m_fpga_put_req_rd_ff(.sCLK(CLK),
							     .dCLK(CLK_m32_axi_aclk),
							     .sRST(RST_N),
							     .sD_IN(mclk_m_fpga_put_req_rd_ff$sD_IN),
							     .sENQ(mclk_m_fpga_put_req_rd_ff$sENQ),
							     .dDEQ(mclk_m_fpga_put_req_rd_ff$dDEQ),
							     .sFULL_N(mclk_m_fpga_put_req_rd_ff$sFULL_N),
							     .dEMPTY_N(mclk_m_fpga_put_req_rd_ff$dEMPTY_N),
							     .dD_OUT(mclk_m_fpga_put_req_rd_ff$dD_OUT));

  // submodule mclk_m_fpga_put_req_wr_ff
  SyncFIFO1 #(.dataWidth(32'd132)) mclk_m_fpga_put_req_wr_ff(.sCLK(CLK),
							     .dCLK(CLK_m32_axi_aclk),
							     .sRST(RST_N),
							     .sD_IN(mclk_m_fpga_put_req_wr_ff$sD_IN),
							     .sENQ(mclk_m_fpga_put_req_wr_ff$sENQ),
							     .dDEQ(mclk_m_fpga_put_req_wr_ff$dDEQ),
							     .sFULL_N(mclk_m_fpga_put_req_wr_ff$sFULL_N),
							     .dEMPTY_N(mclk_m_fpga_put_req_wr_ff$dEMPTY_N),
							     .dD_OUT(mclk_m_fpga_put_req_wr_ff$dD_OUT));

  // submodule mclk_m_pcie_put_req_rd_ff
  SyncFIFO1 #(.dataWidth(32'd132)) mclk_m_pcie_put_req_rd_ff(.sCLK(CLK),
							     .dCLK(CLK_m64_axi_aclk),
							     .sRST(RST_N),
							     .sD_IN(mclk_m_pcie_put_req_rd_ff$sD_IN),
							     .sENQ(mclk_m_pcie_put_req_rd_ff$sENQ),
							     .dDEQ(mclk_m_pcie_put_req_rd_ff$dDEQ),
							     .sFULL_N(mclk_m_pcie_put_req_rd_ff$sFULL_N),
							     .dEMPTY_N(mclk_m_pcie_put_req_rd_ff$dEMPTY_N),
							     .dD_OUT(mclk_m_pcie_put_req_rd_ff$dD_OUT));

  // submodule mclk_m_pcie_put_req_wr_ff
  SyncFIFO1 #(.dataWidth(32'd132)) mclk_m_pcie_put_req_wr_ff(.sCLK(CLK),
							     .dCLK(CLK_m64_axi_aclk),
							     .sRST(RST_N),
							     .sD_IN(mclk_m_pcie_put_req_wr_ff$sD_IN),
							     .sENQ(mclk_m_pcie_put_req_wr_ff$sENQ),
							     .dDEQ(mclk_m_pcie_put_req_wr_ff$dDEQ),
							     .sFULL_N(mclk_m_pcie_put_req_wr_ff$sFULL_N),
							     .dEMPTY_N(mclk_m_pcie_put_req_wr_ff$dEMPTY_N),
							     .dD_OUT(mclk_m_pcie_put_req_wr_ff$dD_OUT));

  // submodule pcieDone
  SyncFIFO1 #(.dataWidth(32'd1)) pcieDone(.sCLK(CLK_m64_axi_aclk),
					  .dCLK(CLK),
					  .sRST(RST_N_m64_axi_arestn),
					  .sD_IN(pcieDone$sD_IN),
					  .sENQ(pcieDone$sENQ),
					  .dDEQ(pcieDone$dDEQ),
					  .sFULL_N(pcieDone$sFULL_N),
					  .dEMPTY_N(pcieDone$dEMPTY_N),
					  .dD_OUT());

  // submodule readConvBTT_ff
  SyncFIFO1 #(.dataWidth(32'd65)) readConvBTT_ff(.sCLK(CLK),
						 .dCLK(CLK_m64_axi_aclk),
						 .sRST(RST_N),
						 .sD_IN(readConvBTT_ff$sD_IN),
						 .sENQ(readConvBTT_ff$sENQ),
						 .dDEQ(readConvBTT_ff$dDEQ),
						 .sFULL_N(readConvBTT_ff$sFULL_N),
						 .dEMPTY_N(readConvBTT_ff$dEMPTY_N),
						 .dD_OUT(readConvBTT_ff$dD_OUT));

  // submodule s_config_readSlave_in
  FIFO1 #(.width(32'd67), .guarded(32'd1)) s_config_readSlave_in(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(s_config_readSlave_in$D_IN),
								 .ENQ(s_config_readSlave_in$ENQ),
								 .DEQ(s_config_readSlave_in$DEQ),
								 .CLR(s_config_readSlave_in$CLR),
								 .D_OUT(s_config_readSlave_in$D_OUT),
								 .FULL_N(s_config_readSlave_in$FULL_N),
								 .EMPTY_N(s_config_readSlave_in$EMPTY_N));

  // submodule s_config_readSlave_out
  FIFO1 #(.width(32'd66), .guarded(32'd1)) s_config_readSlave_out(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(s_config_readSlave_out$D_IN),
								  .ENQ(s_config_readSlave_out$ENQ),
								  .DEQ(s_config_readSlave_out$DEQ),
								  .CLR(s_config_readSlave_out$CLR),
								  .D_OUT(s_config_readSlave_out$D_OUT),
								  .FULL_N(s_config_readSlave_out$FULL_N),
								  .EMPTY_N(s_config_readSlave_out$EMPTY_N));

  // submodule s_config_writeSlave_in
  FIFO1 #(.width(32'd139),
	  .guarded(32'd1)) s_config_writeSlave_in(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(s_config_writeSlave_in$D_IN),
						  .ENQ(s_config_writeSlave_in$ENQ),
						  .DEQ(s_config_writeSlave_in$DEQ),
						  .CLR(s_config_writeSlave_in$CLR),
						  .D_OUT(s_config_writeSlave_in$D_OUT),
						  .FULL_N(s_config_writeSlave_in$FULL_N),
						  .EMPTY_N(s_config_writeSlave_in$EMPTY_N));

  // submodule s_config_writeSlave_out
  FIFO1 #(.width(32'd2), .guarded(32'd1)) s_config_writeSlave_out(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(s_config_writeSlave_out$D_IN),
								  .ENQ(s_config_writeSlave_out$ENQ),
								  .DEQ(s_config_writeSlave_out$DEQ),
								  .CLR(s_config_writeSlave_out$CLR),
								  .D_OUT(s_config_writeSlave_out$D_OUT),
								  .FULL_N(s_config_writeSlave_out$FULL_N),
								  .EMPTY_N(s_config_writeSlave_out$EMPTY_N));

  // submodule writeConvBTT_ff
  SyncFIFO1 #(.dataWidth(32'd65)) writeConvBTT_ff(.sCLK(CLK),
						  .dCLK(CLK_m64_axi_aclk),
						  .sRST(RST_N),
						  .sD_IN(writeConvBTT_ff$sD_IN),
						  .sENQ(writeConvBTT_ff$sENQ),
						  .dDEQ(writeConvBTT_ff$dDEQ),
						  .sFULL_N(writeConvBTT_ff$sFULL_N),
						  .dEMPTY_N(writeConvBTT_ff$dEMPTY_N),
						  .dD_OUT(writeConvBTT_ff$dD_OUT));

  // submodule writeConverter_dataSync
  FIFO2 #(.width(32'd512),
	  .guarded(32'd1)) writeConverter_dataSync(.RST(RST_N_m64_axi_arestn),
						   .CLK(CLK_m64_axi_aclk),
						   .D_IN(writeConverter_dataSync$D_IN),
						   .ENQ(writeConverter_dataSync$ENQ),
						   .DEQ(writeConverter_dataSync$DEQ),
						   .CLR(writeConverter_dataSync$CLR),
						   .D_OUT(writeConverter_dataSync$D_OUT),
						   .FULL_N(writeConverter_dataSync$FULL_N),
						   .EMPTY_N(writeConverter_dataSync$EMPTY_N));

  // rule RL_s_config_axiReadSpecialIsHandled
  assign WILL_FIRE_RL_s_config_axiReadSpecialIsHandled =
	     s_config_readSlave_in$EMPTY_N &&
	     s_config_readSlave_in$D_OUT[9:6] == 4'd0 ;

  // rule RL_s_config_axiReadSpecialIsHandled_1
  assign WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_1 =
	     s_config_readSlave_in$EMPTY_N &&
	     s_config_readSlave_in$D_OUT[9:6] == 4'd1 ;

  // rule RL_s_config_axiReadSpecialIsHandled_2
  assign WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_2 =
	     s_config_readSlave_in$EMPTY_N &&
	     s_config_readSlave_in$D_OUT[9:6] == 4'd8 ;

  // rule RL_s_config_axiReadSpecialIsHandled_3
  assign WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_3 =
	     s_config_readSlave_in$EMPTY_N &&
	     s_config_readSlave_in$D_OUT[9:6] == 4'd9 ;

  // rule RL_s_config_axiReadSpecialIsHandled_4
  assign WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_4 =
	     s_config_readSlave_in$EMPTY_N &&
	     s_config_readSlave_in$D_OUT[9:6] == 4'd12 ;

  // rule RL_s_config_axiReadSpecialIsHandled_5
  assign WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_5 =
	     s_config_readSlave_in$EMPTY_N &&
	     s_config_readSlave_in$D_OUT[9:6] == 4'd3 ;

  // rule RL_s_config_axiReadSpecialIsHandled_6
  assign WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_6 =
	     s_config_readSlave_in$EMPTY_N &&
	     s_config_readSlave_in$D_OUT[9:6] == 4'd2 ;

  // rule RL_s_config_axiReadSpecialIsHandled_7
  assign WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_7 =
	     s_config_readSlave_in$EMPTY_N &&
	     s_config_readSlave_in$D_OUT[9:6] == 4'd6 ;

  // rule RL_s_config_axiReadSpecialIsHandled_8
  assign WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_8 =
	     s_config_readSlave_in$EMPTY_N &&
	     s_config_readSlave_in$D_OUT[9:6] == 4'd7 ;

  // rule RL_s_config_axiReadSpecial_5
  assign WILL_FIRE_RL_s_config_axiReadSpecial_5 =
	     s_config_readSlave_in$EMPTY_N && s_config_readSlave_out$FULL_N &&
	     s_config_readSlave_in$D_OUT[9:6] == 4'd3 &&
	     !s_config_readBusy ;

  // rule RL_s_config_axiReadSpecial_7
  assign WILL_FIRE_RL_s_config_axiReadSpecial_7 =
	     s_config_readSlave_in$EMPTY_N && s_config_readSlave_out$FULL_N &&
	     s_config_readSlave_in$D_OUT[9:6] == 4'd6 &&
	     !s_config_readBusy ;

  // rule RL_handleRead
  assign CAN_FIRE_RL_handleRead =
	     readIn_rv[192] && mclk_m_pcie_put_req_wr_ff$sFULL_N &&
	     mclk_m_fpga_put_req_rd_ff$sFULL_N &&
	     readConvBTT_ff$sFULL_N &&
	     !opInProgress ;
  assign WILL_FIRE_RL_handleRead =
	     CAN_FIRE_RL_handleRead && !WILL_FIRE_RL_handleWrite ;

  // rule RL_s_config_axiReadSpecial_8
  assign WILL_FIRE_RL_s_config_axiReadSpecial_8 =
	     s_config_readSlave_in$EMPTY_N && s_config_readSlave_out$FULL_N &&
	     s_config_readSlave_in$D_OUT[9:6] == 4'd7 &&
	     !s_config_readBusy ;

  // rule RL_handleWrite
  assign WILL_FIRE_RL_handleWrite =
	     writeIn_rv[192] && mclk_m_pcie_put_req_rd_ff$sFULL_N &&
	     mclk_m_fpga_put_req_wr_ff$sFULL_N &&
	     writeConvBTT_ff$sFULL_N &&
	     !opInProgress ;

  // rule RL_s_config_1_axiWriteSpecial
  assign WILL_FIRE_RL_s_config_1_axiWriteSpecial =
	     s_config_writeSlave_in$EMPTY_N &&
	     s_config_writeSlave_out$FULL_N &&
	     cmdsIn$FULL_N &&
	     s_config_writeSlave_in$D_OUT[81:78] == 4'd4 ;

  // rule RL_s_config_1_axiWriteSpecialIsHandled
  assign WILL_FIRE_RL_s_config_1_axiWriteSpecialIsHandled =
	     s_config_readSlave_in$EMPTY_N &&
	     s_config_readSlave_in$D_OUT[9:6] == 4'd4 ;

  // rule RL_s_config_axiReadSpecial
  assign WILL_FIRE_RL_s_config_axiReadSpecial =
	     s_config_readSlave_in$EMPTY_N && s_config_readSlave_out$FULL_N &&
	     s_config_readSlave_in$D_OUT[9:6] == 4'd0 &&
	     !s_config_readBusy ;

  // rule RL_s_config_1_axiWriteSpecial_1
  assign WILL_FIRE_RL_s_config_1_axiWriteSpecial_1 =
	     s_config_writeSlave_in$EMPTY_N &&
	     s_config_writeSlave_out$FULL_N &&
	     s_config_writeSlave_in$D_OUT[81:78] == 4'd0 ;

  // rule RL_s_config_axiReadSpecial_1
  assign WILL_FIRE_RL_s_config_axiReadSpecial_1 =
	     s_config_readSlave_in$EMPTY_N && s_config_readSlave_out$FULL_N &&
	     s_config_readSlave_in$D_OUT[9:6] == 4'd1 &&
	     !s_config_readBusy ;

  // rule RL_s_config_1_axiWriteSpecial_2
  assign WILL_FIRE_RL_s_config_1_axiWriteSpecial_2 =
	     s_config_writeSlave_in$EMPTY_N &&
	     s_config_writeSlave_out$FULL_N &&
	     s_config_writeSlave_in$D_OUT[81:78] == 4'd1 ;

  // rule RL_s_config_axiReadSpecial_2
  assign WILL_FIRE_RL_s_config_axiReadSpecial_2 =
	     s_config_readSlave_in$EMPTY_N && s_config_readSlave_out$FULL_N &&
	     s_config_readSlave_in$D_OUT[9:6] == 4'd8 &&
	     !s_config_readBusy ;

  // rule RL_s_config_1_axiWriteSpecial_3
  assign WILL_FIRE_RL_s_config_1_axiWriteSpecial_3 =
	     s_config_writeSlave_in$EMPTY_N &&
	     s_config_writeSlave_out$FULL_N &&
	     s_config_writeSlave_in$D_OUT[81:78] == 4'd8 ;

  // rule RL_s_config_axiReadSpecial_3
  assign WILL_FIRE_RL_s_config_axiReadSpecial_3 =
	     s_config_readSlave_in$EMPTY_N && s_config_readSlave_out$FULL_N &&
	     s_config_readSlave_in$D_OUT[9:6] == 4'd9 &&
	     !s_config_readBusy ;

  // rule RL_s_config_1_axiWriteSpecial_4
  assign WILL_FIRE_RL_s_config_1_axiWriteSpecial_4 =
	     s_config_writeSlave_in$EMPTY_N &&
	     s_config_writeSlave_out$FULL_N &&
	     s_config_writeSlave_in$D_OUT[81:78] == 4'd9 ;

  // rule RL_setInterrupt
  assign WILL_FIRE_RL_setInterrupt =
	     pcieDone$dEMPTY_N && fpgaDone$dEMPTY_N && opInProgress ;

  // rule RL_s_config_axiReadSpecial_4
  assign WILL_FIRE_RL_s_config_axiReadSpecial_4 =
	     s_config_readSlave_in$EMPTY_N && s_config_readSlave_out$FULL_N &&
	     s_config_readSlave_in$D_OUT[9:6] == 4'd12 &&
	     !s_config_readBusy ;

  // rule RL_s_config_1_axiWriteSpecial_5
  assign WILL_FIRE_RL_s_config_1_axiWriteSpecial_5 =
	     s_config_writeSlave_in$EMPTY_N &&
	     s_config_writeSlave_out$FULL_N &&
	     s_config_writeSlave_in$D_OUT[81:78] == 4'd12 ;

  // rule RL_s_config_axiReadSpecial_6
  assign WILL_FIRE_RL_s_config_axiReadSpecial_6 =
	     s_config_readSlave_in$EMPTY_N && s_config_readSlave_out$FULL_N &&
	     s_config_readSlave_in$D_OUT[9:6] == 4'd2 &&
	     !s_config_readBusy ;

  // rule RL_s_config_axiReadFallback
  assign WILL_FIRE_RL_s_config_axiReadFallback =
	     s_config_readSlave_in$EMPTY_N && s_config_readSlave_out$FULL_N &&
	     !s_config_readIsHandled$whas ;

  // rule RL_s_config_1_axiWriteSpecial_6
  assign WILL_FIRE_RL_s_config_1_axiWriteSpecial_6 =
	     s_config_writeSlave_in$EMPTY_N &&
	     s_config_writeSlave_out$FULL_N &&
	     s_config_writeSlave_in$D_OUT[81:78] == 4'd2 ;

  // rule RL_s_config_1_axiWriteFallback
  assign WILL_FIRE_RL_s_config_1_axiWriteFallback =
	     s_config_writeSlave_in$EMPTY_N &&
	     s_config_writeSlave_out$FULL_N &&
	     !s_config_writeIsHandled$whas &&
	     !WILL_FIRE_RL_s_config_1_axiWriteSpecial_6 &&
	     !WILL_FIRE_RL_s_config_1_axiWriteSpecial_5 &&
	     !WILL_FIRE_RL_s_config_1_axiWriteSpecial_4 &&
	     !WILL_FIRE_RL_s_config_1_axiWriteSpecial_3 &&
	     !WILL_FIRE_RL_s_config_1_axiWriteSpecial_2 &&
	     !WILL_FIRE_RL_s_config_1_axiWriteSpecial_1 &&
	     !WILL_FIRE_RL_s_config_1_axiWriteSpecial ;

  // rule RL_m_pcie_wr_fillBuffer
  assign WILL_FIRE_RL_m_pcie_wr_fillBuffer =
	     m_pcie_wr_reqGen_outgoingBuffer$EMPTY_N &&
	     m_pcie_wr_task_data_output_reg[64:6] == 59'd0 &&
	     m_pcie_wr_task_data_requests_reg[126:68] == 59'd0 ;

  // rule RL_m_pcie_wr_reqGen_finishRequest
  assign WILL_FIRE_RL_m_pcie_wr_reqGen_finishRequest =
	     m_pcie_wr_reqGen_intermediateBuffer2$EMPTY_N &&
	     m_pcie_wr_reqGen_outgoingBuffer$FULL_N ;

  // rule RL_m_pcie_wr_placeRequest
  assign WILL_FIRE_RL_m_pcie_wr_placeRequest =
	     m_pcie_wr_master_wr_in_addr$FULL_N &&
	     m_pcie_wr_beatsPerRequestFIFO$FULL_N &&
	     m_pcie_wr_task_data_requests_reg[126:68] != 59'd0 &&
	     m_pcie_wr_incomingBuffer$EMPTY_N ;

  // rule RL_m_pcie_wr_forwardData
  assign WILL_FIRE_RL_m_pcie_wr_forwardData =
	     m_pcie_wr_incomingBuffer$EMPTY_N &&
	     m_pcie_wr_beatsPerRequestFIFO$EMPTY_N &&
	     m_pcie_wr_master_wr_in_data$FULL_N &&
	     m_pcie_wr_task_data_output_reg[64:6] != 59'd0 ;

  // rule RL_m_pcie_rd_fillBuffer
  assign WILL_FIRE_RL_m_pcie_rd_fillBuffer =
	     m_pcie_rd_reqGen_outgoingBuffer$EMPTY_N &&
	     m_pcie_rd_task_data_output_reg[64:6] == 59'd0 &&
	     m_pcie_rd_task_data_requests_reg[126:68] == 59'd0 ;

  // rule RL_m_pcie_rd_reqGen_finishRequest
  assign WILL_FIRE_RL_m_pcie_rd_reqGen_finishRequest =
	     m_pcie_rd_reqGen_intermediateBuffer2$EMPTY_N &&
	     m_pcie_rd_reqGen_outgoingBuffer$FULL_N ;

  // rule RL_m_pcie_rd_placeRequest
  assign WILL_FIRE_RL_m_pcie_rd_placeRequest =
	     m_pcie_rd_master_rd_in$FULL_N &&
	     m_pcie_rd_task_data_requests_reg[126:68] != 59'd0 ;

  // rule RL_m_pcie_rd_forwardData
  assign WILL_FIRE_RL_m_pcie_rd_forwardData =
	     m_pcie_rd_master_rd_out$EMPTY_N &&
	     m_pcie_rd_outgoingBuffer$FULL_N &&
	     m_pcie_rd_task_data_output_reg[64:6] != 59'd0 ;

  // rule RL_m_fpga_wr_fillBuffer
  assign WILL_FIRE_RL_m_fpga_wr_fillBuffer =
	     m_fpga_wr_reqGen_outgoingBuffer$EMPTY_N &&
	     m_fpga_wr_task_data_output_reg[64:7] == 58'd0 &&
	     m_fpga_wr_task_data_requests_reg[125:68] == 58'd0 ;

  // rule RL_m_fpga_wr_reqGen_finishRequest
  assign WILL_FIRE_RL_m_fpga_wr_reqGen_finishRequest =
	     m_fpga_wr_reqGen_intermediateBuffer2$EMPTY_N &&
	     m_fpga_wr_reqGen_outgoingBuffer$FULL_N ;

  // rule RL_m_fpga_wr_placeRequest
  assign WILL_FIRE_RL_m_fpga_wr_placeRequest =
	     m_fpga_wr_master_wr_in_addr$FULL_N &&
	     m_fpga_wr_beatsPerRequestFIFO$FULL_N &&
	     m_fpga_wr_task_data_requests_reg[125:68] != 58'd0 &&
	     m_fpga_wr_incomingBuffer$EMPTY_N ;

  // rule RL_m_fpga_wr_forwardData
  assign WILL_FIRE_RL_m_fpga_wr_forwardData =
	     m_fpga_wr_incomingBuffer$EMPTY_N &&
	     m_fpga_wr_beatsPerRequestFIFO$EMPTY_N &&
	     m_fpga_wr_master_wr_in_data$FULL_N &&
	     m_fpga_wr_task_data_output_reg[64:7] != 58'd0 ;

  // rule RL_m_fpga_rd_fillBuffer
  assign WILL_FIRE_RL_m_fpga_rd_fillBuffer =
	     m_fpga_rd_reqGen_outgoingBuffer$EMPTY_N &&
	     m_fpga_rd_task_data_output_reg[64:7] == 58'd0 &&
	     m_fpga_rd_task_data_requests_reg[125:68] == 58'd0 ;

  // rule RL_m_fpga_rd_reqGen_finishRequest
  assign WILL_FIRE_RL_m_fpga_rd_reqGen_finishRequest =
	     m_fpga_rd_reqGen_intermediateBuffer2$EMPTY_N &&
	     m_fpga_rd_reqGen_outgoingBuffer$FULL_N ;

  // rule RL_m_fpga_rd_placeRequest
  assign WILL_FIRE_RL_m_fpga_rd_placeRequest =
	     m_fpga_rd_master_rd_in$FULL_N &&
	     m_fpga_rd_task_data_requests_reg[125:68] != 58'd0 ;

  // rule RL_m_fpga_rd_forwardData
  assign WILL_FIRE_RL_m_fpga_rd_forwardData =
	     m_fpga_rd_master_rd_out$EMPTY_N &&
	     m_fpga_rd_outgoingBuffer$FULL_N &&
	     m_fpga_rd_task_data_output_reg[64:7] != 58'd0 ;

  // rule RL_mkConnectionGetPut_2
  assign WILL_FIRE_RL_mkConnectionGetPut_2 =
	     !readConvBTT_ff$dEMPTY_N && !readConverter_bufferEmpty &&
	     m_pcie_wr_incomingBuffer$FULL_N &&
	     !readConvBTT_ff$dEMPTY_N ;

  // rule RL_mkConnectionGetPut_1
  assign WILL_FIRE_RL_mkConnectionGetPut_1 =
	     !readConvBTT_ff$dEMPTY_N &&
	     readConverter_bufferEmpty$port1__read &&
	     fpga_response_converter$dEMPTY_N &&
	     !readConvBTT_ff$dEMPTY_N ;

  // rule RL_byteAlignerReader_forwardOutput
  assign WILL_FIRE_RL_byteAlignerReader_forwardOutput =
	     byteAlignerReader_outgoing$FULL_N &&
	     !byteAlignerReader_addr_ff$dEMPTY_N &&
	     byteAlignerReader_fetchedDatum &&
	     !byteAlignerReader_bytes_left_in_buffer_port0___ETC___d1447 &&
	     !byteAlignerReader_addr_ff$dEMPTY_N ;

  // rule RL_byteAlignerReader_fetchNewData
  assign WILL_FIRE_RL_byteAlignerReader_fetchNewData =
	     byteAlignerReader_incoming$EMPTY_N &&
	     !byteAlignerReader_addr_ff$dEMPTY_N &&
	     !byteAlignerReader_fetchedDatum$port1__read &&
	     byteAlignerReader_bytes_in_430_ULT_byteAligner_ETC___d1432 &&
	     !byteAlignerReader_addr_ff$dEMPTY_N ;

  // rule RL_byteAlignerReader_forwardOutputLast
  assign CAN_FIRE_RL_byteAlignerReader_forwardOutputLast =
	     byteAlignerReader_outgoing$FULL_N &&
	     !byteAlignerReader_addr_ff$dEMPTY_N &&
	     !byteAlignerReader_fetchedDatum &&
	     !byteAlignerReader_bytes_in_430_ULT_byteAligner_ETC___d1432 &&
	     byteAlignerReader_bytes_out < byteAlignerReader_bytes_total ;
  assign WILL_FIRE_RL_byteAlignerReader_forwardOutputLast =
	     CAN_FIRE_RL_byteAlignerReader_forwardOutputLast &&
	     !byteAlignerReader_addr_ff$dEMPTY_N ;

  // rule RL_mkConnectionGetPut_3
  assign WILL_FIRE_RL_mkConnectionGetPut_3 =
	     !writeConvBTT_ff$dEMPTY_N && m_pcie_rd_outgoingBuffer$EMPTY_N &&
	     writeConverter_dataSync$FULL_N &&
	     !writeConvBTT_ff$dEMPTY_N ;

  // rule RL_byteAlignerWriter_forwardOutput
  assign WILL_FIRE_RL_byteAlignerWriter_forwardOutput =
	     byteAlignerWriter_outgoing$FULL_N &&
	     !byteAlignerWriter_addr_ff$dEMPTY_N &&
	     byteAlignerWriter_fetchedDatum &&
	     !byteAlignerWriter_bytes_left_in_buffer_port0___ETC___d1569 &&
	     !byteAlignerWriter_addr_ff$dEMPTY_N ;

  // rule RL_byteAlignerWriter_fetchNewData
  assign WILL_FIRE_RL_byteAlignerWriter_fetchNewData =
	     byteAlignerWriter_incoming$EMPTY_N &&
	     !byteAlignerWriter_addr_ff$dEMPTY_N &&
	     !byteAlignerWriter_fetchedDatum$port1__read &&
	     byteAlignerWriter_bytes_in_552_ULT_byteAligner_ETC___d1554 &&
	     !byteAlignerWriter_addr_ff$dEMPTY_N ;

  // rule RL_byteAlignerWriter_forwardOutputLast
  assign CAN_FIRE_RL_byteAlignerWriter_forwardOutputLast =
	     byteAlignerWriter_outgoing$FULL_N &&
	     !byteAlignerWriter_addr_ff$dEMPTY_N &&
	     !byteAlignerWriter_fetchedDatum &&
	     !byteAlignerWriter_bytes_in_552_ULT_byteAligner_ETC___d1554 &&
	     byteAlignerWriter_bytes_out < byteAlignerWriter_bytes_total ;
  assign WILL_FIRE_RL_byteAlignerWriter_forwardOutputLast =
	     CAN_FIRE_RL_byteAlignerWriter_forwardOutputLast &&
	     !byteAlignerWriter_addr_ff$dEMPTY_N ;

  // inputs to muxes for submodule ports
  assign MUX_cycles_between$write_1__SEL_1 =
	     WILL_FIRE_RL_setInterrupt &&
	     pc_reqCntr_491_EQ_cycles_between_set_6_BITS_11_ETC___d1673 ;
  assign MUX_opInProgress$write_1__SEL_2 =
	     WILL_FIRE_RL_handleRead || WILL_FIRE_RL_handleWrite ;
  assign MUX_byteAlignerReader_buffer$port0__write_1__VAL_1 =
	     { 256'd0, byteAlignerReader_buffer[511:256] } ;
  assign MUX_byteAlignerReader_bytes_in$write_1__VAL_1 =
	     byteAlignerReader_bytes_in + 64'd32 ;
  assign MUX_byteAlignerReader_bytes_left_in_buffer$port0__write_1__VAL_1 =
	     byteAlignerReader_bytes_left_in_buffer -
	     byteAlignerReader_bytes_out_needed ;
  assign MUX_byteAlignerReader_bytes_out$write_1__VAL_1 =
	     byteAlignerReader_bytes_out +
	     { 58'd0, byteAlignerReader_bytes_out_needed } ;
  assign MUX_byteAlignerReader_bytes_out$write_1__VAL_2 =
	     byteAlignerReader_bytes_out + 64'd256 ;
  assign MUX_byteAlignerReader_bytes_out_needed$write_1__VAL_1 =
	     6'd32 - { 1'd0, byteAlignerReader_addr_ff$dD_OUT[68:64] } ;
  assign MUX_byteAlignerWriter_buffer$port0__write_1__VAL_1 =
	     { 256'd0, byteAlignerWriter_buffer[511:256] } ;
  assign MUX_byteAlignerWriter_bytes_in$write_1__VAL_1 =
	     byteAlignerWriter_bytes_in + 64'd32 ;
  assign MUX_byteAlignerWriter_bytes_left_in_buffer$port0__write_1__VAL_1 =
	     byteAlignerWriter_bytes_left_in_buffer -
	     byteAlignerWriter_bytes_out_needed ;
  assign MUX_byteAlignerWriter_bytes_out$write_1__VAL_1 =
	     byteAlignerWriter_bytes_out +
	     { 58'd0, byteAlignerWriter_bytes_out_needed } ;
  assign MUX_byteAlignerWriter_bytes_out$write_1__VAL_2 =
	     byteAlignerWriter_bytes_out + 64'd256 ;
  assign MUX_byteAlignerWriter_bytes_out_needed$write_1__VAL_1 =
	     6'd32 - { 1'd0, byteAlignerWriter_addr_ff$dD_OUT[68:64] } ;
  assign MUX_cycles_between$write_1__VAL_1 =
	     { 32'd0, clkCntr - pc_betweenStart } ;
  assign MUX_cycles_between$write_1__VAL_2 =
	     { s_config_writeSlave_in$D_OUT[10] ?
		 s_config_writeSlave_in$D_OUT[74:67] :
		 cycles_between[63:56],
	       s_config_writeSlave_in$D_OUT[9] ?
		 s_config_writeSlave_in$D_OUT[66:59] :
		 cycles_between[55:48],
	       s_config_writeSlave_in$D_OUT[8] ?
		 s_config_writeSlave_in$D_OUT[58:51] :
		 cycles_between[47:40],
	       s_config_writeSlave_in$D_OUT[7] ?
		 s_config_writeSlave_in$D_OUT[50:43] :
		 cycles_between[39:32],
	       s_config_writeSlave_in$D_OUT[6] ?
		 s_config_writeSlave_in$D_OUT[42:35] :
		 cycles_between[31:24],
	       s_config_writeSlave_in$D_OUT[5] ?
		 s_config_writeSlave_in$D_OUT[34:27] :
		 cycles_between[23:16],
	       s_config_writeSlave_in$D_OUT[4] ?
		 s_config_writeSlave_in$D_OUT[26:19] :
		 cycles_between[15:8],
	       s_config_writeSlave_in$D_OUT[3] ?
		 s_config_writeSlave_in$D_OUT[18:11] :
		 cycles_between[7:0] } ;
  assign MUX_cycles_last_request$write_1__VAL_1 =
	     { 32'd0, clkCntr - pc_start } ;
  assign MUX_cycles_last_request$write_1__VAL_2 =
	     { s_config_writeSlave_in$D_OUT[10] ?
		 s_config_writeSlave_in$D_OUT[74:67] :
		 cycles_last_request[63:56],
	       s_config_writeSlave_in$D_OUT[9] ?
		 s_config_writeSlave_in$D_OUT[66:59] :
		 cycles_last_request[55:48],
	       s_config_writeSlave_in$D_OUT[8] ?
		 s_config_writeSlave_in$D_OUT[58:51] :
		 cycles_last_request[47:40],
	       s_config_writeSlave_in$D_OUT[7] ?
		 s_config_writeSlave_in$D_OUT[50:43] :
		 cycles_last_request[39:32],
	       s_config_writeSlave_in$D_OUT[6] ?
		 s_config_writeSlave_in$D_OUT[42:35] :
		 cycles_last_request[31:24],
	       s_config_writeSlave_in$D_OUT[5] ?
		 s_config_writeSlave_in$D_OUT[34:27] :
		 cycles_last_request[23:16],
	       s_config_writeSlave_in$D_OUT[4] ?
		 s_config_writeSlave_in$D_OUT[26:19] :
		 cycles_last_request[15:8],
	       s_config_writeSlave_in$D_OUT[3] ?
		 s_config_writeSlave_in$D_OUT[18:11] :
		 cycles_last_request[7:0] } ;
  assign MUX_m_fpga_rd_task_data_output_reg$write_1__VAL_1 =
	     { m_fpga_rd_task_data_output_reg[76:65],
	       x_transfers_total__h58356,
	       m_fpga_rd_task_data_output_reg[6:0] } ;
  assign MUX_m_fpga_rd_task_data_requests_reg$write_1__VAL_1 =
	     { m_fpga_rd_task_data_requests_reg[133:126],
	       x_requests_total__h57906,
	       x_address__h57907,
	       m_fpga_rd_task_data_requests_reg[3:0] } ;
  assign MUX_m_fpga_wr_beatsThisRequestCntr$write_1__VAL_1 =
	     m_fpga_wr_beatsThisRequestCntr_21_EQ_m_fpga_wr_ETC___d923 ?
	       8'd0 :
	       beatsThisRequestCntrT__h43762 ;
  assign MUX_m_fpga_wr_task_data_output_reg$write_1__VAL_1 =
	     { m_fpga_wr_task_data_output_reg[76:65],
	       x_transfers_total__h54794,
	       m_fpga_wr_task_data_output_reg[6:1],
	       1'd0 } ;
  assign MUX_m_fpga_wr_task_data_requests_reg$write_1__VAL_1 =
	     { m_fpga_wr_task_data_requests_reg[133:126],
	       x_requests_total__h43359,
	       x_address__h43360,
	       m_fpga_wr_task_data_requests_reg[3:0] } ;
  assign MUX_m_pcie_rd_task_data_output_reg$write_1__VAL_1 =
	     { m_pcie_rd_task_data_output_reg[74:65],
	       x_transfers_total__h39153,
	       m_pcie_rd_task_data_output_reg[5:0] } ;
  assign MUX_m_pcie_rd_task_data_requests_reg$write_1__VAL_1 =
	     { m_pcie_rd_task_data_requests_reg[134:127],
	       x_requests_total__h38703,
	       x_address__h38704,
	       m_pcie_rd_task_data_requests_reg[3:0] } ;
  assign MUX_m_pcie_wr_beatsThisRequestCntr$write_1__VAL_1 =
	     m_pcie_wr_beatsThisRequestCntr_40_EQ_m_pcie_wr_ETC___d442 ?
	       8'd0 :
	       beatsThisRequestCntrT__h29964 ;
  assign MUX_m_pcie_wr_task_data_output_reg$write_1__VAL_1 =
	     { m_pcie_wr_task_data_output_reg[74:65],
	       x_transfers_total__h35588,
	       m_pcie_wr_task_data_output_reg[5:1],
	       1'd0 } ;
  assign MUX_m_pcie_wr_task_data_requests_reg$write_1__VAL_1 =
	     { m_pcie_wr_task_data_requests_reg[134:127],
	       x_requests_total__h29561,
	       x_address__h29562,
	       m_pcie_wr_task_data_requests_reg[3:0] } ;
  assign MUX_readConverter_byteCntr$write_1__VAL_2 =
	     readConverter_byteCntr - 64'd32 ;
  assign MUX_s_config_readSlave_out$enq_1__VAL_1 = { host_addr, 2'd0 } ;
  assign MUX_s_config_readSlave_out$enq_1__VAL_2 = { fpga_addr, 2'd0 } ;
  assign MUX_s_config_readSlave_out$enq_1__VAL_3 =
	     { cycles_last_request, 2'd0 } ;
  assign MUX_s_config_readSlave_out$enq_1__VAL_4 = { cycles_between, 2'd0 } ;
  assign MUX_s_config_readSlave_out$enq_1__VAL_5 =
	     { cycles_between_set, 2'd0 } ;
  assign MUX_s_config_readSlave_out$enq_1__VAL_6 = { id, 2'd0 } ;
  assign MUX_s_config_readSlave_out$enq_1__VAL_7 = { transfer_length, 2'd0 } ;
  assign MUX_s_config_readSlave_out$enq_1__VAL_8 = { read_requests, 2'd0 } ;
  assign MUX_s_config_readSlave_out$enq_1__VAL_9 = { write_requests, 2'd0 } ;
  assign MUX_writeConverter_byteCntr$write_1__VAL_2 =
	     writeConverter_byteCntr - 64'd32 ;
  assign MUX_writeConverter_wordInCntr$write_1__VAL_1 =
	     { 1'd0, writeConvBTT_ff$dD_OUT[0] } ;
  assign MUX_writeConverter_wordInCntr$write_1__VAL_2 =
	     (writeConverter_wordInCntr == 2'd1 ||
	      writeConverter_byteCntr <= 64'd32) ?
	       2'd0 :
	       writeConverter_wordInCntr + 2'd1 ;

  // inlined wires
  assign s_config_readIsHandled$whas =
	     WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_8 ||
	     WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_7 ||
	     WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_6 ||
	     WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_5 ||
	     WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_4 ||
	     WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_3 ||
	     WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_2 ||
	     WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_1 ||
	     WILL_FIRE_RL_s_config_axiReadSpecialIsHandled ;
  assign s_config_writeIsHandled$whas =
	     WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_6 ||
	     WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_4 ||
	     WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_3 ||
	     WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_2 ||
	     WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_1 ||
	     WILL_FIRE_RL_s_config_axiReadSpecialIsHandled ||
	     WILL_FIRE_RL_s_config_1_axiWriteSpecialIsHandled ;
  always@(m_pcie_wr_master_wr_in_addr$D_OUT)
  begin
    case (m_pcie_wr_master_wr_in_addr$D_OUT[15:12])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  m_pcie_wr_master_wr_wawcache$wget =
	      m_pcie_wr_master_wr_in_addr$D_OUT[15:12];
      default: m_pcie_wr_master_wr_wawcache$wget = 4'd15;
    endcase
  end
  always@(m_pcie_rd_master_rd_in$D_OUT)
  begin
    case (m_pcie_rd_master_rd_in$D_OUT[15:12])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  m_pcie_rd_master_rd_warcache$wget =
	      m_pcie_rd_master_rd_in$D_OUT[15:12];
      default: m_pcie_rd_master_rd_warcache$wget = 4'd11;
    endcase
  end
  always@(m_fpga_wr_master_wr_in_addr$D_OUT)
  begin
    case (m_fpga_wr_master_wr_in_addr$D_OUT[15:12])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  m_fpga_wr_master_wr_wawcache$wget =
	      m_fpga_wr_master_wr_in_addr$D_OUT[15:12];
      default: m_fpga_wr_master_wr_wawcache$wget = 4'd15;
    endcase
  end
  always@(m_fpga_rd_master_rd_in$D_OUT)
  begin
    case (m_fpga_rd_master_rd_in$D_OUT[15:12])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  m_fpga_rd_master_rd_warcache$wget =
	      m_fpga_rd_master_rd_in$D_OUT[15:12];
      default: m_fpga_rd_master_rd_warcache$wget = 4'd11;
    endcase
  end
  assign m_pcie_wr_master_wr_rinpkg$wget = { pcie_wr_bresp, pcie_wr_buser } ;
  assign m_pcie_rd_master_rd_rinpkg$wget =
	     { pcie_rd_rdata, pcie_rd_rresp, pcie_rd_rlast, pcie_rd_ruser } ;
  assign m_fpga_wr_master_wr_rinpkg$wget = { fpga_wr_bresp, fpga_wr_buser } ;
  assign m_fpga_rd_master_rd_rinpkg$wget =
	     { fpga_rd_rdata, fpga_rd_rresp, fpga_rd_rlast, fpga_rd_ruser } ;
  assign s_config_writeSlave_addrIn_rv$EN_port0__write =
	     !s_config_writeSlave_addrIn_rv[67] && S_AXI_awvalid ;
  assign s_config_writeSlave_addrIn_rv$port0__write_1 =
	     { 1'd1, S_AXI_awaddr, S_AXI_awprot } ;
  assign s_config_writeSlave_addrIn_rv$port1__read =
	     s_config_writeSlave_addrIn_rv$EN_port0__write ?
	       s_config_writeSlave_addrIn_rv$port0__write_1 :
	       s_config_writeSlave_addrIn_rv ;
  assign s_config_writeSlave_addrIn_rv$EN_port1__write =
	     s_config_writeSlave_addrIn_rv$port1__read[67] &&
	     s_config_writeSlave_dataIn_rv$port1__read[72] &&
	     s_config_writeSlave_in$FULL_N ;
  assign s_config_writeSlave_addrIn_rv$port2__read =
	     s_config_writeSlave_addrIn_rv$EN_port1__write ?
	       68'h2AAAAAAAAAAAAAAAA :
	       s_config_writeSlave_addrIn_rv$port1__read ;
  assign s_config_writeSlave_dataIn_rv$EN_port0__write =
	     !s_config_writeSlave_dataIn_rv[72] && S_AXI_wvalid ;
  assign s_config_writeSlave_dataIn_rv$port0__write_1 =
	     { 1'd1, S_AXI_wdata, S_AXI_wstrb } ;
  assign s_config_writeSlave_dataIn_rv$port1__read =
	     s_config_writeSlave_dataIn_rv$EN_port0__write ?
	       s_config_writeSlave_dataIn_rv$port0__write_1 :
	       s_config_writeSlave_dataIn_rv ;
  assign s_config_writeSlave_dataIn_rv$EN_port1__write =
	     s_config_writeSlave_addrIn_rv$port1__read[67] &&
	     s_config_writeSlave_dataIn_rv$port1__read[72] &&
	     s_config_writeSlave_in$FULL_N ;
  assign s_config_writeSlave_dataIn_rv$port2__read =
	     s_config_writeSlave_dataIn_rv$EN_port1__write ?
	       73'h0AAAAAAAAAAAAAAAAAA :
	       s_config_writeSlave_dataIn_rv$port1__read ;
  assign readIn_rv$port1__read =
	     WILL_FIRE_RL_handleRead ?
	       193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       readIn_rv ;
  assign readIn_rv$EN_port1__write =
	     cmdsIn$EMPTY_N && !readIn_rv$port1__read[192] && !cmdsIn$D_OUT ;
  assign readIn_rv$port1__write_1 =
	     { 1'd1, host_addr, fpga_addr, transfer_length } ;
  assign readIn_rv$port2__read =
	     readIn_rv$EN_port1__write ?
	       readIn_rv$port1__write_1 :
	       readIn_rv$port1__read ;
  assign writeIn_rv$port1__read =
	     WILL_FIRE_RL_handleWrite ?
	       193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       writeIn_rv ;
  assign writeIn_rv$EN_port1__write =
	     cmdsIn$EMPTY_N && !writeIn_rv$port1__read[192] && cmdsIn$D_OUT ;
  assign writeIn_rv$port2__read =
	     writeIn_rv$EN_port1__write ?
	       readIn_rv$port1__write_1 :
	       writeIn_rv$port1__read ;
  assign readConverter_bufferEmpty$EN_port0__write =
	     WILL_FIRE_RL_mkConnectionGetPut_2 &&
	     ({ 1'd0, readConverter_wordInCntr } == 2'd1 ||
	      readConverter_byteCntr <= 64'd32) ;
  assign readConverter_bufferEmpty$port1__read =
	     readConverter_bufferEmpty$EN_port0__write ||
	     readConverter_bufferEmpty ;
  assign readConverter_bufferEmpty$EN_port1__write =
	     WILL_FIRE_RL_mkConnectionGetPut_1 || readConvBTT_ff$dEMPTY_N ;
  assign readConverter_bufferEmpty$port2__read =
	     readConverter_bufferEmpty$EN_port1__write ?
	       !WILL_FIRE_RL_mkConnectionGetPut_1 :
	       readConverter_bufferEmpty$port1__read ;
  assign byteAlignerReader_buffer$EN_port0__write =
	     WILL_FIRE_RL_byteAlignerReader_forwardOutput ||
	     byteAlignerReader_addr_ff$dEMPTY_N ;
  assign byteAlignerReader_buffer$port0__write_1 =
	     WILL_FIRE_RL_byteAlignerReader_forwardOutput ?
	       MUX_byteAlignerReader_buffer$port0__write_1__VAL_1 :
	       512'd0 ;
  assign byteAlignerReader_buffer$port1__read =
	     byteAlignerReader_buffer$EN_port0__write ?
	       byteAlignerReader_buffer$port0__write_1 :
	       byteAlignerReader_buffer ;
  assign byteAlignerReader_buffer$port1__write_1 =
	     { byteAlignerReader_buffer$port1__read[511:256],
	       byteAlignerReader_incoming$D_OUT } ;
  assign byteAlignerReader_buffer$port2__read =
	     WILL_FIRE_RL_byteAlignerReader_fetchNewData ?
	       byteAlignerReader_buffer$port1__write_1 :
	       byteAlignerReader_buffer$port1__read ;
  assign byteAlignerReader_bytes_left_in_buffer$EN_port0__write =
	     WILL_FIRE_RL_byteAlignerReader_forwardOutput ||
	     byteAlignerReader_addr_ff$dEMPTY_N ;
  assign byteAlignerReader_bytes_left_in_buffer$port0__write_1 =
	     WILL_FIRE_RL_byteAlignerReader_forwardOutput ?
	       MUX_byteAlignerReader_bytes_left_in_buffer$port0__write_1__VAL_1 :
	       6'd0 ;
  assign byteAlignerReader_bytes_left_in_buffer$port1__write_1 =
	     b__h72232 + 6'd32 ;
  assign byteAlignerReader_bytes_left_in_buffer$port2__read =
	     WILL_FIRE_RL_byteAlignerReader_fetchNewData ?
	       byteAlignerReader_bytes_left_in_buffer$port1__write_1 :
	       b__h72232 ;
  assign byteAlignerReader_fetchedDatum$EN_port0__write =
	     byteAlignerReader_addr_ff$dEMPTY_N ||
	     !byteAlignerReader_addr_ff$dEMPTY_N &&
	     byteAlignerReader_fetchedDatum &&
	     byteAlignerReader_bytes_left_in_buffer_port0___ETC___d1447 ||
	     WILL_FIRE_RL_byteAlignerReader_forwardOutput ;
  assign byteAlignerReader_fetchedDatum$port1__read =
	     !byteAlignerReader_fetchedDatum$EN_port0__write &&
	     byteAlignerReader_fetchedDatum ;
  assign byteAlignerReader_fetchedDatum$port2__read =
	     WILL_FIRE_RL_byteAlignerReader_fetchNewData ||
	     byteAlignerReader_fetchedDatum$port1__read ;
  assign byteAlignerWriter_buffer$EN_port0__write =
	     WILL_FIRE_RL_byteAlignerWriter_forwardOutput ||
	     byteAlignerWriter_addr_ff$dEMPTY_N ;
  assign byteAlignerWriter_buffer$port0__write_1 =
	     WILL_FIRE_RL_byteAlignerWriter_forwardOutput ?
	       MUX_byteAlignerWriter_buffer$port0__write_1__VAL_1 :
	       512'd0 ;
  assign byteAlignerWriter_buffer$port1__read =
	     byteAlignerWriter_buffer$EN_port0__write ?
	       byteAlignerWriter_buffer$port0__write_1 :
	       byteAlignerWriter_buffer ;
  assign byteAlignerWriter_buffer$port1__write_1 =
	     { byteAlignerWriter_buffer$port1__read[511:256],
	       byteAlignerWriter_incoming$D_OUT } ;
  assign byteAlignerWriter_buffer$port2__read =
	     WILL_FIRE_RL_byteAlignerWriter_fetchNewData ?
	       byteAlignerWriter_buffer$port1__write_1 :
	       byteAlignerWriter_buffer$port1__read ;
  assign byteAlignerWriter_bytes_left_in_buffer$EN_port0__write =
	     WILL_FIRE_RL_byteAlignerWriter_forwardOutput ||
	     byteAlignerWriter_addr_ff$dEMPTY_N ;
  assign byteAlignerWriter_bytes_left_in_buffer$port0__write_1 =
	     WILL_FIRE_RL_byteAlignerWriter_forwardOutput ?
	       MUX_byteAlignerWriter_bytes_left_in_buffer$port0__write_1__VAL_1 :
	       6'd0 ;
  assign byteAlignerWriter_bytes_left_in_buffer$port1__write_1 =
	     b__h115415 + 6'd32 ;
  assign byteAlignerWriter_bytes_left_in_buffer$port2__read =
	     WILL_FIRE_RL_byteAlignerWriter_fetchNewData ?
	       byteAlignerWriter_bytes_left_in_buffer$port1__write_1 :
	       b__h115415 ;
  assign byteAlignerWriter_fetchedDatum$EN_port0__write =
	     byteAlignerWriter_addr_ff$dEMPTY_N ||
	     !byteAlignerWriter_addr_ff$dEMPTY_N &&
	     byteAlignerWriter_fetchedDatum &&
	     byteAlignerWriter_bytes_left_in_buffer_port0___ETC___d1569 ||
	     WILL_FIRE_RL_byteAlignerWriter_forwardOutput ;
  assign byteAlignerWriter_fetchedDatum$port1__read =
	     !byteAlignerWriter_fetchedDatum$EN_port0__write &&
	     byteAlignerWriter_fetchedDatum ;
  assign byteAlignerWriter_fetchedDatum$port2__read =
	     WILL_FIRE_RL_byteAlignerWriter_fetchNewData ||
	     byteAlignerWriter_fetchedDatum$port1__read ;

  // register byteAlignerReader_buffer
  assign byteAlignerReader_buffer$D_IN =
	     byteAlignerReader_buffer$port2__read ;
  assign byteAlignerReader_buffer$EN = 1'b1 ;

  // register byteAlignerReader_bytes_in
  assign byteAlignerReader_bytes_in$D_IN =
	     WILL_FIRE_RL_byteAlignerReader_fetchNewData ?
	       MUX_byteAlignerReader_bytes_in$write_1__VAL_1 :
	       64'd0 ;
  assign byteAlignerReader_bytes_in$EN =
	     WILL_FIRE_RL_byteAlignerReader_fetchNewData ||
	     byteAlignerReader_addr_ff$dEMPTY_N ;

  // register byteAlignerReader_bytes_left_in_buffer
  assign byteAlignerReader_bytes_left_in_buffer$D_IN =
	     byteAlignerReader_bytes_left_in_buffer$port2__read ;
  assign byteAlignerReader_bytes_left_in_buffer$EN = 1'b1 ;

  // register byteAlignerReader_bytes_out
  always@(WILL_FIRE_RL_byteAlignerReader_forwardOutput or
	  MUX_byteAlignerReader_bytes_out$write_1__VAL_1 or
	  WILL_FIRE_RL_byteAlignerReader_forwardOutputLast or
	  MUX_byteAlignerReader_bytes_out$write_1__VAL_2 or
	  byteAlignerReader_addr_ff$dEMPTY_N)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_byteAlignerReader_forwardOutput:
	  byteAlignerReader_bytes_out$D_IN =
	      MUX_byteAlignerReader_bytes_out$write_1__VAL_1;
      WILL_FIRE_RL_byteAlignerReader_forwardOutputLast:
	  byteAlignerReader_bytes_out$D_IN =
	      MUX_byteAlignerReader_bytes_out$write_1__VAL_2;
      byteAlignerReader_addr_ff$dEMPTY_N:
	  byteAlignerReader_bytes_out$D_IN = 64'd0;
      default: byteAlignerReader_bytes_out$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign byteAlignerReader_bytes_out$EN =
	     WILL_FIRE_RL_byteAlignerReader_forwardOutput ||
	     WILL_FIRE_RL_byteAlignerReader_forwardOutputLast ||
	     byteAlignerReader_addr_ff$dEMPTY_N ;

  // register byteAlignerReader_bytes_out_needed
  assign byteAlignerReader_bytes_out_needed$D_IN =
	     byteAlignerReader_addr_ff$dEMPTY_N ?
	       MUX_byteAlignerReader_bytes_out_needed$write_1__VAL_1 :
	       6'd32 ;
  assign byteAlignerReader_bytes_out_needed$EN =
	     byteAlignerReader_addr_ff$dEMPTY_N ||
	     WILL_FIRE_RL_byteAlignerReader_forwardOutput ;

  // register byteAlignerReader_bytes_total
  assign byteAlignerReader_bytes_total$D_IN =
	     byteAlignerReader_addr_ff$dD_OUT[63:0] ;
  assign byteAlignerReader_bytes_total$EN =
	     byteAlignerReader_addr_ff$dEMPTY_N ;

  // register byteAlignerReader_fetchedDatum
  assign byteAlignerReader_fetchedDatum$D_IN =
	     byteAlignerReader_fetchedDatum$port2__read ;
  assign byteAlignerReader_fetchedDatum$EN = 1'b1 ;

  // register byteAlignerWriter_buffer
  assign byteAlignerWriter_buffer$D_IN =
	     byteAlignerWriter_buffer$port2__read ;
  assign byteAlignerWriter_buffer$EN = 1'b1 ;

  // register byteAlignerWriter_bytes_in
  assign byteAlignerWriter_bytes_in$D_IN =
	     WILL_FIRE_RL_byteAlignerWriter_fetchNewData ?
	       MUX_byteAlignerWriter_bytes_in$write_1__VAL_1 :
	       64'd0 ;
  assign byteAlignerWriter_bytes_in$EN =
	     WILL_FIRE_RL_byteAlignerWriter_fetchNewData ||
	     byteAlignerWriter_addr_ff$dEMPTY_N ;

  // register byteAlignerWriter_bytes_left_in_buffer
  assign byteAlignerWriter_bytes_left_in_buffer$D_IN =
	     byteAlignerWriter_bytes_left_in_buffer$port2__read ;
  assign byteAlignerWriter_bytes_left_in_buffer$EN = 1'b1 ;

  // register byteAlignerWriter_bytes_out
  always@(WILL_FIRE_RL_byteAlignerWriter_forwardOutput or
	  MUX_byteAlignerWriter_bytes_out$write_1__VAL_1 or
	  WILL_FIRE_RL_byteAlignerWriter_forwardOutputLast or
	  MUX_byteAlignerWriter_bytes_out$write_1__VAL_2 or
	  byteAlignerWriter_addr_ff$dEMPTY_N)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_byteAlignerWriter_forwardOutput:
	  byteAlignerWriter_bytes_out$D_IN =
	      MUX_byteAlignerWriter_bytes_out$write_1__VAL_1;
      WILL_FIRE_RL_byteAlignerWriter_forwardOutputLast:
	  byteAlignerWriter_bytes_out$D_IN =
	      MUX_byteAlignerWriter_bytes_out$write_1__VAL_2;
      byteAlignerWriter_addr_ff$dEMPTY_N:
	  byteAlignerWriter_bytes_out$D_IN = 64'd0;
      default: byteAlignerWriter_bytes_out$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign byteAlignerWriter_bytes_out$EN =
	     WILL_FIRE_RL_byteAlignerWriter_forwardOutput ||
	     WILL_FIRE_RL_byteAlignerWriter_forwardOutputLast ||
	     byteAlignerWriter_addr_ff$dEMPTY_N ;

  // register byteAlignerWriter_bytes_out_needed
  assign byteAlignerWriter_bytes_out_needed$D_IN =
	     byteAlignerWriter_addr_ff$dEMPTY_N ?
	       MUX_byteAlignerWriter_bytes_out_needed$write_1__VAL_1 :
	       6'd32 ;
  assign byteAlignerWriter_bytes_out_needed$EN =
	     byteAlignerWriter_addr_ff$dEMPTY_N ||
	     WILL_FIRE_RL_byteAlignerWriter_forwardOutput ;

  // register byteAlignerWriter_bytes_total
  assign byteAlignerWriter_bytes_total$D_IN =
	     byteAlignerWriter_addr_ff$dD_OUT[63:0] ;
  assign byteAlignerWriter_bytes_total$EN =
	     byteAlignerWriter_addr_ff$dEMPTY_N ;

  // register byteAlignerWriter_fetchedDatum
  assign byteAlignerWriter_fetchedDatum$D_IN =
	     byteAlignerWriter_fetchedDatum$port2__read ;
  assign byteAlignerWriter_fetchedDatum$EN = 1'b1 ;

  // register clkCntr
  assign clkCntr$D_IN = clkCntr + 32'd1 ;
  assign clkCntr$EN = 1'd1 ;

  // register cycles_between
  assign cycles_between$D_IN =
	     MUX_cycles_between$write_1__SEL_1 ?
	       MUX_cycles_between$write_1__VAL_1 :
	       MUX_cycles_between$write_1__VAL_2 ;
  assign cycles_between$EN =
	     WILL_FIRE_RL_setInterrupt &&
	     pc_reqCntr_491_EQ_cycles_between_set_6_BITS_11_ETC___d1673 ||
	     WILL_FIRE_RL_s_config_1_axiWriteSpecial_4 ;

  // register cycles_between_set
  assign cycles_between_set$D_IN =
	     { s_config_writeSlave_in$D_OUT[10] ?
		 s_config_writeSlave_in$D_OUT[74:67] :
		 cycles_between_set[63:56],
	       s_config_writeSlave_in$D_OUT[9] ?
		 s_config_writeSlave_in$D_OUT[66:59] :
		 cycles_between_set[55:48],
	       s_config_writeSlave_in$D_OUT[8] ?
		 s_config_writeSlave_in$D_OUT[58:51] :
		 cycles_between_set[47:40],
	       s_config_writeSlave_in$D_OUT[7] ?
		 s_config_writeSlave_in$D_OUT[50:43] :
		 cycles_between_set[39:32],
	       s_config_writeSlave_in$D_OUT[6] ?
		 s_config_writeSlave_in$D_OUT[42:35] :
		 cycles_between_set[31:24],
	       s_config_writeSlave_in$D_OUT[5] ?
		 s_config_writeSlave_in$D_OUT[34:27] :
		 cycles_between_set[23:16],
	       s_config_writeSlave_in$D_OUT[4] ?
		 s_config_writeSlave_in$D_OUT[26:19] :
		 cycles_between_set[15:8],
	       s_config_writeSlave_in$D_OUT[3] ?
		 s_config_writeSlave_in$D_OUT[18:11] :
		 cycles_between_set[7:0] } ;
  assign cycles_between_set$EN = WILL_FIRE_RL_s_config_1_axiWriteSpecial_5 ;

  // register cycles_last_request
  assign cycles_last_request$D_IN =
	     WILL_FIRE_RL_setInterrupt ?
	       MUX_cycles_last_request$write_1__VAL_1 :
	       MUX_cycles_last_request$write_1__VAL_2 ;
  assign cycles_last_request$EN =
	     WILL_FIRE_RL_s_config_1_axiWriteSpecial_3 ||
	     WILL_FIRE_RL_setInterrupt ;

  // register doneInterruptReg
  assign doneInterruptReg$D_IN = WILL_FIRE_RL_setInterrupt ;
  assign doneInterruptReg$EN = 1'd1 ;

  // register fpgaLastCycle
  assign fpgaLastCycle$D_IN =
	     m_fpga_rd_task_data_output_reg[64:7] != 58'd0 ||
	     m_fpga_rd_task_data_requests_reg[125:68] != 58'd0 ||
	     m_fpga_wr_task_data_output_reg[64:7] != 58'd0 ||
	     m_fpga_wr_task_data_requests_reg[125:68] != 58'd0 ;
  assign fpgaLastCycle$EN = fpgaDone$sFULL_N ;

  // register fpga_addr
  assign fpga_addr$D_IN =
	     { s_config_writeSlave_in$D_OUT[10] ?
		 s_config_writeSlave_in$D_OUT[74:67] :
		 fpga_addr[63:56],
	       s_config_writeSlave_in$D_OUT[9] ?
		 s_config_writeSlave_in$D_OUT[66:59] :
		 fpga_addr[55:48],
	       s_config_writeSlave_in$D_OUT[8] ?
		 s_config_writeSlave_in$D_OUT[58:51] :
		 fpga_addr[47:40],
	       s_config_writeSlave_in$D_OUT[7] ?
		 s_config_writeSlave_in$D_OUT[50:43] :
		 fpga_addr[39:32],
	       s_config_writeSlave_in$D_OUT[6] ?
		 s_config_writeSlave_in$D_OUT[42:35] :
		 fpga_addr[31:24],
	       s_config_writeSlave_in$D_OUT[5] ?
		 s_config_writeSlave_in$D_OUT[34:27] :
		 fpga_addr[23:16],
	       s_config_writeSlave_in$D_OUT[4] ?
		 s_config_writeSlave_in$D_OUT[26:19] :
		 fpga_addr[15:8],
	       s_config_writeSlave_in$D_OUT[3] ?
		 s_config_writeSlave_in$D_OUT[18:11] :
		 fpga_addr[7:0] } ;
  assign fpga_addr$EN = WILL_FIRE_RL_s_config_1_axiWriteSpecial_2 ;

  // register host_addr
  assign host_addr$D_IN =
	     { s_config_writeSlave_in$D_OUT[10] ?
		 s_config_writeSlave_in$D_OUT[74:67] :
		 host_addr[63:56],
	       s_config_writeSlave_in$D_OUT[9] ?
		 s_config_writeSlave_in$D_OUT[66:59] :
		 host_addr[55:48],
	       s_config_writeSlave_in$D_OUT[8] ?
		 s_config_writeSlave_in$D_OUT[58:51] :
		 host_addr[47:40],
	       s_config_writeSlave_in$D_OUT[7] ?
		 s_config_writeSlave_in$D_OUT[50:43] :
		 host_addr[39:32],
	       s_config_writeSlave_in$D_OUT[6] ?
		 s_config_writeSlave_in$D_OUT[42:35] :
		 host_addr[31:24],
	       s_config_writeSlave_in$D_OUT[5] ?
		 s_config_writeSlave_in$D_OUT[34:27] :
		 host_addr[23:16],
	       s_config_writeSlave_in$D_OUT[4] ?
		 s_config_writeSlave_in$D_OUT[26:19] :
		 host_addr[15:8],
	       s_config_writeSlave_in$D_OUT[3] ?
		 s_config_writeSlave_in$D_OUT[18:11] :
		 host_addr[7:0] } ;
  assign host_addr$EN = WILL_FIRE_RL_s_config_1_axiWriteSpecial_1 ;

  // register id
  assign id$D_IN = 64'h0 ;
  assign id$EN = 1'b0 ;

  // register isWriteActive
  assign isWriteActive$D_IN = !WILL_FIRE_RL_handleRead ;
  assign isWriteActive$EN = MUX_opInProgress$write_1__SEL_2 ;

  // register m_fpga_rd_clkCntr
  assign m_fpga_rd_clkCntr$D_IN = m_fpga_rd_clkCntr + 32'd1 ;
  assign m_fpga_rd_clkCntr$EN = 1'd1 ;

  // register m_fpga_rd_lastPut
  assign m_fpga_rd_lastPut$D_IN = 32'h0 ;
  assign m_fpga_rd_lastPut$EN = 1'b0 ;

  // register m_fpga_rd_putDelay
  assign m_fpga_rd_putDelay$D_IN = 32'h0 ;
  assign m_fpga_rd_putDelay$EN = 1'b0 ;

  // register m_fpga_rd_task_data_output_reg
  assign m_fpga_rd_task_data_output_reg$D_IN =
	     WILL_FIRE_RL_m_fpga_rd_forwardData ?
	       MUX_m_fpga_rd_task_data_output_reg$write_1__VAL_1 :
	       m_fpga_rd_reqGen_outgoingBuffer$D_OUT[76:0] ;
  assign m_fpga_rd_task_data_output_reg$EN =
	     WILL_FIRE_RL_m_fpga_rd_forwardData ||
	     WILL_FIRE_RL_m_fpga_rd_fillBuffer ;

  // register m_fpga_rd_task_data_requests_reg
  assign m_fpga_rd_task_data_requests_reg$D_IN =
	     WILL_FIRE_RL_m_fpga_rd_placeRequest ?
	       MUX_m_fpga_rd_task_data_requests_reg$write_1__VAL_1 :
	       m_fpga_rd_reqGen_outgoingBuffer$D_OUT[210:77] ;
  assign m_fpga_rd_task_data_requests_reg$EN =
	     WILL_FIRE_RL_m_fpga_rd_placeRequest ||
	     WILL_FIRE_RL_m_fpga_rd_fillBuffer ;

  // register m_fpga_rd_totalPuts
  assign m_fpga_rd_totalPuts$D_IN = 32'h0 ;
  assign m_fpga_rd_totalPuts$EN = 1'b0 ;

  // register m_fpga_wr_beatsThisRequestCntr
  assign m_fpga_wr_beatsThisRequestCntr$D_IN =
	     WILL_FIRE_RL_m_fpga_wr_forwardData ?
	       MUX_m_fpga_wr_beatsThisRequestCntr$write_1__VAL_1 :
	       8'd0 ;
  assign m_fpga_wr_beatsThisRequestCntr$EN =
	     WILL_FIRE_RL_m_fpga_wr_forwardData ||
	     WILL_FIRE_RL_m_fpga_wr_fillBuffer ;

  // register m_fpga_wr_clkCntr
  assign m_fpga_wr_clkCntr$D_IN = m_fpga_wr_clkCntr + 32'd1 ;
  assign m_fpga_wr_clkCntr$EN = 1'd1 ;

  // register m_fpga_wr_lastPut
  assign m_fpga_wr_lastPut$D_IN = 32'h0 ;
  assign m_fpga_wr_lastPut$EN = 1'b0 ;

  // register m_fpga_wr_putDelay
  assign m_fpga_wr_putDelay$D_IN = 32'h0 ;
  assign m_fpga_wr_putDelay$EN = 1'b0 ;

  // register m_fpga_wr_task_data_output_reg
  assign m_fpga_wr_task_data_output_reg$D_IN =
	     WILL_FIRE_RL_m_fpga_wr_forwardData ?
	       MUX_m_fpga_wr_task_data_output_reg$write_1__VAL_1 :
	       m_fpga_wr_reqGen_outgoingBuffer$D_OUT[76:0] ;
  assign m_fpga_wr_task_data_output_reg$EN =
	     WILL_FIRE_RL_m_fpga_wr_forwardData ||
	     WILL_FIRE_RL_m_fpga_wr_fillBuffer ;

  // register m_fpga_wr_task_data_requests_reg
  assign m_fpga_wr_task_data_requests_reg$D_IN =
	     WILL_FIRE_RL_m_fpga_wr_placeRequest ?
	       MUX_m_fpga_wr_task_data_requests_reg$write_1__VAL_1 :
	       m_fpga_wr_reqGen_outgoingBuffer$D_OUT[210:77] ;
  assign m_fpga_wr_task_data_requests_reg$EN =
	     WILL_FIRE_RL_m_fpga_wr_placeRequest ||
	     WILL_FIRE_RL_m_fpga_wr_fillBuffer ;

  // register m_fpga_wr_totalPuts
  assign m_fpga_wr_totalPuts$D_IN = 32'h0 ;
  assign m_fpga_wr_totalPuts$EN = 1'b0 ;

  // register m_pcie_rd_clkCntr
  assign m_pcie_rd_clkCntr$D_IN = m_pcie_rd_clkCntr + 32'd1 ;
  assign m_pcie_rd_clkCntr$EN = 1'd1 ;

  // register m_pcie_rd_lastPut
  assign m_pcie_rd_lastPut$D_IN = 32'h0 ;
  assign m_pcie_rd_lastPut$EN = 1'b0 ;

  // register m_pcie_rd_putDelay
  assign m_pcie_rd_putDelay$D_IN = 32'h0 ;
  assign m_pcie_rd_putDelay$EN = 1'b0 ;

  // register m_pcie_rd_task_data_output_reg
  assign m_pcie_rd_task_data_output_reg$D_IN =
	     WILL_FIRE_RL_m_pcie_rd_forwardData ?
	       MUX_m_pcie_rd_task_data_output_reg$write_1__VAL_1 :
	       m_pcie_rd_reqGen_outgoingBuffer$D_OUT[74:0] ;
  assign m_pcie_rd_task_data_output_reg$EN =
	     WILL_FIRE_RL_m_pcie_rd_forwardData ||
	     WILL_FIRE_RL_m_pcie_rd_fillBuffer ;

  // register m_pcie_rd_task_data_requests_reg
  assign m_pcie_rd_task_data_requests_reg$D_IN =
	     WILL_FIRE_RL_m_pcie_rd_placeRequest ?
	       MUX_m_pcie_rd_task_data_requests_reg$write_1__VAL_1 :
	       m_pcie_rd_reqGen_outgoingBuffer$D_OUT[209:75] ;
  assign m_pcie_rd_task_data_requests_reg$EN =
	     WILL_FIRE_RL_m_pcie_rd_placeRequest ||
	     WILL_FIRE_RL_m_pcie_rd_fillBuffer ;

  // register m_pcie_rd_totalPuts
  assign m_pcie_rd_totalPuts$D_IN = 32'h0 ;
  assign m_pcie_rd_totalPuts$EN = 1'b0 ;

  // register m_pcie_wr_beatsThisRequestCntr
  assign m_pcie_wr_beatsThisRequestCntr$D_IN =
	     WILL_FIRE_RL_m_pcie_wr_forwardData ?
	       MUX_m_pcie_wr_beatsThisRequestCntr$write_1__VAL_1 :
	       8'd0 ;
  assign m_pcie_wr_beatsThisRequestCntr$EN =
	     WILL_FIRE_RL_m_pcie_wr_forwardData ||
	     WILL_FIRE_RL_m_pcie_wr_fillBuffer ;

  // register m_pcie_wr_clkCntr
  assign m_pcie_wr_clkCntr$D_IN = m_pcie_wr_clkCntr + 32'd1 ;
  assign m_pcie_wr_clkCntr$EN = 1'd1 ;

  // register m_pcie_wr_lastPut
  assign m_pcie_wr_lastPut$D_IN = 32'h0 ;
  assign m_pcie_wr_lastPut$EN = 1'b0 ;

  // register m_pcie_wr_putDelay
  assign m_pcie_wr_putDelay$D_IN = 32'h0 ;
  assign m_pcie_wr_putDelay$EN = 1'b0 ;

  // register m_pcie_wr_task_data_output_reg
  assign m_pcie_wr_task_data_output_reg$D_IN =
	     WILL_FIRE_RL_m_pcie_wr_forwardData ?
	       MUX_m_pcie_wr_task_data_output_reg$write_1__VAL_1 :
	       m_pcie_wr_reqGen_outgoingBuffer$D_OUT[74:0] ;
  assign m_pcie_wr_task_data_output_reg$EN =
	     WILL_FIRE_RL_m_pcie_wr_forwardData ||
	     WILL_FIRE_RL_m_pcie_wr_fillBuffer ;

  // register m_pcie_wr_task_data_requests_reg
  assign m_pcie_wr_task_data_requests_reg$D_IN =
	     WILL_FIRE_RL_m_pcie_wr_placeRequest ?
	       MUX_m_pcie_wr_task_data_requests_reg$write_1__VAL_1 :
	       m_pcie_wr_reqGen_outgoingBuffer$D_OUT[209:75] ;
  assign m_pcie_wr_task_data_requests_reg$EN =
	     WILL_FIRE_RL_m_pcie_wr_placeRequest ||
	     WILL_FIRE_RL_m_pcie_wr_fillBuffer ;

  // register m_pcie_wr_totalPuts
  assign m_pcie_wr_totalPuts$D_IN = 32'h0 ;
  assign m_pcie_wr_totalPuts$EN = 1'b0 ;

  // register opInProgress
  assign opInProgress$D_IN = !WILL_FIRE_RL_setInterrupt ;
  assign opInProgress$EN =
	     WILL_FIRE_RL_setInterrupt || WILL_FIRE_RL_handleRead ||
	     WILL_FIRE_RL_handleWrite ;

  // register pc_betweenStart
  assign pc_betweenStart$D_IN = clkCntr ;
  assign pc_betweenStart$EN =
	     MUX_opInProgress$write_1__SEL_2 && pc_reqCntr == 12'd0 ;

  // register pc_reqCntr
  assign pc_reqCntr$D_IN =
	     pc_reqCntr_491_EQ_cycles_between_set_6_BITS_11_ETC___d1673 ?
	       12'd0 :
	       pc_reqCntr + 12'd1 ;
  assign pc_reqCntr$EN = WILL_FIRE_RL_setInterrupt ;

  // register pc_start
  assign pc_start$D_IN = clkCntr ;
  assign pc_start$EN = MUX_opInProgress$write_1__SEL_2 ;

  // register pcieLastCycle
  assign pcieLastCycle$D_IN =
	     m_pcie_rd_task_data_output_reg[64:6] != 59'd0 ||
	     m_pcie_rd_task_data_requests_reg[126:68] != 59'd0 ||
	     m_pcie_wr_task_data_output_reg[64:6] != 59'd0 ||
	     m_pcie_wr_task_data_requests_reg[126:68] != 59'd0 ;
  assign pcieLastCycle$EN = pcieDone$sFULL_N ;

  // register readConverter_buffer
  assign readConverter_buffer$D_IN = fpga_response_converter$dD_OUT ;
  assign readConverter_buffer$EN = WILL_FIRE_RL_mkConnectionGetPut_1 ;

  // register readConverter_bufferEmpty
  assign readConverter_bufferEmpty$D_IN =
	     readConverter_bufferEmpty$port2__read ;
  assign readConverter_bufferEmpty$EN = 1'b1 ;

  // register readConverter_byteCntr
  assign readConverter_byteCntr$D_IN =
	     readConvBTT_ff$dEMPTY_N ?
	       readConvBTT_ff$dD_OUT[64:1] :
	       MUX_readConverter_byteCntr$write_1__VAL_2 ;
  assign readConverter_byteCntr$EN =
	     readConvBTT_ff$dEMPTY_N || WILL_FIRE_RL_mkConnectionGetPut_2 ;

  // register readConverter_wordInCntr
  assign readConverter_wordInCntr$D_IN =
	     readConvBTT_ff$dEMPTY_N ?
	       readConvBTT_ff$dD_OUT[0] :
	       IF_0_CONCAT_readConverter_wordInCntr_EQ_1_OR_r_ETC__q1[0] ;
  assign readConverter_wordInCntr$EN =
	     readConvBTT_ff$dEMPTY_N || WILL_FIRE_RL_mkConnectionGetPut_2 ;

  // register readIn_rv
  assign readIn_rv$D_IN = readIn_rv$port2__read ;
  assign readIn_rv$EN = 1'b1 ;

  // register read_requests
  assign read_requests$D_IN = read_requests + 64'd1 ;
  assign read_requests$EN = WILL_FIRE_RL_handleRead ;

  // register s_config_readBusy
  assign s_config_readBusy$D_IN = 1'b0 ;
  assign s_config_readBusy$EN = 1'b0 ;

  // register s_config_writeSlave_addrIn_rv
  assign s_config_writeSlave_addrIn_rv$D_IN =
	     s_config_writeSlave_addrIn_rv$port2__read ;
  assign s_config_writeSlave_addrIn_rv$EN = 1'b1 ;

  // register s_config_writeSlave_dataIn_rv
  assign s_config_writeSlave_dataIn_rv$D_IN =
	     s_config_writeSlave_dataIn_rv$port2__read ;
  assign s_config_writeSlave_dataIn_rv$EN = 1'b1 ;

  // register transfer_length
  assign transfer_length$D_IN =
	     { s_config_writeSlave_in$D_OUT[10] ?
		 s_config_writeSlave_in$D_OUT[74:67] :
		 transfer_length[63:56],
	       s_config_writeSlave_in$D_OUT[9] ?
		 s_config_writeSlave_in$D_OUT[66:59] :
		 transfer_length[55:48],
	       s_config_writeSlave_in$D_OUT[8] ?
		 s_config_writeSlave_in$D_OUT[58:51] :
		 transfer_length[47:40],
	       s_config_writeSlave_in$D_OUT[7] ?
		 s_config_writeSlave_in$D_OUT[50:43] :
		 transfer_length[39:32],
	       s_config_writeSlave_in$D_OUT[6] ?
		 s_config_writeSlave_in$D_OUT[42:35] :
		 transfer_length[31:24],
	       s_config_writeSlave_in$D_OUT[5] ?
		 s_config_writeSlave_in$D_OUT[34:27] :
		 transfer_length[23:16],
	       s_config_writeSlave_in$D_OUT[4] ?
		 s_config_writeSlave_in$D_OUT[26:19] :
		 transfer_length[15:8],
	       s_config_writeSlave_in$D_OUT[3] ?
		 s_config_writeSlave_in$D_OUT[18:11] :
		 transfer_length[7:0] } ;
  assign transfer_length$EN = WILL_FIRE_RL_s_config_1_axiWriteSpecial_6 ;

  // register writeConverter_buffer_0
  assign writeConverter_buffer_0$D_IN = m_pcie_rd_outgoingBuffer$D_OUT ;
  assign writeConverter_buffer_0$EN =
	     WILL_FIRE_RL_mkConnectionGetPut_3 &&
	     writeConverter_wordInCntr == 2'd0 ;

  // register writeConverter_byteCntr
  assign writeConverter_byteCntr$D_IN =
	     writeConvBTT_ff$dEMPTY_N ?
	       writeConvBTT_ff$dD_OUT[64:1] :
	       MUX_writeConverter_byteCntr$write_1__VAL_2 ;
  assign writeConverter_byteCntr$EN =
	     writeConvBTT_ff$dEMPTY_N || WILL_FIRE_RL_mkConnectionGetPut_3 ;

  // register writeConverter_wordInCntr
  assign writeConverter_wordInCntr$D_IN =
	     writeConvBTT_ff$dEMPTY_N ?
	       MUX_writeConverter_wordInCntr$write_1__VAL_1 :
	       MUX_writeConverter_wordInCntr$write_1__VAL_2 ;
  assign writeConverter_wordInCntr$EN =
	     writeConvBTT_ff$dEMPTY_N || WILL_FIRE_RL_mkConnectionGetPut_3 ;

  // register writeIn_rv
  assign writeIn_rv$D_IN = writeIn_rv$port2__read ;
  assign writeIn_rv$EN = 1'b1 ;

  // register write_requests
  assign write_requests$D_IN = write_requests + 64'd1 ;
  assign write_requests$EN = WILL_FIRE_RL_handleWrite ;

  // submodule byteAlignerReader_addr_ff
  assign byteAlignerReader_addr_ff$sD_IN = 192'h0 ;
  assign byteAlignerReader_addr_ff$sENQ = 1'b0 ;
  assign byteAlignerReader_addr_ff$dDEQ = byteAlignerReader_addr_ff$dEMPTY_N ;

  // submodule byteAlignerReader_incoming
  assign byteAlignerReader_incoming$D_IN = 256'h0 ;
  assign byteAlignerReader_incoming$ENQ = 1'b0 ;
  assign byteAlignerReader_incoming$DEQ =
	     WILL_FIRE_RL_byteAlignerReader_fetchNewData ;
  assign byteAlignerReader_incoming$CLR = 1'b0 ;

  // submodule byteAlignerReader_outgoing
  assign byteAlignerReader_outgoing$D_IN = byteAlignerReader_buffer[255:0] ;
  assign byteAlignerReader_outgoing$ENQ =
	     WILL_FIRE_RL_byteAlignerReader_forwardOutputLast ||
	     WILL_FIRE_RL_byteAlignerReader_forwardOutput ;
  assign byteAlignerReader_outgoing$DEQ = 1'b0 ;
  assign byteAlignerReader_outgoing$CLR = 1'b0 ;

  // submodule byteAlignerWriter_addr_ff
  assign byteAlignerWriter_addr_ff$sD_IN = 192'h0 ;
  assign byteAlignerWriter_addr_ff$sENQ = 1'b0 ;
  assign byteAlignerWriter_addr_ff$dDEQ = byteAlignerWriter_addr_ff$dEMPTY_N ;

  // submodule byteAlignerWriter_incoming
  assign byteAlignerWriter_incoming$D_IN = 256'h0 ;
  assign byteAlignerWriter_incoming$ENQ = 1'b0 ;
  assign byteAlignerWriter_incoming$DEQ =
	     WILL_FIRE_RL_byteAlignerWriter_fetchNewData ;
  assign byteAlignerWriter_incoming$CLR = 1'b0 ;

  // submodule byteAlignerWriter_outgoing
  assign byteAlignerWriter_outgoing$D_IN = byteAlignerWriter_buffer[255:0] ;
  assign byteAlignerWriter_outgoing$ENQ =
	     WILL_FIRE_RL_byteAlignerWriter_forwardOutputLast ||
	     WILL_FIRE_RL_byteAlignerWriter_forwardOutput ;
  assign byteAlignerWriter_outgoing$DEQ = 1'b0 ;
  assign byteAlignerWriter_outgoing$CLR = 1'b0 ;

  // submodule cmdsIn
  assign cmdsIn$D_IN =
	     s_config_writeSlave_in$D_OUT[74:11] != 64'h0000000010001000 ;
  assign cmdsIn$ENQ =
	     WILL_FIRE_RL_s_config_1_axiWriteSpecial &&
	     (s_config_writeSlave_in$D_OUT[74:11] == 64'h0000000010001000 ||
	      s_config_writeSlave_in$D_OUT[74:11] == 64'h0000000010000001) ;
  assign cmdsIn$DEQ =
	     cmdsIn$EMPTY_N && !writeIn_rv$port1__read[192] && cmdsIn$D_OUT ||
	     cmdsIn$EMPTY_N && !readIn_rv$port1__read[192] && !cmdsIn$D_OUT ;
  assign cmdsIn$CLR = 1'b0 ;

  // submodule fpgaDone
  assign fpgaDone$sD_IN = 1'd1 ;
  assign fpgaDone$sENQ =
	     fpgaDone$sFULL_N &&
	     fpgaLastCycle_662_AND_m_fpga_rd_task_data_outp_ETC___d1664 ;
  assign fpgaDone$dDEQ = WILL_FIRE_RL_setInterrupt ;

  // submodule fpga_request_converter
  assign fpga_request_converter$sD_IN = writeConverter_dataSync$D_OUT ;
  assign fpga_request_converter$sENQ =
	     fpga_request_converter$sFULL_N &&
	     writeConverter_dataSync$EMPTY_N ;
  assign fpga_request_converter$dDEQ =
	     fpga_request_converter$dEMPTY_N &&
	     m_fpga_wr_incomingBuffer$FULL_N ;

  // submodule fpga_response_converter
  assign fpga_response_converter$sD_IN = m_fpga_rd_outgoingBuffer$D_OUT ;
  assign fpga_response_converter$sENQ =
	     fpga_response_converter$sFULL_N &&
	     m_fpga_rd_outgoingBuffer$EMPTY_N ;
  assign fpga_response_converter$dDEQ = WILL_FIRE_RL_mkConnectionGetPut_1 ;

  // submodule m_fpga_rd_master_rd_in
  assign m_fpga_rd_master_rd_in$D_IN =
	     { m_fpga_rd_task_data_requests_reg[67:4],
	       (m_fpga_rd_task_data_requests_reg[125:68] == 58'd1 &&
		m_fpga_rd_task_data_requests_reg[133:126] != 8'd0) ?
		 beatsThisRequest___1__h57878 :
		 8'd255,
	       17'd102784,
	       m_fpga_rd_task_data_requests_reg[3:0],
	       1'd0 } ;
  assign m_fpga_rd_master_rd_in$ENQ = WILL_FIRE_RL_m_fpga_rd_placeRequest ;
  assign m_fpga_rd_master_rd_in$DEQ =
	     m_fpga_rd_master_rd_in$EMPTY_N && fpga_rd_arready ;
  assign m_fpga_rd_master_rd_in$CLR = 1'b0 ;

  // submodule m_fpga_rd_master_rd_out
  assign m_fpga_rd_master_rd_out$D_IN = m_fpga_rd_master_rd_rinpkg$wget ;
  assign m_fpga_rd_master_rd_out$ENQ =
	     m_fpga_rd_master_rd_out$FULL_N && fpga_rd_rvalid ;
  assign m_fpga_rd_master_rd_out$DEQ = WILL_FIRE_RL_m_fpga_rd_forwardData ;
  assign m_fpga_rd_master_rd_out$CLR = 1'b0 ;

  // submodule m_fpga_rd_outgoingBuffer
  assign m_fpga_rd_outgoingBuffer$D_IN =
	     m_fpga_rd_master_rd_out$D_OUT[515:4] ;
  assign m_fpga_rd_outgoingBuffer$ENQ = WILL_FIRE_RL_m_fpga_rd_forwardData ;
  assign m_fpga_rd_outgoingBuffer$DEQ =
	     fpga_response_converter$sFULL_N &&
	     m_fpga_rd_outgoingBuffer$EMPTY_N ;
  assign m_fpga_rd_outgoingBuffer$CLR = 1'b0 ;

  // submodule m_fpga_rd_reqGen_incomingBuffer
  assign m_fpga_rd_reqGen_incomingBuffer$D_IN =
	     mclk_m_fpga_put_req_rd_ff$dD_OUT ;
  assign m_fpga_rd_reqGen_incomingBuffer$ENQ =
	     mclk_m_fpga_put_req_rd_ff$dEMPTY_N &&
	     m_fpga_rd_reqGen_incomingBuffer$FULL_N ;
  assign m_fpga_rd_reqGen_incomingBuffer$DEQ =
	     m_fpga_rd_reqGen_incomingBuffer$EMPTY_N &&
	     m_fpga_rd_reqGen_intermediateBuffer$FULL_N ;
  assign m_fpga_rd_reqGen_incomingBuffer$CLR = 1'b0 ;

  // submodule m_fpga_rd_reqGen_intermediateBuffer
  assign m_fpga_rd_reqGen_intermediateBuffer$D_IN =
	     { x__h55481[5:0],
	       m_fpga_rd_reqGen_incomingBufferD_OUT_BITS_67__ETC__q6[5:0],
	       m_fpga_rd_reqGen_incomingBuffer$D_OUT } ;
  assign m_fpga_rd_reqGen_intermediateBuffer$ENQ =
	     m_fpga_rd_reqGen_incomingBuffer$EMPTY_N &&
	     m_fpga_rd_reqGen_intermediateBuffer$FULL_N ;
  assign m_fpga_rd_reqGen_intermediateBuffer$DEQ =
	     m_fpga_rd_reqGen_intermediateBuffer$EMPTY_N &&
	     m_fpga_rd_reqGen_intermediateBuffer2$FULL_N ;
  assign m_fpga_rd_reqGen_intermediateBuffer$CLR = 1'b0 ;

  // submodule m_fpga_rd_reqGen_intermediateBuffer2
  assign m_fpga_rd_reqGen_intermediateBuffer2$D_IN =
	     { m_fpga_rd_reqGen_intermediateBuffer$D_OUT[143:132],
	       x__h55662[57:0],
	       m_fpga_rd_reqGen_intermediateBuffer$D_OUT[131:0] } ;
  assign m_fpga_rd_reqGen_intermediateBuffer2$ENQ =
	     m_fpga_rd_reqGen_intermediateBuffer$EMPTY_N &&
	     m_fpga_rd_reqGen_intermediateBuffer2$FULL_N ;
  assign m_fpga_rd_reqGen_intermediateBuffer2$DEQ =
	     WILL_FIRE_RL_m_fpga_rd_reqGen_finishRequest ;
  assign m_fpga_rd_reqGen_intermediateBuffer2$CLR = 1'b0 ;

  // submodule m_fpga_rd_reqGen_outgoingBuffer
  assign m_fpga_rd_reqGen_outgoingBuffer$D_IN =
	     { m_fpga_rd_reqGen_intermediateBuffer2$D_OUT[139:132],
	       request_data_requests_total__h55799,
	       request_data_address__h55800,
	       m_fpga_rd_reqGen_intermediateBuffer2$D_OUT[3:0],
	       m_fpga_rd_reqGen_intermediateBuffer2$D_OUT[201:132],
	       m_fpga_rd_reqGen_intermediateBuffer2$D_OUT[73:68],
	       1'd1 } ;
  assign m_fpga_rd_reqGen_outgoingBuffer$ENQ =
	     WILL_FIRE_RL_m_fpga_rd_reqGen_finishRequest ;
  assign m_fpga_rd_reqGen_outgoingBuffer$DEQ =
	     WILL_FIRE_RL_m_fpga_rd_fillBuffer ;
  assign m_fpga_rd_reqGen_outgoingBuffer$CLR = 1'b0 ;

  // submodule m_fpga_wr_beatsPerRequestFIFO
  assign m_fpga_wr_beatsPerRequestFIFO$D_IN = _theResult____h43254 ;
  assign m_fpga_wr_beatsPerRequestFIFO$ENQ =
	     WILL_FIRE_RL_m_fpga_wr_placeRequest ;
  assign m_fpga_wr_beatsPerRequestFIFO$DEQ =
	     WILL_FIRE_RL_m_fpga_wr_forwardData &&
	     m_fpga_wr_beatsThisRequestCntr_21_EQ_m_fpga_wr_ETC___d923 ;
  assign m_fpga_wr_beatsPerRequestFIFO$CLR = 1'b0 ;

  // submodule m_fpga_wr_incomingBuffer
  assign m_fpga_wr_incomingBuffer$D_IN = fpga_request_converter$dD_OUT ;
  assign m_fpga_wr_incomingBuffer$ENQ =
	     fpga_request_converter$dEMPTY_N &&
	     m_fpga_wr_incomingBuffer$FULL_N ;
  assign m_fpga_wr_incomingBuffer$DEQ = WILL_FIRE_RL_m_fpga_wr_forwardData ;
  assign m_fpga_wr_incomingBuffer$CLR = 1'b0 ;

  // submodule m_fpga_wr_master_wr_in_addr
  assign m_fpga_wr_master_wr_in_addr$D_IN =
	     { m_fpga_wr_task_data_requests_reg[67:4],
	       _theResult____h43254,
	       17'd102784,
	       m_fpga_wr_task_data_requests_reg[3:0],
	       1'd0 } ;
  assign m_fpga_wr_master_wr_in_addr$ENQ =
	     WILL_FIRE_RL_m_fpga_wr_placeRequest ;
  assign m_fpga_wr_master_wr_in_addr$DEQ =
	     m_fpga_wr_master_wr_in_addr$EMPTY_N && fpga_wr_awready ;
  assign m_fpga_wr_master_wr_in_addr$CLR = 1'b0 ;

  // submodule m_fpga_wr_master_wr_in_data
  assign m_fpga_wr_master_wr_in_data$D_IN =
	     { m_fpga_wr_incomingBuffer$D_OUT,
	       x_strb__h43876,
	       m_fpga_wr_beatsThisRequestCntr_21_EQ_m_fpga_wr_ETC___d923,
	       1'd0 } ;
  assign m_fpga_wr_master_wr_in_data$ENQ =
	     WILL_FIRE_RL_m_fpga_wr_forwardData ;
  assign m_fpga_wr_master_wr_in_data$DEQ =
	     m_fpga_wr_master_wr_in_data$EMPTY_N && fpga_wr_wready ;
  assign m_fpga_wr_master_wr_in_data$CLR = 1'b0 ;

  // submodule m_fpga_wr_master_wr_out
  assign m_fpga_wr_master_wr_out$D_IN = m_fpga_wr_master_wr_rinpkg$wget ;
  assign m_fpga_wr_master_wr_out$ENQ =
	     m_fpga_wr_master_wr_out$FULL_N && fpga_wr_bvalid ;
  assign m_fpga_wr_master_wr_out$DEQ = m_fpga_wr_master_wr_out$EMPTY_N ;
  assign m_fpga_wr_master_wr_out$CLR = 1'b0 ;

  // submodule m_fpga_wr_reqGen_incomingBuffer
  assign m_fpga_wr_reqGen_incomingBuffer$D_IN =
	     mclk_m_fpga_put_req_wr_ff$dD_OUT ;
  assign m_fpga_wr_reqGen_incomingBuffer$ENQ =
	     mclk_m_fpga_put_req_wr_ff$dEMPTY_N &&
	     m_fpga_wr_reqGen_incomingBuffer$FULL_N ;
  assign m_fpga_wr_reqGen_incomingBuffer$DEQ =
	     m_fpga_wr_reqGen_incomingBuffer$EMPTY_N &&
	     m_fpga_wr_reqGen_intermediateBuffer$FULL_N ;
  assign m_fpga_wr_reqGen_incomingBuffer$CLR = 1'b0 ;

  // submodule m_fpga_wr_reqGen_intermediateBuffer
  assign m_fpga_wr_reqGen_intermediateBuffer$D_IN =
	     { x__h40149[5:0],
	       m_fpga_wr_reqGen_incomingBufferD_OUT_BITS_67__ETC__q7[5:0],
	       m_fpga_wr_reqGen_incomingBuffer$D_OUT } ;
  assign m_fpga_wr_reqGen_intermediateBuffer$ENQ =
	     m_fpga_wr_reqGen_incomingBuffer$EMPTY_N &&
	     m_fpga_wr_reqGen_intermediateBuffer$FULL_N ;
  assign m_fpga_wr_reqGen_intermediateBuffer$DEQ =
	     m_fpga_wr_reqGen_intermediateBuffer$EMPTY_N &&
	     m_fpga_wr_reqGen_intermediateBuffer2$FULL_N ;
  assign m_fpga_wr_reqGen_intermediateBuffer$CLR = 1'b0 ;

  // submodule m_fpga_wr_reqGen_intermediateBuffer2
  assign m_fpga_wr_reqGen_intermediateBuffer2$D_IN =
	     { m_fpga_wr_reqGen_intermediateBuffer$D_OUT[143:132],
	       x__h40330[57:0],
	       m_fpga_wr_reqGen_intermediateBuffer$D_OUT[131:0] } ;
  assign m_fpga_wr_reqGen_intermediateBuffer2$ENQ =
	     m_fpga_wr_reqGen_intermediateBuffer$EMPTY_N &&
	     m_fpga_wr_reqGen_intermediateBuffer2$FULL_N ;
  assign m_fpga_wr_reqGen_intermediateBuffer2$DEQ =
	     WILL_FIRE_RL_m_fpga_wr_reqGen_finishRequest ;
  assign m_fpga_wr_reqGen_intermediateBuffer2$CLR = 1'b0 ;

  // submodule m_fpga_wr_reqGen_outgoingBuffer
  assign m_fpga_wr_reqGen_outgoingBuffer$D_IN =
	     { m_fpga_wr_reqGen_intermediateBuffer2$D_OUT[139:132],
	       request_data_requests_total__h40467,
	       request_data_address__h40468,
	       m_fpga_wr_reqGen_intermediateBuffer2$D_OUT[3:0],
	       m_fpga_wr_reqGen_intermediateBuffer2$D_OUT[201:132],
	       m_fpga_wr_reqGen_intermediateBuffer2$D_OUT[73:68],
	       1'd1 } ;
  assign m_fpga_wr_reqGen_outgoingBuffer$ENQ =
	     WILL_FIRE_RL_m_fpga_wr_reqGen_finishRequest ;
  assign m_fpga_wr_reqGen_outgoingBuffer$DEQ =
	     WILL_FIRE_RL_m_fpga_wr_fillBuffer ;
  assign m_fpga_wr_reqGen_outgoingBuffer$CLR = 1'b0 ;

  // submodule m_pcie_rd_master_rd_in
  assign m_pcie_rd_master_rd_in$D_IN =
	     { m_pcie_rd_task_data_requests_reg[67:4],
	       (m_pcie_rd_task_data_requests_reg[126:68] == 59'd1 &&
		m_pcie_rd_task_data_requests_reg[134:127] != 8'd0) ?
		 beatsThisRequest___1__h38675 :
		 8'd63,
	       17'd86400,
	       m_pcie_rd_task_data_requests_reg[3:0],
	       1'd0 } ;
  assign m_pcie_rd_master_rd_in$ENQ = WILL_FIRE_RL_m_pcie_rd_placeRequest ;
  assign m_pcie_rd_master_rd_in$DEQ =
	     m_pcie_rd_master_rd_in$EMPTY_N && pcie_rd_arready ;
  assign m_pcie_rd_master_rd_in$CLR = 1'b0 ;

  // submodule m_pcie_rd_master_rd_out
  assign m_pcie_rd_master_rd_out$D_IN = m_pcie_rd_master_rd_rinpkg$wget ;
  assign m_pcie_rd_master_rd_out$ENQ =
	     m_pcie_rd_master_rd_out$FULL_N && pcie_rd_rvalid ;
  assign m_pcie_rd_master_rd_out$DEQ = WILL_FIRE_RL_m_pcie_rd_forwardData ;
  assign m_pcie_rd_master_rd_out$CLR = 1'b0 ;

  // submodule m_pcie_rd_outgoingBuffer
  assign m_pcie_rd_outgoingBuffer$D_IN =
	     m_pcie_rd_master_rd_out$D_OUT[259:4] ;
  assign m_pcie_rd_outgoingBuffer$ENQ = WILL_FIRE_RL_m_pcie_rd_forwardData ;
  assign m_pcie_rd_outgoingBuffer$DEQ = WILL_FIRE_RL_mkConnectionGetPut_3 ;
  assign m_pcie_rd_outgoingBuffer$CLR = 1'b0 ;

  // submodule m_pcie_rd_reqGen_incomingBuffer
  assign m_pcie_rd_reqGen_incomingBuffer$D_IN =
	     mclk_m_pcie_put_req_rd_ff$dD_OUT ;
  assign m_pcie_rd_reqGen_incomingBuffer$ENQ =
	     mclk_m_pcie_put_req_rd_ff$dEMPTY_N &&
	     m_pcie_rd_reqGen_incomingBuffer$FULL_N ;
  assign m_pcie_rd_reqGen_incomingBuffer$DEQ =
	     m_pcie_rd_reqGen_incomingBuffer$EMPTY_N &&
	     m_pcie_rd_reqGen_intermediateBuffer$FULL_N ;
  assign m_pcie_rd_reqGen_incomingBuffer$CLR = 1'b0 ;

  // submodule m_pcie_rd_reqGen_intermediateBuffer
  assign m_pcie_rd_reqGen_intermediateBuffer$D_IN =
	     { x__h36275[4:0],
	       m_pcie_rd_reqGen_incomingBufferD_OUT_BITS_67__ETC__q8[4:0],
	       m_pcie_rd_reqGen_incomingBuffer$D_OUT } ;
  assign m_pcie_rd_reqGen_intermediateBuffer$ENQ =
	     m_pcie_rd_reqGen_incomingBuffer$EMPTY_N &&
	     m_pcie_rd_reqGen_intermediateBuffer$FULL_N ;
  assign m_pcie_rd_reqGen_intermediateBuffer$DEQ =
	     m_pcie_rd_reqGen_intermediateBuffer$EMPTY_N &&
	     m_pcie_rd_reqGen_intermediateBuffer2$FULL_N ;
  assign m_pcie_rd_reqGen_intermediateBuffer$CLR = 1'b0 ;

  // submodule m_pcie_rd_reqGen_intermediateBuffer2
  assign m_pcie_rd_reqGen_intermediateBuffer2$D_IN =
	     { m_pcie_rd_reqGen_intermediateBuffer$D_OUT[141:132],
	       x__h36456[58:0],
	       m_pcie_rd_reqGen_intermediateBuffer$D_OUT[131:0] } ;
  assign m_pcie_rd_reqGen_intermediateBuffer2$ENQ =
	     m_pcie_rd_reqGen_intermediateBuffer$EMPTY_N &&
	     m_pcie_rd_reqGen_intermediateBuffer2$FULL_N ;
  assign m_pcie_rd_reqGen_intermediateBuffer2$DEQ =
	     WILL_FIRE_RL_m_pcie_rd_reqGen_finishRequest ;
  assign m_pcie_rd_reqGen_intermediateBuffer2$CLR = 1'b0 ;

  // submodule m_pcie_rd_reqGen_outgoingBuffer
  assign m_pcie_rd_reqGen_outgoingBuffer$D_IN =
	     { requests_last__h36556,
	       request_data_requests_total__h36593,
	       request_data_address__h36594,
	       m_pcie_rd_reqGen_intermediateBuffer2$D_OUT[3:0],
	       m_pcie_rd_reqGen_intermediateBuffer2$D_OUT[200:132],
	       m_pcie_rd_reqGen_intermediateBuffer2$D_OUT[72:68],
	       1'd1 } ;
  assign m_pcie_rd_reqGen_outgoingBuffer$ENQ =
	     WILL_FIRE_RL_m_pcie_rd_reqGen_finishRequest ;
  assign m_pcie_rd_reqGen_outgoingBuffer$DEQ =
	     WILL_FIRE_RL_m_pcie_rd_fillBuffer ;
  assign m_pcie_rd_reqGen_outgoingBuffer$CLR = 1'b0 ;

  // submodule m_pcie_wr_beatsPerRequestFIFO
  assign m_pcie_wr_beatsPerRequestFIFO$D_IN = _theResult____h29456 ;
  assign m_pcie_wr_beatsPerRequestFIFO$ENQ =
	     WILL_FIRE_RL_m_pcie_wr_placeRequest ;
  assign m_pcie_wr_beatsPerRequestFIFO$DEQ =
	     WILL_FIRE_RL_m_pcie_wr_forwardData &&
	     m_pcie_wr_beatsThisRequestCntr_40_EQ_m_pcie_wr_ETC___d442 ;
  assign m_pcie_wr_beatsPerRequestFIFO$CLR = 1'b0 ;

  // submodule m_pcie_wr_incomingBuffer
  always@(readConverter_wordInCntr or readConverter_buffer)
  begin
    case (readConverter_wordInCntr)
      1'd0: m_pcie_wr_incomingBuffer$D_IN = readConverter_buffer[255:0];
      1'd1: m_pcie_wr_incomingBuffer$D_IN = readConverter_buffer[511:256];
    endcase
  end
  assign m_pcie_wr_incomingBuffer$ENQ = WILL_FIRE_RL_mkConnectionGetPut_2 ;
  assign m_pcie_wr_incomingBuffer$DEQ = WILL_FIRE_RL_m_pcie_wr_forwardData ;
  assign m_pcie_wr_incomingBuffer$CLR = 1'b0 ;

  // submodule m_pcie_wr_master_wr_in_addr
  assign m_pcie_wr_master_wr_in_addr$D_IN =
	     { m_pcie_wr_task_data_requests_reg[67:4],
	       _theResult____h29456,
	       17'd86400,
	       m_pcie_wr_task_data_requests_reg[3:0],
	       1'd0 } ;
  assign m_pcie_wr_master_wr_in_addr$ENQ =
	     WILL_FIRE_RL_m_pcie_wr_placeRequest ;
  assign m_pcie_wr_master_wr_in_addr$DEQ =
	     m_pcie_wr_master_wr_in_addr$EMPTY_N && pcie_wr_awready ;
  assign m_pcie_wr_master_wr_in_addr$CLR = 1'b0 ;

  // submodule m_pcie_wr_master_wr_in_data
  assign m_pcie_wr_master_wr_in_data$D_IN =
	     { m_pcie_wr_incomingBuffer$D_OUT,
	       x_strb__h30078,
	       m_pcie_wr_beatsThisRequestCntr_40_EQ_m_pcie_wr_ETC___d442,
	       1'd0 } ;
  assign m_pcie_wr_master_wr_in_data$ENQ =
	     WILL_FIRE_RL_m_pcie_wr_forwardData ;
  assign m_pcie_wr_master_wr_in_data$DEQ =
	     m_pcie_wr_master_wr_in_data$EMPTY_N && pcie_wr_wready ;
  assign m_pcie_wr_master_wr_in_data$CLR = 1'b0 ;

  // submodule m_pcie_wr_master_wr_out
  assign m_pcie_wr_master_wr_out$D_IN = m_pcie_wr_master_wr_rinpkg$wget ;
  assign m_pcie_wr_master_wr_out$ENQ =
	     m_pcie_wr_master_wr_out$FULL_N && pcie_wr_bvalid ;
  assign m_pcie_wr_master_wr_out$DEQ = m_pcie_wr_master_wr_out$EMPTY_N ;
  assign m_pcie_wr_master_wr_out$CLR = 1'b0 ;

  // submodule m_pcie_wr_reqGen_incomingBuffer
  assign m_pcie_wr_reqGen_incomingBuffer$D_IN =
	     mclk_m_pcie_put_req_wr_ff$dD_OUT ;
  assign m_pcie_wr_reqGen_incomingBuffer$ENQ =
	     mclk_m_pcie_put_req_wr_ff$dEMPTY_N &&
	     m_pcie_wr_reqGen_incomingBuffer$FULL_N ;
  assign m_pcie_wr_reqGen_incomingBuffer$DEQ =
	     m_pcie_wr_reqGen_incomingBuffer$EMPTY_N &&
	     m_pcie_wr_reqGen_intermediateBuffer$FULL_N ;
  assign m_pcie_wr_reqGen_incomingBuffer$CLR = 1'b0 ;

  // submodule m_pcie_wr_reqGen_intermediateBuffer
  assign m_pcie_wr_reqGen_intermediateBuffer$D_IN =
	     { x__h26336[4:0],
	       m_pcie_wr_reqGen_incomingBufferD_OUT_BITS_67__ETC__q9[4:0],
	       m_pcie_wr_reqGen_incomingBuffer$D_OUT } ;
  assign m_pcie_wr_reqGen_intermediateBuffer$ENQ =
	     m_pcie_wr_reqGen_incomingBuffer$EMPTY_N &&
	     m_pcie_wr_reqGen_intermediateBuffer$FULL_N ;
  assign m_pcie_wr_reqGen_intermediateBuffer$DEQ =
	     m_pcie_wr_reqGen_intermediateBuffer$EMPTY_N &&
	     m_pcie_wr_reqGen_intermediateBuffer2$FULL_N ;
  assign m_pcie_wr_reqGen_intermediateBuffer$CLR = 1'b0 ;

  // submodule m_pcie_wr_reqGen_intermediateBuffer2
  assign m_pcie_wr_reqGen_intermediateBuffer2$D_IN =
	     { m_pcie_wr_reqGen_intermediateBuffer$D_OUT[141:132],
	       x__h26517[58:0],
	       m_pcie_wr_reqGen_intermediateBuffer$D_OUT[131:0] } ;
  assign m_pcie_wr_reqGen_intermediateBuffer2$ENQ =
	     m_pcie_wr_reqGen_intermediateBuffer$EMPTY_N &&
	     m_pcie_wr_reqGen_intermediateBuffer2$FULL_N ;
  assign m_pcie_wr_reqGen_intermediateBuffer2$DEQ =
	     WILL_FIRE_RL_m_pcie_wr_reqGen_finishRequest ;
  assign m_pcie_wr_reqGen_intermediateBuffer2$CLR = 1'b0 ;

  // submodule m_pcie_wr_reqGen_outgoingBuffer
  assign m_pcie_wr_reqGen_outgoingBuffer$D_IN =
	     { requests_last__h26617,
	       request_data_requests_total__h26654,
	       request_data_address__h26655,
	       m_pcie_wr_reqGen_intermediateBuffer2$D_OUT[3:0],
	       m_pcie_wr_reqGen_intermediateBuffer2$D_OUT[200:132],
	       m_pcie_wr_reqGen_intermediateBuffer2$D_OUT[72:68],
	       1'd1 } ;
  assign m_pcie_wr_reqGen_outgoingBuffer$ENQ =
	     WILL_FIRE_RL_m_pcie_wr_reqGen_finishRequest ;
  assign m_pcie_wr_reqGen_outgoingBuffer$DEQ =
	     WILL_FIRE_RL_m_pcie_wr_fillBuffer ;
  assign m_pcie_wr_reqGen_outgoingBuffer$CLR = 1'b0 ;

  // submodule mclk_m_fpga_put_req_rd_ff
  assign mclk_m_fpga_put_req_rd_ff$sD_IN = { readIn_rv[127:0], 4'd0 } ;
  assign mclk_m_fpga_put_req_rd_ff$sENQ = WILL_FIRE_RL_handleRead ;
  assign mclk_m_fpga_put_req_rd_ff$dDEQ =
	     mclk_m_fpga_put_req_rd_ff$dEMPTY_N &&
	     m_fpga_rd_reqGen_incomingBuffer$FULL_N ;

  // submodule mclk_m_fpga_put_req_wr_ff
  assign mclk_m_fpga_put_req_wr_ff$sD_IN = { writeIn_rv[127:0], 4'd0 } ;
  assign mclk_m_fpga_put_req_wr_ff$sENQ = WILL_FIRE_RL_handleWrite ;
  assign mclk_m_fpga_put_req_wr_ff$dDEQ =
	     mclk_m_fpga_put_req_wr_ff$dEMPTY_N &&
	     m_fpga_wr_reqGen_incomingBuffer$FULL_N ;

  // submodule mclk_m_pcie_put_req_rd_ff
  assign mclk_m_pcie_put_req_rd_ff$sD_IN =
	     { writeIn_rv[191:128], writeIn_rv[63:0], 4'd0 } ;
  assign mclk_m_pcie_put_req_rd_ff$sENQ = WILL_FIRE_RL_handleWrite ;
  assign mclk_m_pcie_put_req_rd_ff$dDEQ =
	     mclk_m_pcie_put_req_rd_ff$dEMPTY_N &&
	     m_pcie_rd_reqGen_incomingBuffer$FULL_N ;

  // submodule mclk_m_pcie_put_req_wr_ff
  assign mclk_m_pcie_put_req_wr_ff$sD_IN =
	     { readIn_rv[191:128], readIn_rv[63:0], 4'd0 } ;
  assign mclk_m_pcie_put_req_wr_ff$sENQ = WILL_FIRE_RL_handleRead ;
  assign mclk_m_pcie_put_req_wr_ff$dDEQ =
	     mclk_m_pcie_put_req_wr_ff$dEMPTY_N &&
	     m_pcie_wr_reqGen_incomingBuffer$FULL_N ;

  // submodule pcieDone
  assign pcieDone$sD_IN = 1'd1 ;
  assign pcieDone$sENQ =
	     pcieDone$sFULL_N &&
	     pcieLastCycle_655_AND_m_pcie_rd_task_data_outp_ETC___d1657 ;
  assign pcieDone$dDEQ = WILL_FIRE_RL_setInterrupt ;

  // submodule readConvBTT_ff
  assign readConvBTT_ff$sD_IN = { btt__h102029, readIn_rv[69] } ;
  assign readConvBTT_ff$sENQ = WILL_FIRE_RL_handleRead ;
  assign readConvBTT_ff$dDEQ = readConvBTT_ff$dEMPTY_N ;

  // submodule s_config_readSlave_in
  assign s_config_readSlave_in$D_IN = { S_AXI_araddr, S_AXI_arprot } ;
  assign s_config_readSlave_in$ENQ =
	     s_config_readSlave_in$FULL_N && S_AXI_arvalid ;
  assign s_config_readSlave_in$DEQ =
	     WILL_FIRE_RL_s_config_axiReadFallback ||
	     WILL_FIRE_RL_s_config_axiReadSpecial_8 ||
	     WILL_FIRE_RL_s_config_axiReadSpecial_7 ||
	     WILL_FIRE_RL_s_config_axiReadSpecial_6 ||
	     WILL_FIRE_RL_s_config_axiReadSpecial_5 ||
	     WILL_FIRE_RL_s_config_axiReadSpecial_4 ||
	     WILL_FIRE_RL_s_config_axiReadSpecial_3 ||
	     WILL_FIRE_RL_s_config_axiReadSpecial_2 ||
	     WILL_FIRE_RL_s_config_axiReadSpecial_1 ||
	     WILL_FIRE_RL_s_config_axiReadSpecial ;
  assign s_config_readSlave_in$CLR = 1'b0 ;

  // submodule s_config_readSlave_out
  always@(WILL_FIRE_RL_s_config_axiReadSpecial or
	  MUX_s_config_readSlave_out$enq_1__VAL_1 or
	  WILL_FIRE_RL_s_config_axiReadSpecial_1 or
	  MUX_s_config_readSlave_out$enq_1__VAL_2 or
	  WILL_FIRE_RL_s_config_axiReadSpecial_2 or
	  MUX_s_config_readSlave_out$enq_1__VAL_3 or
	  WILL_FIRE_RL_s_config_axiReadSpecial_3 or
	  MUX_s_config_readSlave_out$enq_1__VAL_4 or
	  WILL_FIRE_RL_s_config_axiReadSpecial_4 or
	  MUX_s_config_readSlave_out$enq_1__VAL_5 or
	  WILL_FIRE_RL_s_config_axiReadSpecial_5 or
	  MUX_s_config_readSlave_out$enq_1__VAL_6 or
	  WILL_FIRE_RL_s_config_axiReadSpecial_6 or
	  MUX_s_config_readSlave_out$enq_1__VAL_7 or
	  WILL_FIRE_RL_s_config_axiReadSpecial_7 or
	  MUX_s_config_readSlave_out$enq_1__VAL_8 or
	  WILL_FIRE_RL_s_config_axiReadSpecial_8 or
	  MUX_s_config_readSlave_out$enq_1__VAL_9 or
	  WILL_FIRE_RL_s_config_axiReadFallback)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_s_config_axiReadSpecial:
	  s_config_readSlave_out$D_IN =
	      MUX_s_config_readSlave_out$enq_1__VAL_1;
      WILL_FIRE_RL_s_config_axiReadSpecial_1:
	  s_config_readSlave_out$D_IN =
	      MUX_s_config_readSlave_out$enq_1__VAL_2;
      WILL_FIRE_RL_s_config_axiReadSpecial_2:
	  s_config_readSlave_out$D_IN =
	      MUX_s_config_readSlave_out$enq_1__VAL_3;
      WILL_FIRE_RL_s_config_axiReadSpecial_3:
	  s_config_readSlave_out$D_IN =
	      MUX_s_config_readSlave_out$enq_1__VAL_4;
      WILL_FIRE_RL_s_config_axiReadSpecial_4:
	  s_config_readSlave_out$D_IN =
	      MUX_s_config_readSlave_out$enq_1__VAL_5;
      WILL_FIRE_RL_s_config_axiReadSpecial_5:
	  s_config_readSlave_out$D_IN =
	      MUX_s_config_readSlave_out$enq_1__VAL_6;
      WILL_FIRE_RL_s_config_axiReadSpecial_6:
	  s_config_readSlave_out$D_IN =
	      MUX_s_config_readSlave_out$enq_1__VAL_7;
      WILL_FIRE_RL_s_config_axiReadSpecial_7:
	  s_config_readSlave_out$D_IN =
	      MUX_s_config_readSlave_out$enq_1__VAL_8;
      WILL_FIRE_RL_s_config_axiReadSpecial_8:
	  s_config_readSlave_out$D_IN =
	      MUX_s_config_readSlave_out$enq_1__VAL_9;
      WILL_FIRE_RL_s_config_axiReadFallback:
	  s_config_readSlave_out$D_IN = 66'd0;
      default: s_config_readSlave_out$D_IN =
		   66'h2AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign s_config_readSlave_out$ENQ =
	     WILL_FIRE_RL_s_config_axiReadSpecial ||
	     WILL_FIRE_RL_s_config_axiReadSpecial_1 ||
	     WILL_FIRE_RL_s_config_axiReadSpecial_2 ||
	     WILL_FIRE_RL_s_config_axiReadSpecial_3 ||
	     WILL_FIRE_RL_s_config_axiReadSpecial_4 ||
	     WILL_FIRE_RL_s_config_axiReadSpecial_5 ||
	     WILL_FIRE_RL_s_config_axiReadSpecial_6 ||
	     WILL_FIRE_RL_s_config_axiReadSpecial_7 ||
	     WILL_FIRE_RL_s_config_axiReadSpecial_8 ||
	     WILL_FIRE_RL_s_config_axiReadFallback ;
  assign s_config_readSlave_out$DEQ =
	     s_config_readSlave_out$EMPTY_N && S_AXI_rready ;
  assign s_config_readSlave_out$CLR = 1'b0 ;

  // submodule s_config_writeSlave_in
  assign s_config_writeSlave_in$D_IN =
	     { s_config_writeSlave_addrIn_rv$port1__read[66:3],
	       s_config_writeSlave_dataIn_rv$port1__read[71:0],
	       s_config_writeSlave_addrIn_rv$port1__read[2:0] } ;
  assign s_config_writeSlave_in$ENQ =
	     s_config_writeSlave_addrIn_rv$port1__read[67] &&
	     s_config_writeSlave_dataIn_rv$port1__read[72] &&
	     s_config_writeSlave_in$FULL_N ;
  assign s_config_writeSlave_in$DEQ =
	     WILL_FIRE_RL_s_config_1_axiWriteSpecial_6 ||
	     WILL_FIRE_RL_s_config_1_axiWriteSpecial_5 ||
	     WILL_FIRE_RL_s_config_1_axiWriteSpecial_4 ||
	     WILL_FIRE_RL_s_config_1_axiWriteSpecial_3 ||
	     WILL_FIRE_RL_s_config_1_axiWriteSpecial_2 ||
	     WILL_FIRE_RL_s_config_1_axiWriteSpecial_1 ||
	     WILL_FIRE_RL_s_config_1_axiWriteFallback ||
	     WILL_FIRE_RL_s_config_1_axiWriteSpecial ;
  assign s_config_writeSlave_in$CLR = 1'b0 ;

  // submodule s_config_writeSlave_out
  assign s_config_writeSlave_out$D_IN = 2'd0 ;
  assign s_config_writeSlave_out$ENQ =
	     WILL_FIRE_RL_s_config_1_axiWriteSpecial_6 ||
	     WILL_FIRE_RL_s_config_1_axiWriteSpecial_5 ||
	     WILL_FIRE_RL_s_config_1_axiWriteSpecial_4 ||
	     WILL_FIRE_RL_s_config_1_axiWriteSpecial_3 ||
	     WILL_FIRE_RL_s_config_1_axiWriteSpecial_2 ||
	     WILL_FIRE_RL_s_config_1_axiWriteSpecial_1 ||
	     WILL_FIRE_RL_s_config_1_axiWriteFallback ||
	     WILL_FIRE_RL_s_config_1_axiWriteSpecial ;
  assign s_config_writeSlave_out$DEQ =
	     s_config_writeSlave_out$EMPTY_N && S_AXI_bready ;
  assign s_config_writeSlave_out$CLR = 1'b0 ;

  // submodule writeConvBTT_ff
  assign writeConvBTT_ff$sD_IN = { btt__h145135, writeIn_rv[69] } ;
  assign writeConvBTT_ff$sENQ = WILL_FIRE_RL_handleWrite ;
  assign writeConvBTT_ff$dDEQ = writeConvBTT_ff$dEMPTY_N ;

  // submodule writeConverter_dataSync
  assign writeConverter_dataSync$D_IN =
	     { (writeConverter_wordInCntr == 2'd1) ?
		 m_pcie_rd_outgoingBuffer$D_OUT :
		 256'd0,
	       (writeConverter_wordInCntr == 2'd0) ?
		 m_pcie_rd_outgoingBuffer$D_OUT :
		 writeConverter_buffer_0 } ;
  assign writeConverter_dataSync$ENQ =
	     WILL_FIRE_RL_mkConnectionGetPut_3 &&
	     (writeConverter_wordInCntr == 2'd1 ||
	      writeConverter_byteCntr <= 64'd32) ;
  assign writeConverter_dataSync$DEQ =
	     fpga_request_converter$sFULL_N &&
	     writeConverter_dataSync$EMPTY_N ;
  assign writeConverter_dataSync$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_0_CONCAT_readConverter_wordInCntr_EQ_1_OR_r_ETC__q1 =
	     ({ 1'd0, readConverter_wordInCntr } == 2'd1 ||
	      readConverter_byteCntr <= 64'd32) ?
	       2'd0 :
	       { 1'd0, readConverter_wordInCntr } + 2'd1 ;
  assign IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 =
	     (m_fpga_wr_task_data_output_reg[0] &&
	      m_fpga_wr_task_data_output_reg[76:71] != 6'd0) ?
	       endByte___1__h46785 :
	       ((m_fpga_wr_task_data_output_reg[64:7] == 58'd1) ?
		  ((m_fpga_wr_task_data_output_reg[70:65] == 6'd0) ?
		     7'd64 :
		     endByte___1__h46811) :
		  7'd64) ;
  assign IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 =
	     (m_pcie_wr_task_data_output_reg[0] &&
	      m_pcie_wr_task_data_output_reg[74:70] != 5'd0) ?
	       endByte___1__h31579 :
	       ((m_pcie_wr_task_data_output_reg[64:6] == 59'd1) ?
		  ((m_pcie_wr_task_data_output_reg[69:65] == 5'd0) ?
		     6'd32 :
		     endByte___1__h31605) :
		  6'd32) ;
  assign _theResult____h26331 =
	     (m_pcie_wr_reqGen_incomingBuffer$D_OUT[72:68] == 5'd0) ?
	       bytes_first__h26330 :
	       bytes_first___1__h26366 ;
  assign _theResult____h26515 =
	     (m_pcie_wr_reqGen_intermediateBuffer$D_OUT[141:137] == 5'd0) ?
	       transfers_total__h26514 :
	       transfers_total___1__h26523 ;
  assign _theResult____h29456 =
	     (m_pcie_wr_task_data_requests_reg[126:68] == 59'd1 &&
	      m_pcie_wr_task_data_requests_reg[134:127] != 8'd0) ?
	       beatsThisRequest___1__h29504 :
	       8'd63 ;
  assign _theResult____h36270 =
	     (m_pcie_rd_reqGen_incomingBuffer$D_OUT[72:68] == 5'd0) ?
	       bytes_first__h36269 :
	       bytes_first___1__h36305 ;
  assign _theResult____h36454 =
	     (m_pcie_rd_reqGen_intermediateBuffer$D_OUT[141:137] == 5'd0) ?
	       transfers_total__h36453 :
	       transfers_total___1__h36462 ;
  assign _theResult____h40144 =
	     (m_fpga_wr_reqGen_incomingBuffer$D_OUT[73:68] == 6'd0) ?
	       bytes_first__h40143 :
	       bytes_first___1__h40179 ;
  assign _theResult____h40328 =
	     (m_fpga_wr_reqGen_intermediateBuffer$D_OUT[143:138] == 6'd0) ?
	       transfers_total__h40327 :
	       transfers_total___1__h40336 ;
  assign _theResult____h43254 =
	     (m_fpga_wr_task_data_requests_reg[125:68] == 58'd1 &&
	      m_fpga_wr_task_data_requests_reg[133:126] != 8'd0) ?
	       beatsThisRequest___1__h43302 :
	       8'd255 ;
  assign _theResult____h55476 =
	     (m_fpga_rd_reqGen_incomingBuffer$D_OUT[73:68] == 6'd0) ?
	       bytes_first__h55475 :
	       bytes_first___1__h55511 ;
  assign _theResult____h55660 =
	     (m_fpga_rd_reqGen_intermediateBuffer$D_OUT[143:138] == 6'd0) ?
	       transfers_total__h55659 :
	       transfers_total___1__h55668 ;
  assign b__h115415 =
	     byteAlignerWriter_bytes_left_in_buffer$EN_port0__write ?
	       byteAlignerWriter_bytes_left_in_buffer$port0__write_1 :
	       byteAlignerWriter_bytes_left_in_buffer ;
  assign b__h72232 =
	     byteAlignerReader_bytes_left_in_buffer$EN_port0__write ?
	       byteAlignerReader_bytes_left_in_buffer$port0__write_1 :
	       byteAlignerReader_bytes_left_in_buffer ;
  assign beatsThisRequestCntrT__h29964 =
	     m_pcie_wr_beatsThisRequestCntr + 8'd1 ;
  assign beatsThisRequestCntrT__h43762 =
	     m_fpga_wr_beatsThisRequestCntr + 8'd1 ;
  assign beatsThisRequest___1__h29504 =
	     m_pcie_wr_task_data_requests_reg[134:127] - 8'd1 ;
  assign beatsThisRequest___1__h38675 =
	     m_pcie_rd_task_data_requests_reg[134:127] - 8'd1 ;
  assign beatsThisRequest___1__h43302 =
	     m_fpga_wr_task_data_requests_reg[133:126] - 8'd1 ;
  assign beatsThisRequest___1__h57878 =
	     m_fpga_rd_task_data_requests_reg[133:126] - 8'd1 ;
  assign btt__h102029 = readIn_rv[63:0] + y__h102066 ;
  assign btt__h145135 = writeIn_rv[63:0] + y__h145163 ;
  assign byteAlignerReader_bytes_in_430_ULT_byteAligner_ETC___d1432 =
	     byteAlignerReader_bytes_in < byteAlignerReader_bytes_total ;
  assign byteAlignerReader_bytes_left_in_buffer_port0___ETC___d1447 =
	     byteAlignerReader_bytes_left_in_buffer <
	     byteAlignerReader_bytes_out_needed ;
  assign byteAlignerWriter_bytes_in_552_ULT_byteAligner_ETC___d1554 =
	     byteAlignerWriter_bytes_in < byteAlignerWriter_bytes_total ;
  assign byteAlignerWriter_bytes_left_in_buffer_port0___ETC___d1569 =
	     byteAlignerWriter_bytes_left_in_buffer <
	     byteAlignerWriter_bytes_out_needed ;
  assign bytes_first___1__h26366 = 64'd32 - bytes_first__h26330 ;
  assign bytes_first___1__h36305 = 64'd32 - bytes_first__h36269 ;
  assign bytes_first___1__h40179 = 64'd64 - bytes_first__h40143 ;
  assign bytes_first___1__h55511 = 64'd64 - bytes_first__h55475 ;
  assign bytes_first__h26330 =
	     { 59'd0, m_pcie_wr_reqGen_incomingBuffer$D_OUT[72:68] } ;
  assign bytes_first__h36269 =
	     { 59'd0, m_pcie_rd_reqGen_incomingBuffer$D_OUT[72:68] } ;
  assign bytes_first__h40143 =
	     { 58'd0, m_fpga_wr_reqGen_incomingBuffer$D_OUT[73:68] } ;
  assign bytes_first__h55475 =
	     { 58'd0, m_fpga_rd_reqGen_incomingBuffer$D_OUT[73:68] } ;
  assign endByte___1__h31579 =
	     startByte___1__h31578 +
	     { 1'd0, m_pcie_wr_task_data_output_reg[74:70] } ;
  assign endByte___1__h31605 =
	     { 1'd0, m_pcie_wr_task_data_output_reg[69:65] } ;
  assign endByte___1__h46785 =
	     startByte___1__h46784 +
	     { 1'd0, m_fpga_wr_task_data_output_reg[76:71] } ;
  assign endByte___1__h46811 =
	     { 1'd0, m_fpga_wr_task_data_output_reg[70:65] } ;
  assign fpgaLastCycle_662_AND_m_fpga_rd_task_data_outp_ETC___d1664 =
	     fpgaLastCycle && m_fpga_rd_task_data_output_reg[64:7] == 58'd0 &&
	     m_fpga_rd_task_data_requests_reg[125:68] == 58'd0 &&
	     m_fpga_wr_task_data_output_reg[64:7] == 58'd0 &&
	     m_fpga_wr_task_data_requests_reg[125:68] == 58'd0 ;
  assign m_fpga_rd_reqGen_incomingBufferD_OUT_BITS_67__ETC__q6 =
	     m_fpga_rd_reqGen_incomingBuffer$D_OUT[67:4] - y__h55555 ;
  assign m_fpga_wr_beatsThisRequestCntr_21_EQ_m_fpga_wr_ETC___d923 =
	     m_fpga_wr_beatsThisRequestCntr ==
	     m_fpga_wr_beatsPerRequestFIFO$D_OUT ;
  assign m_fpga_wr_reqGen_incomingBufferD_OUT_BITS_67__ETC__q7 =
	     m_fpga_wr_reqGen_incomingBuffer$D_OUT[67:4] - y__h40223 ;
  assign m_pcie_rd_reqGen_incomingBufferD_OUT_BITS_67__ETC__q8 =
	     m_pcie_rd_reqGen_incomingBuffer$D_OUT[67:4] - y__h36349 ;
  assign m_pcie_wr_beatsThisRequestCntr_40_EQ_m_pcie_wr_ETC___d442 =
	     m_pcie_wr_beatsThisRequestCntr ==
	     m_pcie_wr_beatsPerRequestFIFO$D_OUT ;
  assign m_pcie_wr_reqGen_incomingBufferD_OUT_BITS_67__ETC__q9 =
	     m_pcie_wr_reqGen_incomingBuffer$D_OUT[67:4] - y__h26410 ;
  assign pc_reqCntr_491_EQ_cycles_between_set_6_BITS_11_ETC___d1673 =
	     pc_reqCntr == cycles_between_set[11:0] ;
  assign pcieLastCycle_655_AND_m_pcie_rd_task_data_outp_ETC___d1657 =
	     pcieLastCycle && m_pcie_rd_task_data_output_reg[64:6] == 59'd0 &&
	     m_pcie_rd_task_data_requests_reg[126:68] == 59'd0 &&
	     m_pcie_wr_task_data_output_reg[64:6] == 59'd0 &&
	     m_pcie_wr_task_data_requests_reg[126:68] == 59'd0 ;
  assign request_data_address__h26655 =
	     { m_pcie_wr_reqGen_intermediateBuffer2$D_OUT[131:73], 5'd0 } ;
  assign request_data_address__h36594 =
	     { m_pcie_rd_reqGen_intermediateBuffer2$D_OUT[131:73], 5'd0 } ;
  assign request_data_address__h40468 =
	     { m_fpga_wr_reqGen_intermediateBuffer2$D_OUT[131:74], 6'd0 } ;
  assign request_data_address__h55800 =
	     { m_fpga_rd_reqGen_intermediateBuffer2$D_OUT[131:74], 6'd0 } ;
  assign request_data_requests_total__h26654 =
	     (m_pcie_wr_reqGen_intermediateBuffer2$D_OUT[137:132] == 6'd0) ?
	       requests_total__h26618 :
	       requests_total___1__h26680 ;
  assign request_data_requests_total__h36593 =
	     (m_pcie_rd_reqGen_intermediateBuffer2$D_OUT[137:132] == 6'd0) ?
	       requests_total__h36557 :
	       requests_total___1__h36619 ;
  assign request_data_requests_total__h40467 =
	     (m_fpga_wr_reqGen_intermediateBuffer2$D_OUT[139:132] == 8'd0) ?
	       requests_total__h40431 :
	       requests_total___1__h40493 ;
  assign request_data_requests_total__h55799 =
	     (m_fpga_rd_reqGen_intermediateBuffer2$D_OUT[139:132] == 8'd0) ?
	       requests_total__h55763 :
	       requests_total___1__h55825 ;
  assign requests_last__h26617 =
	     { 2'd0, m_pcie_wr_reqGen_intermediateBuffer2$D_OUT[137:132] } ;
  assign requests_last__h36556 =
	     { 2'd0, m_pcie_rd_reqGen_intermediateBuffer2$D_OUT[137:132] } ;
  assign requests_total___1__h26680 = requests_total__h26618 + 59'd1 ;
  assign requests_total___1__h36619 = requests_total__h36557 + 59'd1 ;
  assign requests_total___1__h40493 = requests_total__h40431 + 58'd1 ;
  assign requests_total___1__h55825 = requests_total__h55763 + 58'd1 ;
  assign requests_total__h26618 =
	     m_pcie_wr_reqGen_intermediateBuffer2$D_OUT[190:132] >> 6 ;
  assign requests_total__h36557 =
	     m_pcie_rd_reqGen_intermediateBuffer2$D_OUT[190:132] >> 6 ;
  assign requests_total__h40431 =
	     m_fpga_wr_reqGen_intermediateBuffer2$D_OUT[189:132] >> 8 ;
  assign requests_total__h55763 =
	     m_fpga_rd_reqGen_intermediateBuffer2$D_OUT[189:132] >> 8 ;
  assign startByte___1__h31578 =
	     { 1'd0, m_pcie_wr_task_data_output_reg[5:1] } ;
  assign startByte___1__h46784 =
	     { 1'd0, m_fpga_wr_task_data_output_reg[6:1] } ;
  assign transfers_total___1__h26523 = transfers_total__h26514 + 64'd1 ;
  assign transfers_total___1__h36462 = transfers_total__h36453 + 64'd1 ;
  assign transfers_total___1__h40336 = transfers_total__h40327 + 64'd1 ;
  assign transfers_total___1__h55668 = transfers_total__h55659 + 64'd1 ;
  assign transfers_total__h26514 = (x__h26543 - y__h26544) >> 5 ;
  assign transfers_total__h26520 = _theResult____h26515 + 64'd1 ;
  assign transfers_total__h36453 = (x__h36482 - y__h36483) >> 5 ;
  assign transfers_total__h36459 = _theResult____h36454 + 64'd1 ;
  assign transfers_total__h40327 = (x__h40356 - y__h40357) >> 6 ;
  assign transfers_total__h40333 = _theResult____h40328 + 64'd1 ;
  assign transfers_total__h55659 = (x__h55688 - y__h55689) >> 6 ;
  assign transfers_total__h55665 = _theResult____h55660 + 64'd1 ;
  assign x__h26336 =
	     (m_pcie_wr_reqGen_incomingBuffer$D_OUT[67:4] <
	      _theResult____h26331 ||
	      _theResult____h26331 == 64'd0 &&
	      m_pcie_wr_reqGen_incomingBuffer$D_OUT[67:4] < 64'd32) ?
	       m_pcie_wr_reqGen_incomingBuffer$D_OUT[67:4] :
	       _theResult____h26331 ;
  assign x__h26517 =
	     (m_pcie_wr_reqGen_intermediateBuffer$D_OUT[136:132] == 5'd0) ?
	       _theResult____h26515 :
	       transfers_total__h26520 ;
  assign x__h26543 =
	     m_pcie_wr_reqGen_intermediateBuffer$D_OUT[67:4] - y__h26546 ;
  assign x__h31565 =
	     (m_pcie_wr_task_data_output_reg[0] &&
	      m_pcie_wr_task_data_output_reg[74:70] != 5'd0) ?
	       startByte___1__h31578 :
	       6'd0 ;
  assign x__h36275 =
	     (m_pcie_rd_reqGen_incomingBuffer$D_OUT[67:4] <
	      _theResult____h36270 ||
	      _theResult____h36270 == 64'd0 &&
	      m_pcie_rd_reqGen_incomingBuffer$D_OUT[67:4] < 64'd32) ?
	       m_pcie_rd_reqGen_incomingBuffer$D_OUT[67:4] :
	       _theResult____h36270 ;
  assign x__h36456 =
	     (m_pcie_rd_reqGen_intermediateBuffer$D_OUT[136:132] == 5'd0) ?
	       _theResult____h36454 :
	       transfers_total__h36459 ;
  assign x__h36482 =
	     m_pcie_rd_reqGen_intermediateBuffer$D_OUT[67:4] - y__h36485 ;
  assign x__h40149 =
	     (m_fpga_wr_reqGen_incomingBuffer$D_OUT[67:4] <
	      _theResult____h40144 ||
	      _theResult____h40144 == 64'd0 &&
	      m_fpga_wr_reqGen_incomingBuffer$D_OUT[67:4] < 64'd64) ?
	       m_fpga_wr_reqGen_incomingBuffer$D_OUT[67:4] :
	       _theResult____h40144 ;
  assign x__h40330 =
	     (m_fpga_wr_reqGen_intermediateBuffer$D_OUT[137:132] == 6'd0) ?
	       _theResult____h40328 :
	       transfers_total__h40333 ;
  assign x__h40356 =
	     m_fpga_wr_reqGen_intermediateBuffer$D_OUT[67:4] - y__h40359 ;
  assign x__h46771 =
	     (m_fpga_wr_task_data_output_reg[0] &&
	      m_fpga_wr_task_data_output_reg[76:71] != 6'd0) ?
	       startByte___1__h46784 :
	       7'd0 ;
  assign x__h55481 =
	     (m_fpga_rd_reqGen_incomingBuffer$D_OUT[67:4] <
	      _theResult____h55476 ||
	      _theResult____h55476 == 64'd0 &&
	      m_fpga_rd_reqGen_incomingBuffer$D_OUT[67:4] < 64'd64) ?
	       m_fpga_rd_reqGen_incomingBuffer$D_OUT[67:4] :
	       _theResult____h55476 ;
  assign x__h55662 =
	     (m_fpga_rd_reqGen_intermediateBuffer$D_OUT[137:132] == 6'd0) ?
	       _theResult____h55660 :
	       transfers_total__h55665 ;
  assign x__h55688 =
	     m_fpga_rd_reqGen_intermediateBuffer$D_OUT[67:4] - y__h55691 ;
  assign x_address__h29562 =
	     m_pcie_wr_task_data_requests_reg[67:4] + 64'd2048 ;
  assign x_address__h38704 =
	     m_pcie_rd_task_data_requests_reg[67:4] + 64'd2048 ;
  assign x_address__h43360 =
	     m_fpga_wr_task_data_requests_reg[67:4] + 64'd16384 ;
  assign x_address__h57907 =
	     m_fpga_rd_task_data_requests_reg[67:4] + 64'd16384 ;
  assign x_requests_total__h29561 =
	     m_pcie_wr_task_data_requests_reg[126:68] - 59'd1 ;
  assign x_requests_total__h38703 =
	     m_pcie_rd_task_data_requests_reg[126:68] - 59'd1 ;
  assign x_requests_total__h43359 =
	     m_fpga_wr_task_data_requests_reg[125:68] - 58'd1 ;
  assign x_requests_total__h57906 =
	     m_fpga_rd_task_data_requests_reg[125:68] - 58'd1 ;
  assign x_strb__h30078 =
	     { x__h31565 <= 6'd31 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd31,
	       x__h31565 <= 6'd30 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd30,
	       x__h31565 <= 6'd29 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd29,
	       x__h31565 <= 6'd28 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd28,
	       x__h31565 <= 6'd27 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd27,
	       x__h31565 <= 6'd26 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd26,
	       x__h31565 <= 6'd25 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd25,
	       x__h31565 <= 6'd24 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd24,
	       x__h31565 <= 6'd23 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd23,
	       x__h31565 <= 6'd22 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd22,
	       x__h31565 <= 6'd21 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd21,
	       x__h31565 <= 6'd20 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd20,
	       x__h31565 <= 6'd19 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd19,
	       x__h31565 <= 6'd18 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd18,
	       x__h31565 <= 6'd17 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd17,
	       x__h31565 <= 6'd16 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd16,
	       x__h31565 <= 6'd15 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd15,
	       x__h31565 <= 6'd14 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd14,
	       x__h31565 <= 6'd13 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd13,
	       x__h31565 <= 6'd12 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd12,
	       x__h31565 <= 6'd11 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd11,
	       x__h31565 <= 6'd10 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd10,
	       x__h31565 <= 6'd9 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd9,
	       x__h31565 <= 6'd8 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd8,
	       x__h31565 <= 6'd7 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd7,
	       x__h31565 <= 6'd6 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd6,
	       x__h31565 <= 6'd5 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd5,
	       x__h31565 <= 6'd4 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd4,
	       x__h31565 <= 6'd3 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd3,
	       x__h31565 <= 6'd2 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd2,
	       x__h31565 <= 6'd1 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 >
	       6'd1,
	       x__h31565 == 6'd0 &&
	       IF_m_pcie_wr_task_data_output_reg_35_BIT_0_46__ETC___d463 !=
	       6'd0 } ;
  assign x_strb__h43876 =
	     { x__h46771 <= 7'd63 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd63,
	       x__h46771 <= 7'd62 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd62,
	       x__h46771 <= 7'd61 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd61,
	       x__h46771 <= 7'd60 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd60,
	       x__h46771 <= 7'd59 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd59,
	       x__h46771 <= 7'd58 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd58,
	       x__h46771 <= 7'd57 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd57,
	       x__h46771 <= 7'd56 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd56,
	       x__h46771 <= 7'd55 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd55,
	       x__h46771 <= 7'd54 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd54,
	       x__h46771 <= 7'd53 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd53,
	       x__h46771 <= 7'd52 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd52,
	       x__h46771 <= 7'd51 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd51,
	       x__h46771 <= 7'd50 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd50,
	       x__h46771 <= 7'd49 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd49,
	       x__h46771 <= 7'd48 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd48,
	       x__h46771 <= 7'd47 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd47,
	       x__h46771 <= 7'd46 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd46,
	       x__h46771 <= 7'd45 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd45,
	       x__h46771 <= 7'd44 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd44,
	       x__h46771 <= 7'd43 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd43,
	       x__h46771 <= 7'd42 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd42,
	       x__h46771 <= 7'd41 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd41,
	       x__h46771 <= 7'd40 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd40,
	       x__h46771 <= 7'd39 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd39,
	       x__h46771 <= 7'd38 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd38,
	       x__h46771 <= 7'd37 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd37,
	       x__h46771 <= 7'd36 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd36,
	       x__h46771 <= 7'd35 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd35,
	       x__h46771 <= 7'd34 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd34,
	       x__h46771 <= 7'd33 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd33,
	       x__h46771 <= 7'd32 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd32,
	       x__h46771 <= 7'd31 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd31,
	       x__h46771 <= 7'd30 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd30,
	       x__h46771 <= 7'd29 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd29,
	       x__h46771 <= 7'd28 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd28,
	       x__h46771 <= 7'd27 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd27,
	       x__h46771 <= 7'd26 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd26,
	       x__h46771 <= 7'd25 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd25,
	       x__h46771 <= 7'd24 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd24,
	       x__h46771 <= 7'd23 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd23,
	       x__h46771 <= 7'd22 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd22,
	       x__h46771 <= 7'd21 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd21,
	       x__h46771 <= 7'd20 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd20,
	       x__h46771 <= 7'd19 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd19,
	       x__h46771 <= 7'd18 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd18,
	       x__h46771 <= 7'd17 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd17,
	       x__h46771 <= 7'd16 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd16,
	       x__h46771 <= 7'd15 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd15,
	       x__h46771 <= 7'd14 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd14,
	       x__h46771 <= 7'd13 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd13,
	       x__h46771 <= 7'd12 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd12,
	       x__h46771 <= 7'd11 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd11,
	       x__h46771 <= 7'd10 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd10,
	       x__h46771 <= 7'd9 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd9,
	       x__h46771 <= 7'd8 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd8,
	       x__h46771 <= 7'd7 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd7,
	       x__h46771 <= 7'd6 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd6,
	       x__h46771 <= 7'd5 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd5,
	       x__h46771 <= 7'd4 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd4,
	       x__h46771 <= 7'd3 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd3,
	       x__h46771 <= 7'd2 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd2,
	       x__h46771 <= 7'd1 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 >
	       7'd1,
	       x__h46771 == 7'd0 &&
	       IF_m_fpga_wr_task_data_output_reg_16_BIT_0_27__ETC___d944 !=
	       7'd0 } ;
  assign x_transfers_total__h35588 =
	     m_pcie_wr_task_data_output_reg[64:6] - 59'd1 ;
  assign x_transfers_total__h39153 =
	     m_pcie_rd_task_data_output_reg[64:6] - 59'd1 ;
  assign x_transfers_total__h54794 =
	     m_fpga_wr_task_data_output_reg[64:7] - 58'd1 ;
  assign x_transfers_total__h58356 =
	     m_fpga_rd_task_data_output_reg[64:7] - 58'd1 ;
  assign y__h102066 = { 59'd0, readIn_rv[68:64] } ;
  assign y__h145163 = { 59'd0, writeIn_rv[68:64] } ;
  assign y__h26410 = { 59'd0, x__h26336[4:0] } ;
  assign y__h26544 =
	     { 59'd0, m_pcie_wr_reqGen_intermediateBuffer$D_OUT[136:132] } ;
  assign y__h26546 =
	     { 59'd0, m_pcie_wr_reqGen_intermediateBuffer$D_OUT[141:137] } ;
  assign y__h36349 = { 59'd0, x__h36275[4:0] } ;
  assign y__h36483 =
	     { 59'd0, m_pcie_rd_reqGen_intermediateBuffer$D_OUT[136:132] } ;
  assign y__h36485 =
	     { 59'd0, m_pcie_rd_reqGen_intermediateBuffer$D_OUT[141:137] } ;
  assign y__h40223 = { 58'd0, x__h40149[5:0] } ;
  assign y__h40357 =
	     { 58'd0, m_fpga_wr_reqGen_intermediateBuffer$D_OUT[137:132] } ;
  assign y__h40359 =
	     { 58'd0, m_fpga_wr_reqGen_intermediateBuffer$D_OUT[143:138] } ;
  assign y__h55555 = { 58'd0, x__h55481[5:0] } ;
  assign y__h55689 =
	     { 58'd0, m_fpga_rd_reqGen_intermediateBuffer$D_OUT[137:132] } ;
  assign y__h55691 =
	     { 58'd0, m_fpga_rd_reqGen_intermediateBuffer$D_OUT[143:138] } ;
  always@(m_pcie_wr_master_wr_wawcache$wget)
  begin
    case (m_pcie_wr_master_wr_wawcache$wget)
      4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  CASE_m_pcie_wr_master_wr_wawcachewget_1_m_pci_ETC__q2 =
	      m_pcie_wr_master_wr_wawcache$wget;
      default: CASE_m_pcie_wr_master_wr_wawcachewget_1_m_pci_ETC__q2 = 4'd15;
    endcase
  end
  always@(m_pcie_rd_master_rd_warcache$wget)
  begin
    case (m_pcie_rd_master_rd_warcache$wget)
      4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  CASE_m_pcie_rd_master_rd_warcachewget_1_m_pci_ETC__q3 =
	      m_pcie_rd_master_rd_warcache$wget;
      default: CASE_m_pcie_rd_master_rd_warcachewget_1_m_pci_ETC__q3 = 4'd11;
    endcase
  end
  always@(m_fpga_wr_master_wr_wawcache$wget)
  begin
    case (m_fpga_wr_master_wr_wawcache$wget)
      4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  CASE_m_fpga_wr_master_wr_wawcachewget_1_m_fpg_ETC__q4 =
	      m_fpga_wr_master_wr_wawcache$wget;
      default: CASE_m_fpga_wr_master_wr_wawcachewget_1_m_fpg_ETC__q4 = 4'd15;
    endcase
  end
  always@(m_fpga_rd_master_rd_warcache$wget)
  begin
    case (m_fpga_rd_master_rd_warcache$wget)
      4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  CASE_m_fpga_rd_master_rd_warcachewget_1_m_fpg_ETC__q5 =
	      m_fpga_rd_master_rd_warcache$wget;
      default: CASE_m_fpga_rd_master_rd_warcachewget_1_m_fpg_ETC__q5 = 4'd11;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        clkCntr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cycles_between <= `BSV_ASSIGNMENT_DELAY 64'd0;
	cycles_between_set <= `BSV_ASSIGNMENT_DELAY 64'd0;
	cycles_last_request <= `BSV_ASSIGNMENT_DELAY 64'd0;
	doneInterruptReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fpga_addr <= `BSV_ASSIGNMENT_DELAY 64'd0;
	host_addr <= `BSV_ASSIGNMENT_DELAY 64'd0;
	id <= `BSV_ASSIGNMENT_DELAY 64'h0020FF3F0E5A0023;
	isWriteActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	opInProgress <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pc_reqCntr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	readIn_rv <= `BSV_ASSIGNMENT_DELAY
	    193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	read_requests <= `BSV_ASSIGNMENT_DELAY 64'd0;
	s_config_readBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	s_config_writeSlave_addrIn_rv <= `BSV_ASSIGNMENT_DELAY
	    68'h2AAAAAAAAAAAAAAAA;
	s_config_writeSlave_dataIn_rv <= `BSV_ASSIGNMENT_DELAY
	    73'h0AAAAAAAAAAAAAAAAAA;
	transfer_length <= `BSV_ASSIGNMENT_DELAY 64'd0;
	writeIn_rv <= `BSV_ASSIGNMENT_DELAY
	    193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	write_requests <= `BSV_ASSIGNMENT_DELAY 64'd0;
      end
    else
      begin
        if (clkCntr$EN) clkCntr <= `BSV_ASSIGNMENT_DELAY clkCntr$D_IN;
	if (cycles_between$EN)
	  cycles_between <= `BSV_ASSIGNMENT_DELAY cycles_between$D_IN;
	if (cycles_between_set$EN)
	  cycles_between_set <= `BSV_ASSIGNMENT_DELAY cycles_between_set$D_IN;
	if (cycles_last_request$EN)
	  cycles_last_request <= `BSV_ASSIGNMENT_DELAY
	      cycles_last_request$D_IN;
	if (doneInterruptReg$EN)
	  doneInterruptReg <= `BSV_ASSIGNMENT_DELAY doneInterruptReg$D_IN;
	if (fpga_addr$EN) fpga_addr <= `BSV_ASSIGNMENT_DELAY fpga_addr$D_IN;
	if (host_addr$EN) host_addr <= `BSV_ASSIGNMENT_DELAY host_addr$D_IN;
	if (id$EN) id <= `BSV_ASSIGNMENT_DELAY id$D_IN;
	if (isWriteActive$EN)
	  isWriteActive <= `BSV_ASSIGNMENT_DELAY isWriteActive$D_IN;
	if (opInProgress$EN)
	  opInProgress <= `BSV_ASSIGNMENT_DELAY opInProgress$D_IN;
	if (pc_reqCntr$EN)
	  pc_reqCntr <= `BSV_ASSIGNMENT_DELAY pc_reqCntr$D_IN;
	if (readIn_rv$EN) readIn_rv <= `BSV_ASSIGNMENT_DELAY readIn_rv$D_IN;
	if (read_requests$EN)
	  read_requests <= `BSV_ASSIGNMENT_DELAY read_requests$D_IN;
	if (s_config_readBusy$EN)
	  s_config_readBusy <= `BSV_ASSIGNMENT_DELAY s_config_readBusy$D_IN;
	if (s_config_writeSlave_addrIn_rv$EN)
	  s_config_writeSlave_addrIn_rv <= `BSV_ASSIGNMENT_DELAY
	      s_config_writeSlave_addrIn_rv$D_IN;
	if (s_config_writeSlave_dataIn_rv$EN)
	  s_config_writeSlave_dataIn_rv <= `BSV_ASSIGNMENT_DELAY
	      s_config_writeSlave_dataIn_rv$D_IN;
	if (transfer_length$EN)
	  transfer_length <= `BSV_ASSIGNMENT_DELAY transfer_length$D_IN;
	if (writeIn_rv$EN)
	  writeIn_rv <= `BSV_ASSIGNMENT_DELAY writeIn_rv$D_IN;
	if (write_requests$EN)
	  write_requests <= `BSV_ASSIGNMENT_DELAY write_requests$D_IN;
      end
    if (pc_betweenStart$EN)
      pc_betweenStart <= `BSV_ASSIGNMENT_DELAY pc_betweenStart$D_IN;
    if (pc_start$EN) pc_start <= `BSV_ASSIGNMENT_DELAY pc_start$D_IN;
  end

  always@(posedge CLK_m32_axi_aclk)
  begin
    if (RST_N_m32_axi_arestn == `BSV_RESET_VALUE)
      begin
        fpgaLastCycle <= `BSV_ASSIGNMENT_DELAY 1'd0;
	m_fpga_rd_clkCntr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	m_fpga_rd_lastPut <= `BSV_ASSIGNMENT_DELAY 32'd0;
	m_fpga_rd_putDelay <= `BSV_ASSIGNMENT_DELAY 32'd0;
	m_fpga_rd_task_data_output_reg <= `BSV_ASSIGNMENT_DELAY 77'd0;
	m_fpga_rd_task_data_requests_reg <= `BSV_ASSIGNMENT_DELAY 134'd0;
	m_fpga_rd_totalPuts <= `BSV_ASSIGNMENT_DELAY 32'd0;
	m_fpga_wr_beatsThisRequestCntr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	m_fpga_wr_clkCntr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	m_fpga_wr_lastPut <= `BSV_ASSIGNMENT_DELAY 32'd0;
	m_fpga_wr_putDelay <= `BSV_ASSIGNMENT_DELAY 32'd0;
	m_fpga_wr_task_data_output_reg <= `BSV_ASSIGNMENT_DELAY 77'd0;
	m_fpga_wr_task_data_requests_reg <= `BSV_ASSIGNMENT_DELAY 134'd0;
	m_fpga_wr_totalPuts <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (fpgaLastCycle$EN)
	  fpgaLastCycle <= `BSV_ASSIGNMENT_DELAY fpgaLastCycle$D_IN;
	if (m_fpga_rd_clkCntr$EN)
	  m_fpga_rd_clkCntr <= `BSV_ASSIGNMENT_DELAY m_fpga_rd_clkCntr$D_IN;
	if (m_fpga_rd_lastPut$EN)
	  m_fpga_rd_lastPut <= `BSV_ASSIGNMENT_DELAY m_fpga_rd_lastPut$D_IN;
	if (m_fpga_rd_putDelay$EN)
	  m_fpga_rd_putDelay <= `BSV_ASSIGNMENT_DELAY m_fpga_rd_putDelay$D_IN;
	if (m_fpga_rd_task_data_output_reg$EN)
	  m_fpga_rd_task_data_output_reg <= `BSV_ASSIGNMENT_DELAY
	      m_fpga_rd_task_data_output_reg$D_IN;
	if (m_fpga_rd_task_data_requests_reg$EN)
	  m_fpga_rd_task_data_requests_reg <= `BSV_ASSIGNMENT_DELAY
	      m_fpga_rd_task_data_requests_reg$D_IN;
	if (m_fpga_rd_totalPuts$EN)
	  m_fpga_rd_totalPuts <= `BSV_ASSIGNMENT_DELAY
	      m_fpga_rd_totalPuts$D_IN;
	if (m_fpga_wr_beatsThisRequestCntr$EN)
	  m_fpga_wr_beatsThisRequestCntr <= `BSV_ASSIGNMENT_DELAY
	      m_fpga_wr_beatsThisRequestCntr$D_IN;
	if (m_fpga_wr_clkCntr$EN)
	  m_fpga_wr_clkCntr <= `BSV_ASSIGNMENT_DELAY m_fpga_wr_clkCntr$D_IN;
	if (m_fpga_wr_lastPut$EN)
	  m_fpga_wr_lastPut <= `BSV_ASSIGNMENT_DELAY m_fpga_wr_lastPut$D_IN;
	if (m_fpga_wr_putDelay$EN)
	  m_fpga_wr_putDelay <= `BSV_ASSIGNMENT_DELAY m_fpga_wr_putDelay$D_IN;
	if (m_fpga_wr_task_data_output_reg$EN)
	  m_fpga_wr_task_data_output_reg <= `BSV_ASSIGNMENT_DELAY
	      m_fpga_wr_task_data_output_reg$D_IN;
	if (m_fpga_wr_task_data_requests_reg$EN)
	  m_fpga_wr_task_data_requests_reg <= `BSV_ASSIGNMENT_DELAY
	      m_fpga_wr_task_data_requests_reg$D_IN;
	if (m_fpga_wr_totalPuts$EN)
	  m_fpga_wr_totalPuts <= `BSV_ASSIGNMENT_DELAY
	      m_fpga_wr_totalPuts$D_IN;
      end
  end

  always@(posedge CLK_m64_axi_aclk)
  begin
    if (RST_N_m64_axi_arestn == `BSV_RESET_VALUE)
      begin
        byteAlignerReader_fetchedDatum <= `BSV_ASSIGNMENT_DELAY 1'd0;
	byteAlignerWriter_fetchedDatum <= `BSV_ASSIGNMENT_DELAY 1'd0;
	m_pcie_rd_clkCntr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	m_pcie_rd_lastPut <= `BSV_ASSIGNMENT_DELAY 32'd0;
	m_pcie_rd_putDelay <= `BSV_ASSIGNMENT_DELAY 32'd0;
	m_pcie_rd_task_data_output_reg <= `BSV_ASSIGNMENT_DELAY 75'd0;
	m_pcie_rd_task_data_requests_reg <= `BSV_ASSIGNMENT_DELAY 135'd0;
	m_pcie_rd_totalPuts <= `BSV_ASSIGNMENT_DELAY 32'd0;
	m_pcie_wr_beatsThisRequestCntr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	m_pcie_wr_clkCntr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	m_pcie_wr_lastPut <= `BSV_ASSIGNMENT_DELAY 32'd0;
	m_pcie_wr_putDelay <= `BSV_ASSIGNMENT_DELAY 32'd0;
	m_pcie_wr_task_data_output_reg <= `BSV_ASSIGNMENT_DELAY 75'd0;
	m_pcie_wr_task_data_requests_reg <= `BSV_ASSIGNMENT_DELAY 135'd0;
	m_pcie_wr_totalPuts <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pcieLastCycle <= `BSV_ASSIGNMENT_DELAY 1'd0;
	readConverter_bufferEmpty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	readConverter_byteCntr <= `BSV_ASSIGNMENT_DELAY 64'd0;
	readConverter_wordInCntr <= `BSV_ASSIGNMENT_DELAY 1'd0;
	writeConverter_buffer_0 <= `BSV_ASSIGNMENT_DELAY 256'd0;
	writeConverter_byteCntr <= `BSV_ASSIGNMENT_DELAY 64'd0;
	writeConverter_wordInCntr <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (byteAlignerReader_fetchedDatum$EN)
	  byteAlignerReader_fetchedDatum <= `BSV_ASSIGNMENT_DELAY
	      byteAlignerReader_fetchedDatum$D_IN;
	if (byteAlignerWriter_fetchedDatum$EN)
	  byteAlignerWriter_fetchedDatum <= `BSV_ASSIGNMENT_DELAY
	      byteAlignerWriter_fetchedDatum$D_IN;
	if (m_pcie_rd_clkCntr$EN)
	  m_pcie_rd_clkCntr <= `BSV_ASSIGNMENT_DELAY m_pcie_rd_clkCntr$D_IN;
	if (m_pcie_rd_lastPut$EN)
	  m_pcie_rd_lastPut <= `BSV_ASSIGNMENT_DELAY m_pcie_rd_lastPut$D_IN;
	if (m_pcie_rd_putDelay$EN)
	  m_pcie_rd_putDelay <= `BSV_ASSIGNMENT_DELAY m_pcie_rd_putDelay$D_IN;
	if (m_pcie_rd_task_data_output_reg$EN)
	  m_pcie_rd_task_data_output_reg <= `BSV_ASSIGNMENT_DELAY
	      m_pcie_rd_task_data_output_reg$D_IN;
	if (m_pcie_rd_task_data_requests_reg$EN)
	  m_pcie_rd_task_data_requests_reg <= `BSV_ASSIGNMENT_DELAY
	      m_pcie_rd_task_data_requests_reg$D_IN;
	if (m_pcie_rd_totalPuts$EN)
	  m_pcie_rd_totalPuts <= `BSV_ASSIGNMENT_DELAY
	      m_pcie_rd_totalPuts$D_IN;
	if (m_pcie_wr_beatsThisRequestCntr$EN)
	  m_pcie_wr_beatsThisRequestCntr <= `BSV_ASSIGNMENT_DELAY
	      m_pcie_wr_beatsThisRequestCntr$D_IN;
	if (m_pcie_wr_clkCntr$EN)
	  m_pcie_wr_clkCntr <= `BSV_ASSIGNMENT_DELAY m_pcie_wr_clkCntr$D_IN;
	if (m_pcie_wr_lastPut$EN)
	  m_pcie_wr_lastPut <= `BSV_ASSIGNMENT_DELAY m_pcie_wr_lastPut$D_IN;
	if (m_pcie_wr_putDelay$EN)
	  m_pcie_wr_putDelay <= `BSV_ASSIGNMENT_DELAY m_pcie_wr_putDelay$D_IN;
	if (m_pcie_wr_task_data_output_reg$EN)
	  m_pcie_wr_task_data_output_reg <= `BSV_ASSIGNMENT_DELAY
	      m_pcie_wr_task_data_output_reg$D_IN;
	if (m_pcie_wr_task_data_requests_reg$EN)
	  m_pcie_wr_task_data_requests_reg <= `BSV_ASSIGNMENT_DELAY
	      m_pcie_wr_task_data_requests_reg$D_IN;
	if (m_pcie_wr_totalPuts$EN)
	  m_pcie_wr_totalPuts <= `BSV_ASSIGNMENT_DELAY
	      m_pcie_wr_totalPuts$D_IN;
	if (pcieLastCycle$EN)
	  pcieLastCycle <= `BSV_ASSIGNMENT_DELAY pcieLastCycle$D_IN;
	if (readConverter_bufferEmpty$EN)
	  readConverter_bufferEmpty <= `BSV_ASSIGNMENT_DELAY
	      readConverter_bufferEmpty$D_IN;
	if (readConverter_byteCntr$EN)
	  readConverter_byteCntr <= `BSV_ASSIGNMENT_DELAY
	      readConverter_byteCntr$D_IN;
	if (readConverter_wordInCntr$EN)
	  readConverter_wordInCntr <= `BSV_ASSIGNMENT_DELAY
	      readConverter_wordInCntr$D_IN;
	if (writeConverter_buffer_0$EN)
	  writeConverter_buffer_0 <= `BSV_ASSIGNMENT_DELAY
	      writeConverter_buffer_0$D_IN;
	if (writeConverter_byteCntr$EN)
	  writeConverter_byteCntr <= `BSV_ASSIGNMENT_DELAY
	      writeConverter_byteCntr$D_IN;
	if (writeConverter_wordInCntr$EN)
	  writeConverter_wordInCntr <= `BSV_ASSIGNMENT_DELAY
	      writeConverter_wordInCntr$D_IN;
      end
    if (byteAlignerReader_buffer$EN)
      byteAlignerReader_buffer <= `BSV_ASSIGNMENT_DELAY
	  byteAlignerReader_buffer$D_IN;
    if (byteAlignerReader_bytes_in$EN)
      byteAlignerReader_bytes_in <= `BSV_ASSIGNMENT_DELAY
	  byteAlignerReader_bytes_in$D_IN;
    if (byteAlignerReader_bytes_left_in_buffer$EN)
      byteAlignerReader_bytes_left_in_buffer <= `BSV_ASSIGNMENT_DELAY
	  byteAlignerReader_bytes_left_in_buffer$D_IN;
    if (byteAlignerReader_bytes_out$EN)
      byteAlignerReader_bytes_out <= `BSV_ASSIGNMENT_DELAY
	  byteAlignerReader_bytes_out$D_IN;
    if (byteAlignerReader_bytes_out_needed$EN)
      byteAlignerReader_bytes_out_needed <= `BSV_ASSIGNMENT_DELAY
	  byteAlignerReader_bytes_out_needed$D_IN;
    if (byteAlignerReader_bytes_total$EN)
      byteAlignerReader_bytes_total <= `BSV_ASSIGNMENT_DELAY
	  byteAlignerReader_bytes_total$D_IN;
    if (byteAlignerWriter_buffer$EN)
      byteAlignerWriter_buffer <= `BSV_ASSIGNMENT_DELAY
	  byteAlignerWriter_buffer$D_IN;
    if (byteAlignerWriter_bytes_in$EN)
      byteAlignerWriter_bytes_in <= `BSV_ASSIGNMENT_DELAY
	  byteAlignerWriter_bytes_in$D_IN;
    if (byteAlignerWriter_bytes_left_in_buffer$EN)
      byteAlignerWriter_bytes_left_in_buffer <= `BSV_ASSIGNMENT_DELAY
	  byteAlignerWriter_bytes_left_in_buffer$D_IN;
    if (byteAlignerWriter_bytes_out$EN)
      byteAlignerWriter_bytes_out <= `BSV_ASSIGNMENT_DELAY
	  byteAlignerWriter_bytes_out$D_IN;
    if (byteAlignerWriter_bytes_out_needed$EN)
      byteAlignerWriter_bytes_out_needed <= `BSV_ASSIGNMENT_DELAY
	  byteAlignerWriter_bytes_out_needed$D_IN;
    if (byteAlignerWriter_bytes_total$EN)
      byteAlignerWriter_bytes_total <= `BSV_ASSIGNMENT_DELAY
	  byteAlignerWriter_bytes_total$D_IN;
    if (readConverter_buffer$EN)
      readConverter_buffer <= `BSV_ASSIGNMENT_DELAY readConverter_buffer$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    byteAlignerReader_buffer =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    byteAlignerReader_bytes_in = 64'hAAAAAAAAAAAAAAAA;
    byteAlignerReader_bytes_left_in_buffer = 6'h2A;
    byteAlignerReader_bytes_out = 64'hAAAAAAAAAAAAAAAA;
    byteAlignerReader_bytes_out_needed = 6'h2A;
    byteAlignerReader_bytes_total = 64'hAAAAAAAAAAAAAAAA;
    byteAlignerReader_fetchedDatum = 1'h0;
    byteAlignerWriter_buffer =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    byteAlignerWriter_bytes_in = 64'hAAAAAAAAAAAAAAAA;
    byteAlignerWriter_bytes_left_in_buffer = 6'h2A;
    byteAlignerWriter_bytes_out = 64'hAAAAAAAAAAAAAAAA;
    byteAlignerWriter_bytes_out_needed = 6'h2A;
    byteAlignerWriter_bytes_total = 64'hAAAAAAAAAAAAAAAA;
    byteAlignerWriter_fetchedDatum = 1'h0;
    clkCntr = 32'hAAAAAAAA;
    cycles_between = 64'hAAAAAAAAAAAAAAAA;
    cycles_between_set = 64'hAAAAAAAAAAAAAAAA;
    cycles_last_request = 64'hAAAAAAAAAAAAAAAA;
    doneInterruptReg = 1'h0;
    fpgaLastCycle = 1'h0;
    fpga_addr = 64'hAAAAAAAAAAAAAAAA;
    host_addr = 64'hAAAAAAAAAAAAAAAA;
    id = 64'hAAAAAAAAAAAAAAAA;
    isWriteActive = 1'h0;
    m_fpga_rd_clkCntr = 32'hAAAAAAAA;
    m_fpga_rd_lastPut = 32'hAAAAAAAA;
    m_fpga_rd_putDelay = 32'hAAAAAAAA;
    m_fpga_rd_task_data_output_reg = 77'h0AAAAAAAAAAAAAAAAAAA;
    m_fpga_rd_task_data_requests_reg =
	134'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    m_fpga_rd_totalPuts = 32'hAAAAAAAA;
    m_fpga_wr_beatsThisRequestCntr = 8'hAA;
    m_fpga_wr_clkCntr = 32'hAAAAAAAA;
    m_fpga_wr_lastPut = 32'hAAAAAAAA;
    m_fpga_wr_putDelay = 32'hAAAAAAAA;
    m_fpga_wr_task_data_output_reg = 77'h0AAAAAAAAAAAAAAAAAAA;
    m_fpga_wr_task_data_requests_reg =
	134'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    m_fpga_wr_totalPuts = 32'hAAAAAAAA;
    m_pcie_rd_clkCntr = 32'hAAAAAAAA;
    m_pcie_rd_lastPut = 32'hAAAAAAAA;
    m_pcie_rd_putDelay = 32'hAAAAAAAA;
    m_pcie_rd_task_data_output_reg = 75'h2AAAAAAAAAAAAAAAAAA;
    m_pcie_rd_task_data_requests_reg =
	135'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    m_pcie_rd_totalPuts = 32'hAAAAAAAA;
    m_pcie_wr_beatsThisRequestCntr = 8'hAA;
    m_pcie_wr_clkCntr = 32'hAAAAAAAA;
    m_pcie_wr_lastPut = 32'hAAAAAAAA;
    m_pcie_wr_putDelay = 32'hAAAAAAAA;
    m_pcie_wr_task_data_output_reg = 75'h2AAAAAAAAAAAAAAAAAA;
    m_pcie_wr_task_data_requests_reg =
	135'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    m_pcie_wr_totalPuts = 32'hAAAAAAAA;
    opInProgress = 1'h0;
    pc_betweenStart = 32'hAAAAAAAA;
    pc_reqCntr = 12'hAAA;
    pc_start = 32'hAAAAAAAA;
    pcieLastCycle = 1'h0;
    readConverter_buffer =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    readConverter_bufferEmpty = 1'h0;
    readConverter_byteCntr = 64'hAAAAAAAAAAAAAAAA;
    readConverter_wordInCntr = 1'h0;
    readIn_rv = 193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    read_requests = 64'hAAAAAAAAAAAAAAAA;
    s_config_readBusy = 1'h0;
    s_config_writeSlave_addrIn_rv = 68'hAAAAAAAAAAAAAAAAA;
    s_config_writeSlave_dataIn_rv = 73'h0AAAAAAAAAAAAAAAAAA;
    transfer_length = 64'hAAAAAAAAAAAAAAAA;
    writeConverter_buffer_0 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    writeConverter_byteCntr = 64'hAAAAAAAAAAAAAAAA;
    writeConverter_wordInCntr = 2'h2;
    writeIn_rv = 193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    write_requests = 64'hAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handleRead)
	$display("btt org %d, btt after %d", readIn_rv[63:0], btt__h102029);
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_7) &&
	  (WILL_FIRE_RL_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_8))
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 119, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_s_config_axiReadSpecial_7,\n  RL_s_config_axiReadSpecialIsHandled_7] and [RL_s_config_axiReadSpecial_8,\n  RL_s_config_axiReadSpecialIsHandled_8] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_axiReadSpecialIsHandled &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecialIsHandled)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecialIsHandled_1 and\n  RL_s_config_1_axiWriteSpecialIsHandled called conflicting methods wset and\n  wset of module instance s_config_writeIsHandled.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_1 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_1 and\n  RL_s_config_1_axiWriteSpecial called conflicting methods first and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_1 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_1 and\n  RL_s_config_1_axiWriteSpecial called conflicting methods deq and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_1 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_1 and\n  RL_s_config_1_axiWriteSpecial called conflicting methods enq and enq of\n  module instance s_config_writeSlave_out.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_1 &&
	  WILL_FIRE_RL_s_config_axiReadSpecialIsHandled)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecialIsHandled_2 and\n  RL_s_config_1_axiWriteSpecialIsHandled_1 called conflicting methods wset and\n  wset of module instance s_config_writeIsHandled.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_1 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecialIsHandled)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecialIsHandled_2 and\n  RL_s_config_1_axiWriteSpecialIsHandled called conflicting methods wset and\n  wset of module instance s_config_writeIsHandled.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_1)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_2 and\n  RL_s_config_1_axiWriteSpecial_1 called conflicting methods first and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_1)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_2 and\n  RL_s_config_1_axiWriteSpecial_1 called conflicting methods deq and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_1)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_2 and\n  RL_s_config_1_axiWriteSpecial_1 called conflicting methods enq and enq of\n  module instance s_config_writeSlave_out.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_2 and\n  RL_s_config_1_axiWriteSpecial called conflicting methods first and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_2 and\n  RL_s_config_1_axiWriteSpecial called conflicting methods deq and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_2 and\n  RL_s_config_1_axiWriteSpecial called conflicting methods enq and enq of\n  module instance s_config_writeSlave_out.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_2 &&
	  WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_1)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecialIsHandled_3 and\n  RL_s_config_1_axiWriteSpecialIsHandled_2 called conflicting methods wset and\n  wset of module instance s_config_writeIsHandled.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_2 &&
	  WILL_FIRE_RL_s_config_axiReadSpecialIsHandled)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecialIsHandled_3 and\n  RL_s_config_1_axiWriteSpecialIsHandled_1 called conflicting methods wset and\n  wset of module instance s_config_writeIsHandled.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_2 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecialIsHandled)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecialIsHandled_3 and\n  RL_s_config_1_axiWriteSpecialIsHandled called conflicting methods wset and\n  wset of module instance s_config_writeIsHandled.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_2)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_3 and\n  RL_s_config_1_axiWriteSpecial_2 called conflicting methods first and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_2)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_3 and\n  RL_s_config_1_axiWriteSpecial_2 called conflicting methods deq and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_2)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_3 and\n  RL_s_config_1_axiWriteSpecial_2 called conflicting methods enq and enq of\n  module instance s_config_writeSlave_out.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_1)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_3 and\n  RL_s_config_1_axiWriteSpecial_1 called conflicting methods first and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_1)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_3 and\n  RL_s_config_1_axiWriteSpecial_1 called conflicting methods deq and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_1)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_3 and\n  RL_s_config_1_axiWriteSpecial_1 called conflicting methods enq and enq of\n  module instance s_config_writeSlave_out.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_3 and\n  RL_s_config_1_axiWriteSpecial called conflicting methods first and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_3 and\n  RL_s_config_1_axiWriteSpecial called conflicting methods deq and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_3 and\n  RL_s_config_1_axiWriteSpecial called conflicting methods enq and enq of\n  module instance s_config_writeSlave_out.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_3 &&
	  WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_2)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecialIsHandled_4 and\n  RL_s_config_1_axiWriteSpecialIsHandled_3 called conflicting methods wset and\n  wset of module instance s_config_writeIsHandled.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_3 &&
	  WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_1)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecialIsHandled_4 and\n  RL_s_config_1_axiWriteSpecialIsHandled_2 called conflicting methods wset and\n  wset of module instance s_config_writeIsHandled.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_3 &&
	  WILL_FIRE_RL_s_config_axiReadSpecialIsHandled)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecialIsHandled_4 and\n  RL_s_config_1_axiWriteSpecialIsHandled_1 called conflicting methods wset and\n  wset of module instance s_config_writeIsHandled.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_3 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecialIsHandled)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecialIsHandled_4 and\n  RL_s_config_1_axiWriteSpecialIsHandled called conflicting methods wset and\n  wset of module instance s_config_writeIsHandled.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_3)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_4 and\n  RL_s_config_1_axiWriteSpecial_3 called conflicting methods first and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_3)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_4 and\n  RL_s_config_1_axiWriteSpecial_3 called conflicting methods deq and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_3)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_4 and\n  RL_s_config_1_axiWriteSpecial_3 called conflicting methods enq and enq of\n  module instance s_config_writeSlave_out.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_2)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_4 and\n  RL_s_config_1_axiWriteSpecial_2 called conflicting methods first and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_2)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_4 and\n  RL_s_config_1_axiWriteSpecial_2 called conflicting methods deq and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_2)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_4 and\n  RL_s_config_1_axiWriteSpecial_2 called conflicting methods enq and enq of\n  module instance s_config_writeSlave_out.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_1)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_4 and\n  RL_s_config_1_axiWriteSpecial_1 called conflicting methods first and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_1)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_4 and\n  RL_s_config_1_axiWriteSpecial_1 called conflicting methods deq and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_1)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_4 and\n  RL_s_config_1_axiWriteSpecial_1 called conflicting methods enq and enq of\n  module instance s_config_writeSlave_out.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_4 and\n  RL_s_config_1_axiWriteSpecial called conflicting methods first and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_4 and\n  RL_s_config_1_axiWriteSpecial called conflicting methods deq and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_4 and\n  RL_s_config_1_axiWriteSpecial called conflicting methods enq and enq of\n  module instance s_config_writeSlave_out.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_4 &&
	  WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_3)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecialIsHandled_5 and\n  RL_s_config_1_axiWriteSpecialIsHandled_4 called conflicting methods wset and\n  wset of module instance s_config_writeIsHandled.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_4 &&
	  WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_2)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecialIsHandled_5 and\n  RL_s_config_1_axiWriteSpecialIsHandled_3 called conflicting methods wset and\n  wset of module instance s_config_writeIsHandled.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_4 &&
	  WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_1)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecialIsHandled_5 and\n  RL_s_config_1_axiWriteSpecialIsHandled_2 called conflicting methods wset and\n  wset of module instance s_config_writeIsHandled.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_4 &&
	  WILL_FIRE_RL_s_config_axiReadSpecialIsHandled)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecialIsHandled_5 and\n  RL_s_config_1_axiWriteSpecialIsHandled_1 called conflicting methods wset and\n  wset of module instance s_config_writeIsHandled.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_4 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecialIsHandled)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecialIsHandled_5 and\n  RL_s_config_1_axiWriteSpecialIsHandled called conflicting methods wset and\n  wset of module instance s_config_writeIsHandled.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_4)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_5 and\n  RL_s_config_1_axiWriteSpecial_4 called conflicting methods first and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_4)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_5 and\n  RL_s_config_1_axiWriteSpecial_4 called conflicting methods deq and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_4)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_5 and\n  RL_s_config_1_axiWriteSpecial_4 called conflicting methods enq and enq of\n  module instance s_config_writeSlave_out.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_3)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_5 and\n  RL_s_config_1_axiWriteSpecial_3 called conflicting methods first and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_3)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_5 and\n  RL_s_config_1_axiWriteSpecial_3 called conflicting methods deq and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_3)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_5 and\n  RL_s_config_1_axiWriteSpecial_3 called conflicting methods enq and enq of\n  module instance s_config_writeSlave_out.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_2)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_5 and\n  RL_s_config_1_axiWriteSpecial_2 called conflicting methods first and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_2)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_5 and\n  RL_s_config_1_axiWriteSpecial_2 called conflicting methods deq and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_2)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_5 and\n  RL_s_config_1_axiWriteSpecial_2 called conflicting methods enq and enq of\n  module instance s_config_writeSlave_out.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_1)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_5 and\n  RL_s_config_1_axiWriteSpecial_1 called conflicting methods first and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_1)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_5 and\n  RL_s_config_1_axiWriteSpecial_1 called conflicting methods deq and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_1)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_5 and\n  RL_s_config_1_axiWriteSpecial_1 called conflicting methods enq and enq of\n  module instance s_config_writeSlave_out.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_5 and\n  RL_s_config_1_axiWriteSpecial called conflicting methods first and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_5 and\n  RL_s_config_1_axiWriteSpecial called conflicting methods deq and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_5 and\n  RL_s_config_1_axiWriteSpecial called conflicting methods enq and enq of\n  module instance s_config_writeSlave_out.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_6 &&
	  WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_4)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecialIsHandled_6 and\n  RL_s_config_1_axiWriteSpecialIsHandled_5 called conflicting methods wset and\n  wset of module instance s_config_writeIsHandled.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_6 &&
	  WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_3)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecialIsHandled_6 and\n  RL_s_config_1_axiWriteSpecialIsHandled_4 called conflicting methods wset and\n  wset of module instance s_config_writeIsHandled.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_6 &&
	  WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_2)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecialIsHandled_6 and\n  RL_s_config_1_axiWriteSpecialIsHandled_3 called conflicting methods wset and\n  wset of module instance s_config_writeIsHandled.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_6 &&
	  WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_1)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecialIsHandled_6 and\n  RL_s_config_1_axiWriteSpecialIsHandled_2 called conflicting methods wset and\n  wset of module instance s_config_writeIsHandled.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_6 &&
	  WILL_FIRE_RL_s_config_axiReadSpecialIsHandled)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecialIsHandled_6 and\n  RL_s_config_1_axiWriteSpecialIsHandled_1 called conflicting methods wset and\n  wset of module instance s_config_writeIsHandled.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_6 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecialIsHandled)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecialIsHandled_6 and\n  RL_s_config_1_axiWriteSpecialIsHandled called conflicting methods wset and\n  wset of module instance s_config_writeIsHandled.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_s_config_axiReadSpecial_1 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_1) &&
	  (WILL_FIRE_RL_s_config_axiReadSpecial_2 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_2 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_3 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_3 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_4 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_4 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_5 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_5 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_6 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_6 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_7 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_8))
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 119, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_s_config_axiReadSpecial_1,\n  RL_s_config_axiReadSpecialIsHandled_1] and [RL_s_config_axiReadSpecial_2,\n  RL_s_config_axiReadSpecialIsHandled_2, RL_s_config_axiReadSpecial_3,\n  RL_s_config_axiReadSpecialIsHandled_3, RL_s_config_axiReadSpecial_4,\n  RL_s_config_axiReadSpecialIsHandled_4, RL_s_config_axiReadSpecial_5,\n  RL_s_config_axiReadSpecialIsHandled_5, RL_s_config_axiReadSpecial_6,\n  RL_s_config_axiReadSpecialIsHandled_6, RL_s_config_axiReadSpecial_7,\n  RL_s_config_axiReadSpecialIsHandled_7, RL_s_config_axiReadSpecial_8,\n  RL_s_config_axiReadSpecialIsHandled_8] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_s_config_axiReadSpecial_2 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_2) &&
	  (WILL_FIRE_RL_s_config_axiReadSpecial_3 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_3 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_4 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_4 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_5 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_5 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_6 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_6 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_7 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_8))
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 119, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_s_config_axiReadSpecial_2,\n  RL_s_config_axiReadSpecialIsHandled_2] and [RL_s_config_axiReadSpecial_3,\n  RL_s_config_axiReadSpecialIsHandled_3, RL_s_config_axiReadSpecial_4,\n  RL_s_config_axiReadSpecialIsHandled_4, RL_s_config_axiReadSpecial_5,\n  RL_s_config_axiReadSpecialIsHandled_5, RL_s_config_axiReadSpecial_6,\n  RL_s_config_axiReadSpecialIsHandled_6, RL_s_config_axiReadSpecial_7,\n  RL_s_config_axiReadSpecialIsHandled_7, RL_s_config_axiReadSpecial_8,\n  RL_s_config_axiReadSpecialIsHandled_8] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_s_config_axiReadSpecial_4 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_4) &&
	  (WILL_FIRE_RL_s_config_axiReadSpecial_5 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_5 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_6 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_6 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_7 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_8))
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 119, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_s_config_axiReadSpecial_4,\n  RL_s_config_axiReadSpecialIsHandled_4] and [RL_s_config_axiReadSpecial_5,\n  RL_s_config_axiReadSpecialIsHandled_5, RL_s_config_axiReadSpecial_6,\n  RL_s_config_axiReadSpecialIsHandled_6, RL_s_config_axiReadSpecial_7,\n  RL_s_config_axiReadSpecialIsHandled_7, RL_s_config_axiReadSpecial_8,\n  RL_s_config_axiReadSpecialIsHandled_8] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_s_config_axiReadSpecial_3 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_3) &&
	  (WILL_FIRE_RL_s_config_axiReadSpecial_4 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_4 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_5 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_5 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_6 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_6 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_7 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_8))
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 119, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_s_config_axiReadSpecial_3,\n  RL_s_config_axiReadSpecialIsHandled_3] and [RL_s_config_axiReadSpecial_4,\n  RL_s_config_axiReadSpecialIsHandled_4, RL_s_config_axiReadSpecial_5,\n  RL_s_config_axiReadSpecialIsHandled_5, RL_s_config_axiReadSpecial_6,\n  RL_s_config_axiReadSpecialIsHandled_6, RL_s_config_axiReadSpecial_7,\n  RL_s_config_axiReadSpecialIsHandled_7, RL_s_config_axiReadSpecial_8,\n  RL_s_config_axiReadSpecialIsHandled_8] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_s_config_axiReadSpecial_5 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_5) &&
	  (WILL_FIRE_RL_s_config_axiReadSpecial_6 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_6 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_7 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_8))
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 119, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_s_config_axiReadSpecial_5,\n  RL_s_config_axiReadSpecialIsHandled_5] and [RL_s_config_axiReadSpecial_6,\n  RL_s_config_axiReadSpecialIsHandled_6, RL_s_config_axiReadSpecial_7,\n  RL_s_config_axiReadSpecialIsHandled_7, RL_s_config_axiReadSpecial_8,\n  RL_s_config_axiReadSpecialIsHandled_8] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_s_config_axiReadSpecial_6 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_6) &&
	  (WILL_FIRE_RL_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_7 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_8))
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 119, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_s_config_axiReadSpecial_6,\n  RL_s_config_axiReadSpecialIsHandled_6] and [RL_s_config_axiReadSpecial_7,\n  RL_s_config_axiReadSpecialIsHandled_7, RL_s_config_axiReadSpecial_8,\n  RL_s_config_axiReadSpecialIsHandled_8] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_s_config_axiReadSpecial ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled) &&
	  (WILL_FIRE_RL_s_config_axiReadSpecial_1 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_1 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_2 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_2 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_3 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_3 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_4 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_4 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_5 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_5 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_6 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_6 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_7 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_8))
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 119, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_s_config_axiReadSpecial,\n  RL_s_config_axiReadSpecialIsHandled] and [RL_s_config_axiReadSpecial_1,\n  RL_s_config_axiReadSpecialIsHandled_1, RL_s_config_axiReadSpecial_2,\n  RL_s_config_axiReadSpecialIsHandled_2, RL_s_config_axiReadSpecial_3,\n  RL_s_config_axiReadSpecialIsHandled_3, RL_s_config_axiReadSpecial_4,\n  RL_s_config_axiReadSpecialIsHandled_4, RL_s_config_axiReadSpecial_5,\n  RL_s_config_axiReadSpecialIsHandled_5, RL_s_config_axiReadSpecial_6,\n  RL_s_config_axiReadSpecialIsHandled_6, RL_s_config_axiReadSpecial_7,\n  RL_s_config_axiReadSpecialIsHandled_7, RL_s_config_axiReadSpecial_8,\n  RL_s_config_axiReadSpecialIsHandled_8] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_s_config_axiReadSpecial ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_1 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_1 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_2 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_2 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_3 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_3 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_4 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_4 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_5 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_5 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_6 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_6 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_7 ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_8) &&
	  WILL_FIRE_RL_s_config_axiReadFallback)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 119, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_s_config_axiReadSpecial,\n  RL_s_config_axiReadSpecialIsHandled, RL_s_config_axiReadSpecial_1,\n  RL_s_config_axiReadSpecialIsHandled_1, RL_s_config_axiReadSpecial_2,\n  RL_s_config_axiReadSpecialIsHandled_2, RL_s_config_axiReadSpecial_3,\n  RL_s_config_axiReadSpecialIsHandled_3, RL_s_config_axiReadSpecial_4,\n  RL_s_config_axiReadSpecialIsHandled_4, RL_s_config_axiReadSpecial_5,\n  RL_s_config_axiReadSpecialIsHandled_5, RL_s_config_axiReadSpecial_6,\n  RL_s_config_axiReadSpecialIsHandled_6, RL_s_config_axiReadSpecial_7,\n  RL_s_config_axiReadSpecialIsHandled_7, RL_s_config_axiReadSpecial_8,\n  RL_s_config_axiReadSpecialIsHandled_8] and [RL_s_config_axiReadFallback] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_6 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_5)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_6 and\n  RL_s_config_1_axiWriteSpecial_5 called conflicting methods first and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_6 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_5)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_6 and\n  RL_s_config_1_axiWriteSpecial_5 called conflicting methods deq and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_6 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_5)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_6 and\n  RL_s_config_1_axiWriteSpecial_5 called conflicting methods enq and enq of\n  module instance s_config_writeSlave_out.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_6 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_4)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_6 and\n  RL_s_config_1_axiWriteSpecial_4 called conflicting methods first and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_6 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_4)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_6 and\n  RL_s_config_1_axiWriteSpecial_4 called conflicting methods deq and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_6 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_4)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_6 and\n  RL_s_config_1_axiWriteSpecial_4 called conflicting methods enq and enq of\n  module instance s_config_writeSlave_out.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_6 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_3)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_6 and\n  RL_s_config_1_axiWriteSpecial_3 called conflicting methods first and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_6 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_3)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_6 and\n  RL_s_config_1_axiWriteSpecial_3 called conflicting methods deq and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_6 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_3)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_6 and\n  RL_s_config_1_axiWriteSpecial_3 called conflicting methods enq and enq of\n  module instance s_config_writeSlave_out.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_6 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_2)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_6 and\n  RL_s_config_1_axiWriteSpecial_2 called conflicting methods first and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_6 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_2)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_6 and\n  RL_s_config_1_axiWriteSpecial_2 called conflicting methods deq and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_6 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_2)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_6 and\n  RL_s_config_1_axiWriteSpecial_2 called conflicting methods enq and enq of\n  module instance s_config_writeSlave_out.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_6 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_1)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_6 and\n  RL_s_config_1_axiWriteSpecial_1 called conflicting methods first and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_6 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_1)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_6 and\n  RL_s_config_1_axiWriteSpecial_1 called conflicting methods deq and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_6 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial_1)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_6 and\n  RL_s_config_1_axiWriteSpecial_1 called conflicting methods enq and enq of\n  module instance s_config_writeSlave_out.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_6 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_6 and\n  RL_s_config_1_axiWriteSpecial called conflicting methods first and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_6 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_6 and\n  RL_s_config_1_axiWriteSpecial called conflicting methods deq and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_6 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial)
	$display("Error: \"../BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_6 and\n  RL_s_config_1_axiWriteSpecial called conflicting methods enq and enq of\n  module instance s_config_writeSlave_out.\n");
  end
  // synopsys translate_on

  // synopsys translate_off
  always@(negedge CLK_m32_axi_aclk)
  begin
    #0;
    if (RST_N_m32_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_fpga_wr_reqGen_finishRequest)
	$display("[WRITE] request:");
    if (RST_N_m32_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_fpga_wr_reqGen_finishRequest)
	$display("[WRITE] bytes_first: %d",
		 m_fpga_wr_reqGen_intermediateBuffer2$D_OUT[201:196]);
    if (RST_N_m32_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_fpga_wr_reqGen_finishRequest)
	$display("[WRITE] bytes_last: %d",
		 m_fpga_wr_reqGen_intermediateBuffer2$D_OUT[195:190]);
    if (RST_N_m32_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_fpga_wr_reqGen_finishRequest)
	$display("[WRITE] transfers_total: %d",
		 m_fpga_wr_reqGen_intermediateBuffer2$D_OUT[189:132]);
    if (RST_N_m32_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_fpga_wr_reqGen_finishRequest)
	$display("[WRITE] addr_offset: %d",
		 m_fpga_wr_reqGen_intermediateBuffer2$D_OUT[73:68]);
    if (RST_N_m32_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_fpga_wr_reqGen_finishRequest)
	$display("[WRITE] requests_last: %d",
		 m_fpga_wr_reqGen_intermediateBuffer2$D_OUT[139:132]);
    if (RST_N_m32_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_fpga_wr_reqGen_finishRequest)
	$display("[WRITE] requests_total: %d",
		 request_data_requests_total__h40467);
    if (RST_N_m32_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_fpga_wr_reqGen_finishRequest)
	$display("[WRITE] address: %x", request_data_address__h40468);
    if (RST_N_m32_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_fpga_rd_reqGen_finishRequest)
	$display("[READ] request:");
    if (RST_N_m32_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_fpga_rd_reqGen_finishRequest)
	$display("[READ] bytes_first: %d",
		 m_fpga_rd_reqGen_intermediateBuffer2$D_OUT[201:196]);
    if (RST_N_m32_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_fpga_rd_reqGen_finishRequest)
	$display("[READ] bytes_last: %d",
		 m_fpga_rd_reqGen_intermediateBuffer2$D_OUT[195:190]);
    if (RST_N_m32_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_fpga_rd_reqGen_finishRequest)
	$display("[READ] transfers_total: %d",
		 m_fpga_rd_reqGen_intermediateBuffer2$D_OUT[189:132]);
    if (RST_N_m32_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_fpga_rd_reqGen_finishRequest)
	$display("[READ] addr_offset: %d",
		 m_fpga_rd_reqGen_intermediateBuffer2$D_OUT[73:68]);
    if (RST_N_m32_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_fpga_rd_reqGen_finishRequest)
	$display("[READ] requests_last: %d",
		 m_fpga_rd_reqGen_intermediateBuffer2$D_OUT[139:132]);
    if (RST_N_m32_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_fpga_rd_reqGen_finishRequest)
	$display("[READ] requests_total: %d",
		 request_data_requests_total__h55799);
    if (RST_N_m32_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_fpga_rd_reqGen_finishRequest)
	$display("[READ] address: %x", request_data_address__h55800);
  end
  // synopsys translate_on

  // synopsys translate_off
  always@(negedge CLK_m64_axi_aclk)
  begin
    #0;
    if (RST_N_m64_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_pcie_wr_reqGen_finishRequest)
	$display("[WRITE] request:");
    if (RST_N_m64_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_pcie_wr_reqGen_finishRequest)
	$display("[WRITE] bytes_first: %d",
		 m_pcie_wr_reqGen_intermediateBuffer2$D_OUT[200:196]);
    if (RST_N_m64_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_pcie_wr_reqGen_finishRequest)
	$display("[WRITE] bytes_last: %d",
		 m_pcie_wr_reqGen_intermediateBuffer2$D_OUT[195:191]);
    if (RST_N_m64_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_pcie_wr_reqGen_finishRequest)
	$display("[WRITE] transfers_total: %d",
		 m_pcie_wr_reqGen_intermediateBuffer2$D_OUT[190:132]);
    if (RST_N_m64_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_pcie_wr_reqGen_finishRequest)
	$display("[WRITE] addr_offset: %d",
		 m_pcie_wr_reqGen_intermediateBuffer2$D_OUT[72:68]);
    if (RST_N_m64_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_pcie_wr_reqGen_finishRequest)
	$display("[WRITE] requests_last: %d", requests_last__h26617);
    if (RST_N_m64_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_pcie_wr_reqGen_finishRequest)
	$display("[WRITE] requests_total: %d",
		 request_data_requests_total__h26654);
    if (RST_N_m64_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_pcie_wr_reqGen_finishRequest)
	$display("[WRITE] address: %x", request_data_address__h26655);
    if (RST_N_m64_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_pcie_rd_reqGen_finishRequest)
	$display("[READ] request:");
    if (RST_N_m64_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_pcie_rd_reqGen_finishRequest)
	$display("[READ] bytes_first: %d",
		 m_pcie_rd_reqGen_intermediateBuffer2$D_OUT[200:196]);
    if (RST_N_m64_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_pcie_rd_reqGen_finishRequest)
	$display("[READ] bytes_last: %d",
		 m_pcie_rd_reqGen_intermediateBuffer2$D_OUT[195:191]);
    if (RST_N_m64_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_pcie_rd_reqGen_finishRequest)
	$display("[READ] transfers_total: %d",
		 m_pcie_rd_reqGen_intermediateBuffer2$D_OUT[190:132]);
    if (RST_N_m64_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_pcie_rd_reqGen_finishRequest)
	$display("[READ] addr_offset: %d",
		 m_pcie_rd_reqGen_intermediateBuffer2$D_OUT[72:68]);
    if (RST_N_m64_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_pcie_rd_reqGen_finishRequest)
	$display("[READ] requests_last: %d", requests_last__h36556);
    if (RST_N_m64_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_pcie_rd_reqGen_finishRequest)
	$display("[READ] requests_total: %d",
		 request_data_requests_total__h36593);
    if (RST_N_m64_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_pcie_rd_reqGen_finishRequest)
	$display("[READ] address: %x", request_data_address__h36594);
    if (RST_N_m64_axi_arestn != `BSV_RESET_VALUE)
      if (byteAlignerReader_addr_ff$dEMPTY_N) $display("Init data:");
    if (RST_N_m64_axi_arestn != `BSV_RESET_VALUE)
      if (byteAlignerReader_addr_ff$dEMPTY_N)
	$display("Alignment_initial %d",
		 $unsigned(byteAlignerReader_addr_ff$dD_OUT[68:64]));
    if (RST_N_m64_axi_arestn != `BSV_RESET_VALUE)
      if (byteAlignerReader_addr_ff$dEMPTY_N)
	$display("addr_1_alignment %d",
		 $unsigned(byteAlignerReader_addr_ff$dD_OUT[132:128]));
    if (RST_N_m64_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_byteAlignerReader_forwardOutput &&
	  WILL_FIRE_RL_byteAlignerReader_forwardOutputLast)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueDMA/src/ByteAligner.bsv\", line 119, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_byteAlignerReader_forwardOutput] and\n  [RL_byteAlignerReader_forwardOutputLast] ) fired in the same clock cycle.\n");
    if (RST_N_m64_axi_arestn != `BSV_RESET_VALUE)
      if (byteAlignerWriter_addr_ff$dEMPTY_N) $display("Init data:");
    if (RST_N_m64_axi_arestn != `BSV_RESET_VALUE)
      if (byteAlignerWriter_addr_ff$dEMPTY_N)
	$display("Alignment_initial %d",
		 $unsigned(byteAlignerWriter_addr_ff$dD_OUT[68:64]));
    if (RST_N_m64_axi_arestn != `BSV_RESET_VALUE)
      if (byteAlignerWriter_addr_ff$dEMPTY_N)
	$display("addr_1_alignment %d",
		 $unsigned(byteAlignerWriter_addr_ff$dD_OUT[132:128]));
    if (RST_N_m64_axi_arestn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_byteAlignerWriter_forwardOutput &&
	  WILL_FIRE_RL_byteAlignerWriter_forwardOutputLast)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueDMA/src/ByteAligner.bsv\", line 119, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_byteAlignerWriter_forwardOutput] and\n  [RL_byteAlignerWriter_forwardOutputLast] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkBlueDMA

