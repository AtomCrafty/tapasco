//
// Generated by Bluespec Compiler, version 2015.09.beta2 (build 34689, 2015-09-07)
//
// On Wed Aug 23 14:01:37 PDT 2017
//
//
// Ports:
// Name                         I/O  size props
// S_AXI_arready                  O     1 reg
// S_AXI_rvalid                   O     1 reg
// S_AXI_rdata                    O    64
// S_AXI_rresp                    O     2
// S_AXI_awready                  O     1
// S_AXI_wready                   O     1
// S_AXI_bvalid                   O     1 reg
// S_AXI_bresp                    O     2
// m64_axi_arvalid                O     1 reg
// m64_axi_arid                   O     1
// m64_axi_araddr                 O    64
// m64_axi_arlen                  O     8
// m64_axi_arsize                 O     3
// m64_axi_arburst                O     2
// m64_axi_arlock                 O     1
// m64_axi_arcache                O     4
// m64_axi_arprot                 O     3
// m64_axi_arqos                  O     4
// m64_axi_arregion               O     4
// m64_axi_aruser                 O     1
// m64_axi_rready                 O     1 reg
// m64_axi_awvalid                O     1 reg
// m64_axi_awid                   O     1
// m64_axi_awaddr                 O    64
// m64_axi_awlen                  O     8
// m64_axi_awsize                 O     3
// m64_axi_awburst                O     2
// m64_axi_awlock                 O     1
// m64_axi_awcache                O     4
// m64_axi_awprot                 O     3
// m64_axi_awqos                  O     4
// m64_axi_awregion               O     4
// m64_axi_awuser                 O     1
// m64_axi_wvalid                 O     1 reg
// m64_axi_wdata                  O   256
// m64_axi_wstrb                  O    32
// m64_axi_wlast                  O     1
// m64_axi_wuser                  O     1
// m64_axi_bready                 O     1 reg
// m32_axi_arvalid                O     1 reg
// m32_axi_arid                   O     1
// m32_axi_araddr                 O    64
// m32_axi_arlen                  O     8
// m32_axi_arsize                 O     3
// m32_axi_arburst                O     2
// m32_axi_arlock                 O     1
// m32_axi_arcache                O     4
// m32_axi_arprot                 O     3
// m32_axi_arqos                  O     4
// m32_axi_arregion               O     4
// m32_axi_aruser                 O     1
// m32_axi_rready                 O     1 reg
// m32_axi_awvalid                O     1 reg
// m32_axi_awid                   O     1
// m32_axi_awaddr                 O    64
// m32_axi_awlen                  O     8
// m32_axi_awsize                 O     3
// m32_axi_awburst                O     2
// m32_axi_awlock                 O     1
// m32_axi_awcache                O     4
// m32_axi_awprot                 O     3
// m32_axi_awqos                  O     4
// m32_axi_awregion               O     4
// m32_axi_awuser                 O     1
// m32_axi_wvalid                 O     1 reg
// m32_axi_wdata                  O   512
// m32_axi_wstrb                  O    64
// m32_axi_wlast                  O     1
// m32_axi_wuser                  O     1
// m32_axi_bready                 O     1 reg
// IRQ                            O     1 reg
// m32_axi_aclk                   I     1 clock
// m32_axi_aresetn                I     1 reset
// m64_axi_aclk                   I     1 clock
// m64_axi_aresetn                I     1 reset
// s_axi_aclk                     I     1 clock
// s_axi_aresetn                  I     1 reset
// S_AXI_arvalid                  I     1
// S_AXI_araddr                   I    64 reg
// S_AXI_arprot                   I     3 reg
// S_AXI_rready                   I     1
// S_AXI_awvalid                  I     1
// S_AXI_awaddr                   I    64
// S_AXI_awprot                   I     3
// S_AXI_wvalid                   I     1
// S_AXI_wdata                    I    64
// S_AXI_wstrb                    I     8
// S_AXI_bready                   I     1
// m64_axi_arready                I     1
// m64_axi_rvalid                 I     1
// m64_axi_rid                    I     1 reg
// m64_axi_rdata                  I   256 reg
// m64_axi_rresp                  I     2 reg
// m64_axi_rlast                  I     1 reg
// m64_axi_ruser                  I     1 reg
// m64_axi_awready                I     1
// m64_axi_wready                 I     1
// m64_axi_bvalid                 I     1
// m64_axi_bresp                  I     2 reg
// m64_axi_bid                    I     1 reg
// m64_axi_buser                  I     1 reg
// m32_axi_arready                I     1
// m32_axi_rvalid                 I     1
// m32_axi_rid                    I     1 reg
// m32_axi_rdata                  I   512 reg
// m32_axi_rresp                  I     2 reg
// m32_axi_rlast                  I     1 reg
// m32_axi_ruser                  I     1 reg
// m32_axi_awready                I     1
// m32_axi_wready                 I     1
// m32_axi_bvalid                 I     1
// m32_axi_bresp                  I     2 reg
// m32_axi_bid                    I     1 reg
// m32_axi_buser                  I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkBlueDMAVivado(m32_axi_aclk,
		       m32_axi_aresetn,
		       m64_axi_aclk,
		       m64_axi_aresetn,
		       s_axi_aclk,
		       s_axi_aresetn,

		       S_AXI_arready,

		       S_AXI_arvalid,

		       S_AXI_araddr,

		       S_AXI_arprot,

		       S_AXI_rvalid,

		       S_AXI_rready,

		       S_AXI_rdata,

		       S_AXI_rresp,

		       S_AXI_awready,

		       S_AXI_awvalid,

		       S_AXI_awaddr,

		       S_AXI_awprot,

		       S_AXI_wready,

		       S_AXI_wvalid,

		       S_AXI_wdata,

		       S_AXI_wstrb,

		       S_AXI_bvalid,

		       S_AXI_bready,

		       S_AXI_bresp,

		       m64_axi_arvalid,

		       m64_axi_arready,

		       m64_axi_arid,

		       m64_axi_araddr,

		       m64_axi_arlen,

		       m64_axi_arsize,

		       m64_axi_arburst,

		       m64_axi_arlock,

		       m64_axi_arcache,

		       m64_axi_arprot,

		       m64_axi_arqos,

		       m64_axi_arregion,

		       m64_axi_aruser,

		       m64_axi_rready,

		       m64_axi_rvalid,

		       m64_axi_rid,
		       m64_axi_rdata,
		       m64_axi_rresp,
		       m64_axi_rlast,
		       m64_axi_ruser,

		       m64_axi_awready,

		       m64_axi_awvalid,

		       m64_axi_awid,

		       m64_axi_awaddr,

		       m64_axi_awlen,

		       m64_axi_awsize,

		       m64_axi_awburst,

		       m64_axi_awlock,

		       m64_axi_awcache,

		       m64_axi_awprot,

		       m64_axi_awqos,

		       m64_axi_awregion,

		       m64_axi_awuser,

		       m64_axi_wready,

		       m64_axi_wvalid,

		       m64_axi_wdata,

		       m64_axi_wstrb,

		       m64_axi_wlast,

		       m64_axi_wuser,

		       m64_axi_bvalid,

		       m64_axi_bready,

		       m64_axi_bresp,
		       m64_axi_bid,
		       m64_axi_buser,

		       m32_axi_arvalid,

		       m32_axi_arready,

		       m32_axi_arid,

		       m32_axi_araddr,

		       m32_axi_arlen,

		       m32_axi_arsize,

		       m32_axi_arburst,

		       m32_axi_arlock,

		       m32_axi_arcache,

		       m32_axi_arprot,

		       m32_axi_arqos,

		       m32_axi_arregion,

		       m32_axi_aruser,

		       m32_axi_rready,

		       m32_axi_rvalid,

		       m32_axi_rid,
		       m32_axi_rdata,
		       m32_axi_rresp,
		       m32_axi_rlast,
		       m32_axi_ruser,

		       m32_axi_awready,

		       m32_axi_awvalid,

		       m32_axi_awid,

		       m32_axi_awaddr,

		       m32_axi_awlen,

		       m32_axi_awsize,

		       m32_axi_awburst,

		       m32_axi_awlock,

		       m32_axi_awcache,

		       m32_axi_awprot,

		       m32_axi_awqos,

		       m32_axi_awregion,

		       m32_axi_awuser,

		       m32_axi_wready,

		       m32_axi_wvalid,

		       m32_axi_wdata,

		       m32_axi_wstrb,

		       m32_axi_wlast,

		       m32_axi_wuser,

		       m32_axi_bvalid,

		       m32_axi_bready,

		       m32_axi_bresp,
		       m32_axi_bid,
		       m32_axi_buser,

		       IRQ);
  input  m32_axi_aclk;
  input  m32_axi_aresetn;
  input  m64_axi_aclk;
  input  m64_axi_aresetn;
  input  s_axi_aclk;
  input  s_axi_aresetn;

  // value method s_rd_arready
  output S_AXI_arready;

  // action method s_rd_parvalid
  input  S_AXI_arvalid;

  // action method s_rd_paraddr
  input  [63 : 0] S_AXI_araddr;

  // action method s_rd_parprot
  input  [2 : 0] S_AXI_arprot;

  // value method s_rd_rvalid
  output S_AXI_rvalid;

  // action method s_rd_prready
  input  S_AXI_rready;

  // value method s_rd_rdata
  output [63 : 0] S_AXI_rdata;

  // value method s_rd_rresp
  output [1 : 0] S_AXI_rresp;

  // value method s_wr_awready
  output S_AXI_awready;

  // action method s_wr_pawvalid
  input  S_AXI_awvalid;

  // action method s_wr_pawaddr
  input  [63 : 0] S_AXI_awaddr;

  // action method s_wr_pawprot
  input  [2 : 0] S_AXI_awprot;

  // value method s_wr_wready
  output S_AXI_wready;

  // action method s_wr_pwvalid
  input  S_AXI_wvalid;

  // action method s_wr_pwdata
  input  [63 : 0] S_AXI_wdata;

  // action method s_wr_pwstrb
  input  [7 : 0] S_AXI_wstrb;

  // value method s_wr_bvalid
  output S_AXI_bvalid;

  // action method s_wr_pbready
  input  S_AXI_bready;

  // value method s_wr_bresp
  output [1 : 0] S_AXI_bresp;

  // value method pcie_rd_arvalid
  output m64_axi_arvalid;

  // action method pcie_rd_parready
  input  m64_axi_arready;

  // value method pcie_rd_arid
  output m64_axi_arid;

  // value method pcie_rd_araddr
  output [63 : 0] m64_axi_araddr;

  // value method pcie_rd_arlen
  output [7 : 0] m64_axi_arlen;

  // value method pcie_rd_arsize
  output [2 : 0] m64_axi_arsize;

  // value method pcie_rd_arburst
  output [1 : 0] m64_axi_arburst;

  // value method pcie_rd_arlock
  output m64_axi_arlock;

  // value method pcie_rd_arcache
  output [3 : 0] m64_axi_arcache;

  // value method pcie_rd_arprot
  output [2 : 0] m64_axi_arprot;

  // value method pcie_rd_arqos
  output [3 : 0] m64_axi_arqos;

  // value method pcie_rd_arregion
  output [3 : 0] m64_axi_arregion;

  // value method pcie_rd_aruser
  output m64_axi_aruser;

  // value method pcie_rd_rready
  output m64_axi_rready;

  // action method pcie_rd_prvalid
  input  m64_axi_rvalid;

  // action method pcie_rd_prchannel
  input  m64_axi_rid;
  input  [255 : 0] m64_axi_rdata;
  input  [1 : 0] m64_axi_rresp;
  input  m64_axi_rlast;
  input  m64_axi_ruser;

  // action method pcie_wr_pawready
  input  m64_axi_awready;

  // value method pcie_wr_awvalid
  output m64_axi_awvalid;

  // value method pcie_wr_awid
  output m64_axi_awid;

  // value method pcie_wr_awaddr
  output [63 : 0] m64_axi_awaddr;

  // value method pcie_wr_awlen
  output [7 : 0] m64_axi_awlen;

  // value method pcie_wr_awsize
  output [2 : 0] m64_axi_awsize;

  // value method pcie_wr_awburst
  output [1 : 0] m64_axi_awburst;

  // value method pcie_wr_awlock
  output m64_axi_awlock;

  // value method pcie_wr_awcache
  output [3 : 0] m64_axi_awcache;

  // value method pcie_wr_awprot
  output [2 : 0] m64_axi_awprot;

  // value method pcie_wr_awqos
  output [3 : 0] m64_axi_awqos;

  // value method pcie_wr_awregion
  output [3 : 0] m64_axi_awregion;

  // value method pcie_wr_awuser
  output m64_axi_awuser;

  // action method pcie_wr_pwready
  input  m64_axi_wready;

  // value method pcie_wr_wvalid
  output m64_axi_wvalid;

  // value method pcie_wr_wdata
  output [255 : 0] m64_axi_wdata;

  // value method pcie_wr_wstrb
  output [31 : 0] m64_axi_wstrb;

  // value method pcie_wr_wlast
  output m64_axi_wlast;

  // value method pcie_wr_wuser
  output m64_axi_wuser;

  // action method pcie_wr_pbvalid
  input  m64_axi_bvalid;

  // value method pcie_wr_bready
  output m64_axi_bready;

  // action method pcie_wr_bin
  input  [1 : 0] m64_axi_bresp;
  input  m64_axi_bid;
  input  m64_axi_buser;

  // value method fpga_rd_arvalid
  output m32_axi_arvalid;

  // action method fpga_rd_parready
  input  m32_axi_arready;

  // value method fpga_rd_arid
  output m32_axi_arid;

  // value method fpga_rd_araddr
  output [63 : 0] m32_axi_araddr;

  // value method fpga_rd_arlen
  output [7 : 0] m32_axi_arlen;

  // value method fpga_rd_arsize
  output [2 : 0] m32_axi_arsize;

  // value method fpga_rd_arburst
  output [1 : 0] m32_axi_arburst;

  // value method fpga_rd_arlock
  output m32_axi_arlock;

  // value method fpga_rd_arcache
  output [3 : 0] m32_axi_arcache;

  // value method fpga_rd_arprot
  output [2 : 0] m32_axi_arprot;

  // value method fpga_rd_arqos
  output [3 : 0] m32_axi_arqos;

  // value method fpga_rd_arregion
  output [3 : 0] m32_axi_arregion;

  // value method fpga_rd_aruser
  output m32_axi_aruser;

  // value method fpga_rd_rready
  output m32_axi_rready;

  // action method fpga_rd_prvalid
  input  m32_axi_rvalid;

  // action method fpga_rd_prchannel
  input  m32_axi_rid;
  input  [511 : 0] m32_axi_rdata;
  input  [1 : 0] m32_axi_rresp;
  input  m32_axi_rlast;
  input  m32_axi_ruser;

  // action method fpga_wr_pawready
  input  m32_axi_awready;

  // value method fpga_wr_awvalid
  output m32_axi_awvalid;

  // value method fpga_wr_awid
  output m32_axi_awid;

  // value method fpga_wr_awaddr
  output [63 : 0] m32_axi_awaddr;

  // value method fpga_wr_awlen
  output [7 : 0] m32_axi_awlen;

  // value method fpga_wr_awsize
  output [2 : 0] m32_axi_awsize;

  // value method fpga_wr_awburst
  output [1 : 0] m32_axi_awburst;

  // value method fpga_wr_awlock
  output m32_axi_awlock;

  // value method fpga_wr_awcache
  output [3 : 0] m32_axi_awcache;

  // value method fpga_wr_awprot
  output [2 : 0] m32_axi_awprot;

  // value method fpga_wr_awqos
  output [3 : 0] m32_axi_awqos;

  // value method fpga_wr_awregion
  output [3 : 0] m32_axi_awregion;

  // value method fpga_wr_awuser
  output m32_axi_awuser;

  // action method fpga_wr_pwready
  input  m32_axi_wready;

  // value method fpga_wr_wvalid
  output m32_axi_wvalid;

  // value method fpga_wr_wdata
  output [511 : 0] m32_axi_wdata;

  // value method fpga_wr_wstrb
  output [63 : 0] m32_axi_wstrb;

  // value method fpga_wr_wlast
  output m32_axi_wlast;

  // value method fpga_wr_wuser
  output m32_axi_wuser;

  // action method fpga_wr_pbvalid
  input  m32_axi_bvalid;

  // value method fpga_wr_bready
  output m32_axi_bready;

  // action method fpga_wr_bin
  input  [1 : 0] m32_axi_bresp;
  input  m32_axi_bid;
  input  m32_axi_buser;

  // value method interrupt
  output IRQ;

  // signals for module outputs
  wire [511 : 0] m32_axi_wdata;
  wire [255 : 0] m64_axi_wdata;
  wire [63 : 0] S_AXI_rdata,
		m32_axi_araddr,
		m32_axi_awaddr,
		m32_axi_wstrb,
		m64_axi_araddr,
		m64_axi_awaddr;
  wire [31 : 0] m64_axi_wstrb;
  wire [7 : 0] m32_axi_arlen, m32_axi_awlen, m64_axi_arlen, m64_axi_awlen;
  wire [3 : 0] m32_axi_arcache,
	       m32_axi_arqos,
	       m32_axi_arregion,
	       m32_axi_awcache,
	       m32_axi_awqos,
	       m32_axi_awregion,
	       m64_axi_arcache,
	       m64_axi_arqos,
	       m64_axi_arregion,
	       m64_axi_awcache,
	       m64_axi_awqos,
	       m64_axi_awregion;
  wire [2 : 0] m32_axi_arprot,
	       m32_axi_arsize,
	       m32_axi_awprot,
	       m32_axi_awsize,
	       m64_axi_arprot,
	       m64_axi_arsize,
	       m64_axi_awprot,
	       m64_axi_awsize;
  wire [1 : 0] S_AXI_bresp,
	       S_AXI_rresp,
	       m32_axi_arburst,
	       m32_axi_awburst,
	       m64_axi_arburst,
	       m64_axi_awburst;
  wire IRQ,
       S_AXI_arready,
       S_AXI_awready,
       S_AXI_bvalid,
       S_AXI_rvalid,
       S_AXI_wready,
       m32_axi_arid,
       m32_axi_arlock,
       m32_axi_aruser,
       m32_axi_arvalid,
       m32_axi_awid,
       m32_axi_awlock,
       m32_axi_awuser,
       m32_axi_awvalid,
       m32_axi_bready,
       m32_axi_rready,
       m32_axi_wlast,
       m32_axi_wuser,
       m32_axi_wvalid,
       m64_axi_arid,
       m64_axi_arlock,
       m64_axi_aruser,
       m64_axi_arvalid,
       m64_axi_awid,
       m64_axi_awlock,
       m64_axi_awuser,
       m64_axi_awvalid,
       m64_axi_bready,
       m64_axi_rready,
       m64_axi_wlast,
       m64_axi_wuser,
       m64_axi_wvalid;

  // inlined wires
  reg [3 : 0] blueDMA_m_fpga_rd_master_rd_warcache$wget,
	      blueDMA_m_fpga_wr_master_wr_wawcache$wget,
	      blueDMA_m_pcie_rd_master_rd_warcache$wget,
	      blueDMA_m_pcie_wr_master_wr_wawcache$wget;
  wire [516 : 0] blueDMA_m_fpga_rd_master_rd_rinpkg$wget;
  wire [511 : 0] blueDMA_byteAlignerReader_buffer$port0__write_1,
		 blueDMA_byteAlignerReader_buffer$port1__read,
		 blueDMA_byteAlignerReader_buffer$port1__write_1,
		 blueDMA_byteAlignerReader_buffer$port2__read,
		 blueDMA_byteAlignerWriter_buffer$port0__write_1,
		 blueDMA_byteAlignerWriter_buffer$port1__read,
		 blueDMA_byteAlignerWriter_buffer$port1__write_1,
		 blueDMA_byteAlignerWriter_buffer$port2__read;
  wire [260 : 0] blueDMA_m_pcie_rd_master_rd_rinpkg$wget;
  wire [160 : 0] blueDMA_readIn_rv$port1__read,
		 blueDMA_readIn_rv$port1__write_1,
		 blueDMA_readIn_rv$port2__read,
		 blueDMA_writeIn_rv$port1__read,
		 blueDMA_writeIn_rv$port2__read;
  wire [72 : 0] blueDMA_s_config_writeSlave_dataIn_rv$port0__write_1,
		blueDMA_s_config_writeSlave_dataIn_rv$port1__read,
		blueDMA_s_config_writeSlave_dataIn_rv$port2__read;
  wire [67 : 0] blueDMA_s_config_writeSlave_addrIn_rv$port0__write_1,
		blueDMA_s_config_writeSlave_addrIn_rv$port1__read,
		blueDMA_s_config_writeSlave_addrIn_rv$port2__read;
  wire [5 : 0] blueDMA_byteAlignerReader_bytes_left_in_buffer$port0__write_1,
	       blueDMA_byteAlignerReader_bytes_left_in_buffer$port1__write_1,
	       blueDMA_byteAlignerReader_bytes_left_in_buffer$port2__read,
	       blueDMA_byteAlignerWriter_bytes_left_in_buffer$port0__write_1,
	       blueDMA_byteAlignerWriter_bytes_left_in_buffer$port1__write_1,
	       blueDMA_byteAlignerWriter_bytes_left_in_buffer$port2__read;
  wire [3 : 0] blueDMA_m_fpga_wr_master_wr_rinpkg$wget,
	       blueDMA_m_pcie_wr_master_wr_rinpkg$wget;
  wire blueDMA_byteAlignerReader_buffer$EN_port0__write,
       blueDMA_byteAlignerReader_bytes_left_in_buffer$EN_port0__write,
       blueDMA_byteAlignerReader_fetchedDatum$EN_port0__write,
       blueDMA_byteAlignerReader_fetchedDatum$port1__read,
       blueDMA_byteAlignerReader_fetchedDatum$port2__read,
       blueDMA_byteAlignerWriter_buffer$EN_port0__write,
       blueDMA_byteAlignerWriter_bytes_left_in_buffer$EN_port0__write,
       blueDMA_byteAlignerWriter_fetchedDatum$EN_port0__write,
       blueDMA_byteAlignerWriter_fetchedDatum$port1__read,
       blueDMA_byteAlignerWriter_fetchedDatum$port2__read,
       blueDMA_readConverter_bufferEmpty$EN_port0__write,
       blueDMA_readConverter_bufferEmpty$EN_port1__write,
       blueDMA_readConverter_bufferEmpty$port1__read,
       blueDMA_readConverter_bufferEmpty$port2__read,
       blueDMA_readIn_rv$EN_port1__write,
       blueDMA_s_config_readIsHandled$whas,
       blueDMA_s_config_writeIsHandled$whas,
       blueDMA_s_config_writeSlave_addrIn_rv$EN_port0__write,
       blueDMA_s_config_writeSlave_addrIn_rv$EN_port1__write,
       blueDMA_s_config_writeSlave_dataIn_rv$EN_port0__write,
       blueDMA_s_config_writeSlave_dataIn_rv$EN_port1__write,
       blueDMA_writeIn_rv$EN_port1__write;

  // register blueDMA_byteAlignerReader_buffer
  reg [511 : 0] blueDMA_byteAlignerReader_buffer;
  wire [511 : 0] blueDMA_byteAlignerReader_buffer$D_IN;
  wire blueDMA_byteAlignerReader_buffer$EN;

  // register blueDMA_byteAlignerReader_bytes_in
  reg [31 : 0] blueDMA_byteAlignerReader_bytes_in;
  wire [31 : 0] blueDMA_byteAlignerReader_bytes_in$D_IN;
  wire blueDMA_byteAlignerReader_bytes_in$EN;

  // register blueDMA_byteAlignerReader_bytes_left_in_buffer
  reg [5 : 0] blueDMA_byteAlignerReader_bytes_left_in_buffer;
  wire [5 : 0] blueDMA_byteAlignerReader_bytes_left_in_buffer$D_IN;
  wire blueDMA_byteAlignerReader_bytes_left_in_buffer$EN;

  // register blueDMA_byteAlignerReader_bytes_out
  reg [31 : 0] blueDMA_byteAlignerReader_bytes_out;
  reg [31 : 0] blueDMA_byteAlignerReader_bytes_out$D_IN;
  wire blueDMA_byteAlignerReader_bytes_out$EN;

  // register blueDMA_byteAlignerReader_bytes_out_needed
  reg [5 : 0] blueDMA_byteAlignerReader_bytes_out_needed;
  wire [5 : 0] blueDMA_byteAlignerReader_bytes_out_needed$D_IN;
  wire blueDMA_byteAlignerReader_bytes_out_needed$EN;

  // register blueDMA_byteAlignerReader_bytes_total
  reg [31 : 0] blueDMA_byteAlignerReader_bytes_total;
  wire [31 : 0] blueDMA_byteAlignerReader_bytes_total$D_IN;
  wire blueDMA_byteAlignerReader_bytes_total$EN;

  // register blueDMA_byteAlignerReader_fetchedDatum
  reg blueDMA_byteAlignerReader_fetchedDatum;
  wire blueDMA_byteAlignerReader_fetchedDatum$D_IN,
       blueDMA_byteAlignerReader_fetchedDatum$EN;

  // register blueDMA_byteAlignerWriter_buffer
  reg [511 : 0] blueDMA_byteAlignerWriter_buffer;
  wire [511 : 0] blueDMA_byteAlignerWriter_buffer$D_IN;
  wire blueDMA_byteAlignerWriter_buffer$EN;

  // register blueDMA_byteAlignerWriter_bytes_in
  reg [31 : 0] blueDMA_byteAlignerWriter_bytes_in;
  wire [31 : 0] blueDMA_byteAlignerWriter_bytes_in$D_IN;
  wire blueDMA_byteAlignerWriter_bytes_in$EN;

  // register blueDMA_byteAlignerWriter_bytes_left_in_buffer
  reg [5 : 0] blueDMA_byteAlignerWriter_bytes_left_in_buffer;
  wire [5 : 0] blueDMA_byteAlignerWriter_bytes_left_in_buffer$D_IN;
  wire blueDMA_byteAlignerWriter_bytes_left_in_buffer$EN;

  // register blueDMA_byteAlignerWriter_bytes_out
  reg [31 : 0] blueDMA_byteAlignerWriter_bytes_out;
  reg [31 : 0] blueDMA_byteAlignerWriter_bytes_out$D_IN;
  wire blueDMA_byteAlignerWriter_bytes_out$EN;

  // register blueDMA_byteAlignerWriter_bytes_out_needed
  reg [5 : 0] blueDMA_byteAlignerWriter_bytes_out_needed;
  wire [5 : 0] blueDMA_byteAlignerWriter_bytes_out_needed$D_IN;
  wire blueDMA_byteAlignerWriter_bytes_out_needed$EN;

  // register blueDMA_byteAlignerWriter_bytes_total
  reg [31 : 0] blueDMA_byteAlignerWriter_bytes_total;
  wire [31 : 0] blueDMA_byteAlignerWriter_bytes_total$D_IN;
  wire blueDMA_byteAlignerWriter_bytes_total$EN;

  // register blueDMA_byteAlignerWriter_fetchedDatum
  reg blueDMA_byteAlignerWriter_fetchedDatum;
  wire blueDMA_byteAlignerWriter_fetchedDatum$D_IN,
       blueDMA_byteAlignerWriter_fetchedDatum$EN;

  // register blueDMA_clkCntr
  reg [31 : 0] blueDMA_clkCntr;
  wire [31 : 0] blueDMA_clkCntr$D_IN;
  wire blueDMA_clkCntr$EN;

  // register blueDMA_cycles_between
  reg [63 : 0] blueDMA_cycles_between;
  wire [63 : 0] blueDMA_cycles_between$D_IN;
  wire blueDMA_cycles_between$EN;

  // register blueDMA_cycles_between_set
  reg [63 : 0] blueDMA_cycles_between_set;
  wire [63 : 0] blueDMA_cycles_between_set$D_IN;
  wire blueDMA_cycles_between_set$EN;

  // register blueDMA_cycles_last_request
  reg [63 : 0] blueDMA_cycles_last_request;
  wire [63 : 0] blueDMA_cycles_last_request$D_IN;
  wire blueDMA_cycles_last_request$EN;

  // register blueDMA_doneInterruptReg
  reg blueDMA_doneInterruptReg;
  wire blueDMA_doneInterruptReg$D_IN, blueDMA_doneInterruptReg$EN;

  // register blueDMA_fpgaLastCycle
  reg blueDMA_fpgaLastCycle;
  wire blueDMA_fpgaLastCycle$D_IN, blueDMA_fpgaLastCycle$EN;

  // register blueDMA_fpga_addr
  reg [63 : 0] blueDMA_fpga_addr;
  wire [63 : 0] blueDMA_fpga_addr$D_IN;
  wire blueDMA_fpga_addr$EN;

  // register blueDMA_host_addr
  reg [63 : 0] blueDMA_host_addr;
  wire [63 : 0] blueDMA_host_addr$D_IN;
  wire blueDMA_host_addr$EN;

  // register blueDMA_id
  reg [63 : 0] blueDMA_id;
  wire [63 : 0] blueDMA_id$D_IN;
  wire blueDMA_id$EN;

  // register blueDMA_isWriteActive
  reg blueDMA_isWriteActive;
  wire blueDMA_isWriteActive$D_IN, blueDMA_isWriteActive$EN;

  // register blueDMA_m_fpga_rd_task_data_output_reg
  reg [44 : 0] blueDMA_m_fpga_rd_task_data_output_reg;
  wire [44 : 0] blueDMA_m_fpga_rd_task_data_output_reg$D_IN;
  wire blueDMA_m_fpga_rd_task_data_output_reg$EN;

  // register blueDMA_m_fpga_rd_task_data_requests_reg
  reg [112 : 0] blueDMA_m_fpga_rd_task_data_requests_reg;
  wire [112 : 0] blueDMA_m_fpga_rd_task_data_requests_reg$D_IN;
  wire blueDMA_m_fpga_rd_task_data_requests_reg$EN;

  // register blueDMA_m_fpga_wr_beatsThisRequestCntr
  reg [7 : 0] blueDMA_m_fpga_wr_beatsThisRequestCntr;
  wire [7 : 0] blueDMA_m_fpga_wr_beatsThisRequestCntr$D_IN;
  wire blueDMA_m_fpga_wr_beatsThisRequestCntr$EN;

  // register blueDMA_m_fpga_wr_task_data_output_reg
  reg [44 : 0] blueDMA_m_fpga_wr_task_data_output_reg;
  wire [44 : 0] blueDMA_m_fpga_wr_task_data_output_reg$D_IN;
  wire blueDMA_m_fpga_wr_task_data_output_reg$EN;

  // register blueDMA_m_fpga_wr_task_data_requests_reg
  reg [112 : 0] blueDMA_m_fpga_wr_task_data_requests_reg;
  wire [112 : 0] blueDMA_m_fpga_wr_task_data_requests_reg$D_IN;
  wire blueDMA_m_fpga_wr_task_data_requests_reg$EN;

  // register blueDMA_m_pcie_rd_task_data_output_reg
  reg [42 : 0] blueDMA_m_pcie_rd_task_data_output_reg;
  wire [42 : 0] blueDMA_m_pcie_rd_task_data_output_reg$D_IN;
  wire blueDMA_m_pcie_rd_task_data_output_reg$EN;

  // register blueDMA_m_pcie_rd_task_data_requests_reg
  reg [113 : 0] blueDMA_m_pcie_rd_task_data_requests_reg;
  wire [113 : 0] blueDMA_m_pcie_rd_task_data_requests_reg$D_IN;
  wire blueDMA_m_pcie_rd_task_data_requests_reg$EN;

  // register blueDMA_m_pcie_wr_beatsThisRequestCntr
  reg [7 : 0] blueDMA_m_pcie_wr_beatsThisRequestCntr;
  wire [7 : 0] blueDMA_m_pcie_wr_beatsThisRequestCntr$D_IN;
  wire blueDMA_m_pcie_wr_beatsThisRequestCntr$EN;

  // register blueDMA_m_pcie_wr_task_data_output_reg
  reg [42 : 0] blueDMA_m_pcie_wr_task_data_output_reg;
  wire [42 : 0] blueDMA_m_pcie_wr_task_data_output_reg$D_IN;
  wire blueDMA_m_pcie_wr_task_data_output_reg$EN;

  // register blueDMA_m_pcie_wr_task_data_requests_reg
  reg [113 : 0] blueDMA_m_pcie_wr_task_data_requests_reg;
  wire [113 : 0] blueDMA_m_pcie_wr_task_data_requests_reg$D_IN;
  wire blueDMA_m_pcie_wr_task_data_requests_reg$EN;

  // register blueDMA_opInProgress
  reg blueDMA_opInProgress;
  wire blueDMA_opInProgress$D_IN, blueDMA_opInProgress$EN;

  // register blueDMA_pc_betweenStart
  reg [31 : 0] blueDMA_pc_betweenStart;
  wire [31 : 0] blueDMA_pc_betweenStart$D_IN;
  wire blueDMA_pc_betweenStart$EN;

  // register blueDMA_pc_reqCntr
  reg [11 : 0] blueDMA_pc_reqCntr;
  wire [11 : 0] blueDMA_pc_reqCntr$D_IN;
  wire blueDMA_pc_reqCntr$EN;

  // register blueDMA_pc_start
  reg [31 : 0] blueDMA_pc_start;
  wire [31 : 0] blueDMA_pc_start$D_IN;
  wire blueDMA_pc_start$EN;

  // register blueDMA_pcieLastCycle
  reg blueDMA_pcieLastCycle;
  wire blueDMA_pcieLastCycle$D_IN, blueDMA_pcieLastCycle$EN;

  // register blueDMA_readConverter_buffer
  reg [511 : 0] blueDMA_readConverter_buffer;
  wire [511 : 0] blueDMA_readConverter_buffer$D_IN;
  wire blueDMA_readConverter_buffer$EN;

  // register blueDMA_readConverter_bufferEmpty
  reg blueDMA_readConverter_bufferEmpty;
  wire blueDMA_readConverter_bufferEmpty$D_IN,
       blueDMA_readConverter_bufferEmpty$EN;

  // register blueDMA_readConverter_byteCntr
  reg [31 : 0] blueDMA_readConverter_byteCntr;
  wire [31 : 0] blueDMA_readConverter_byteCntr$D_IN;
  wire blueDMA_readConverter_byteCntr$EN;

  // register blueDMA_readConverter_wordInCntr
  reg blueDMA_readConverter_wordInCntr;
  wire blueDMA_readConverter_wordInCntr$D_IN,
       blueDMA_readConverter_wordInCntr$EN;

  // register blueDMA_readIn_rv
  reg [160 : 0] blueDMA_readIn_rv;
  wire [160 : 0] blueDMA_readIn_rv$D_IN;
  wire blueDMA_readIn_rv$EN;

  // register blueDMA_read_requests
  reg [63 : 0] blueDMA_read_requests;
  wire [63 : 0] blueDMA_read_requests$D_IN;
  wire blueDMA_read_requests$EN;

  // register blueDMA_s_config_readBusy
  reg blueDMA_s_config_readBusy;
  wire blueDMA_s_config_readBusy$D_IN, blueDMA_s_config_readBusy$EN;

  // register blueDMA_s_config_writeSlave_addrIn_rv
  reg [67 : 0] blueDMA_s_config_writeSlave_addrIn_rv;
  wire [67 : 0] blueDMA_s_config_writeSlave_addrIn_rv$D_IN;
  wire blueDMA_s_config_writeSlave_addrIn_rv$EN;

  // register blueDMA_s_config_writeSlave_dataIn_rv
  reg [72 : 0] blueDMA_s_config_writeSlave_dataIn_rv;
  wire [72 : 0] blueDMA_s_config_writeSlave_dataIn_rv$D_IN;
  wire blueDMA_s_config_writeSlave_dataIn_rv$EN;

  // register blueDMA_transfer_length
  reg [63 : 0] blueDMA_transfer_length;
  wire [63 : 0] blueDMA_transfer_length$D_IN;
  wire blueDMA_transfer_length$EN;

  // register blueDMA_writeConverter_buffer_0
  reg [255 : 0] blueDMA_writeConverter_buffer_0;
  wire [255 : 0] blueDMA_writeConverter_buffer_0$D_IN;
  wire blueDMA_writeConverter_buffer_0$EN;

  // register blueDMA_writeConverter_wordInCntr
  reg [1 : 0] blueDMA_writeConverter_wordInCntr;
  wire [1 : 0] blueDMA_writeConverter_wordInCntr$D_IN;
  wire blueDMA_writeConverter_wordInCntr$EN;

  // register blueDMA_writeConverter_wordOutCntr
  reg [26 : 0] blueDMA_writeConverter_wordOutCntr;
  wire [26 : 0] blueDMA_writeConverter_wordOutCntr$D_IN;
  wire blueDMA_writeConverter_wordOutCntr$EN;

  // register blueDMA_writeIn_rv
  reg [160 : 0] blueDMA_writeIn_rv;
  wire [160 : 0] blueDMA_writeIn_rv$D_IN;
  wire blueDMA_writeIn_rv$EN;

  // register blueDMA_write_requests
  reg [63 : 0] blueDMA_write_requests;
  wire [63 : 0] blueDMA_write_requests$D_IN;
  wire blueDMA_write_requests$EN;

  // ports of submodule blueDMA_byteAlignerReader_addr_ff
  wire [159 : 0] blueDMA_byteAlignerReader_addr_ff$dD_OUT,
		 blueDMA_byteAlignerReader_addr_ff$sD_IN;
  wire blueDMA_byteAlignerReader_addr_ff$dDEQ,
       blueDMA_byteAlignerReader_addr_ff$dEMPTY_N,
       blueDMA_byteAlignerReader_addr_ff$sENQ;

  // ports of submodule blueDMA_byteAlignerReader_incoming
  wire [255 : 0] blueDMA_byteAlignerReader_incoming$D_IN,
		 blueDMA_byteAlignerReader_incoming$D_OUT;
  wire blueDMA_byteAlignerReader_incoming$CLR,
       blueDMA_byteAlignerReader_incoming$DEQ,
       blueDMA_byteAlignerReader_incoming$EMPTY_N,
       blueDMA_byteAlignerReader_incoming$ENQ;

  // ports of submodule blueDMA_byteAlignerReader_outgoing
  wire [255 : 0] blueDMA_byteAlignerReader_outgoing$D_IN;
  wire blueDMA_byteAlignerReader_outgoing$CLR,
       blueDMA_byteAlignerReader_outgoing$DEQ,
       blueDMA_byteAlignerReader_outgoing$ENQ,
       blueDMA_byteAlignerReader_outgoing$FULL_N;

  // ports of submodule blueDMA_byteAlignerWriter_addr_ff
  wire [159 : 0] blueDMA_byteAlignerWriter_addr_ff$dD_OUT,
		 blueDMA_byteAlignerWriter_addr_ff$sD_IN;
  wire blueDMA_byteAlignerWriter_addr_ff$dDEQ,
       blueDMA_byteAlignerWriter_addr_ff$dEMPTY_N,
       blueDMA_byteAlignerWriter_addr_ff$sENQ;

  // ports of submodule blueDMA_byteAlignerWriter_incoming
  wire [255 : 0] blueDMA_byteAlignerWriter_incoming$D_IN,
		 blueDMA_byteAlignerWriter_incoming$D_OUT;
  wire blueDMA_byteAlignerWriter_incoming$CLR,
       blueDMA_byteAlignerWriter_incoming$DEQ,
       blueDMA_byteAlignerWriter_incoming$EMPTY_N,
       blueDMA_byteAlignerWriter_incoming$ENQ;

  // ports of submodule blueDMA_byteAlignerWriter_outgoing
  wire [255 : 0] blueDMA_byteAlignerWriter_outgoing$D_IN;
  wire blueDMA_byteAlignerWriter_outgoing$CLR,
       blueDMA_byteAlignerWriter_outgoing$DEQ,
       blueDMA_byteAlignerWriter_outgoing$ENQ,
       blueDMA_byteAlignerWriter_outgoing$FULL_N;

  // ports of submodule blueDMA_cmdsIn
  wire blueDMA_cmdsIn$CLR,
       blueDMA_cmdsIn$DEQ,
       blueDMA_cmdsIn$D_IN,
       blueDMA_cmdsIn$D_OUT,
       blueDMA_cmdsIn$EMPTY_N,
       blueDMA_cmdsIn$ENQ,
       blueDMA_cmdsIn$FULL_N;

  // ports of submodule blueDMA_fpgaDone
  wire blueDMA_fpgaDone$dDEQ,
       blueDMA_fpgaDone$dEMPTY_N,
       blueDMA_fpgaDone$sD_IN,
       blueDMA_fpgaDone$sENQ,
       blueDMA_fpgaDone$sFULL_N;

  // ports of submodule blueDMA_fpga_request_converter_fifo
  wire [511 : 0] blueDMA_fpga_request_converter_fifo$dD_OUT,
		 blueDMA_fpga_request_converter_fifo$sD_IN;
  wire blueDMA_fpga_request_converter_fifo$dDEQ,
       blueDMA_fpga_request_converter_fifo$dEMPTY_N,
       blueDMA_fpga_request_converter_fifo$sENQ,
       blueDMA_fpga_request_converter_fifo$sFULL_N;

  // ports of submodule blueDMA_fpga_response_converter_fifo
  wire [511 : 0] blueDMA_fpga_response_converter_fifo$dD_OUT,
		 blueDMA_fpga_response_converter_fifo$sD_IN;
  wire blueDMA_fpga_response_converter_fifo$dDEQ,
       blueDMA_fpga_response_converter_fifo$dEMPTY_N,
       blueDMA_fpga_response_converter_fifo$sENQ,
       blueDMA_fpga_response_converter_fifo$sFULL_N;

  // ports of submodule blueDMA_m_fpga_rd_master_rd_in
  wire [94 : 0] blueDMA_m_fpga_rd_master_rd_in$D_IN,
		blueDMA_m_fpga_rd_master_rd_in$D_OUT;
  wire blueDMA_m_fpga_rd_master_rd_in$CLR,
       blueDMA_m_fpga_rd_master_rd_in$DEQ,
       blueDMA_m_fpga_rd_master_rd_in$EMPTY_N,
       blueDMA_m_fpga_rd_master_rd_in$ENQ,
       blueDMA_m_fpga_rd_master_rd_in$FULL_N;

  // ports of submodule blueDMA_m_fpga_rd_master_rd_out
  wire [516 : 0] blueDMA_m_fpga_rd_master_rd_out$D_IN,
		 blueDMA_m_fpga_rd_master_rd_out$D_OUT;
  wire blueDMA_m_fpga_rd_master_rd_out$CLR,
       blueDMA_m_fpga_rd_master_rd_out$DEQ,
       blueDMA_m_fpga_rd_master_rd_out$EMPTY_N,
       blueDMA_m_fpga_rd_master_rd_out$ENQ,
       blueDMA_m_fpga_rd_master_rd_out$FULL_N;

  // ports of submodule blueDMA_m_fpga_rd_maxOutstandingFIFO
  wire blueDMA_m_fpga_rd_maxOutstandingFIFO$CLR,
       blueDMA_m_fpga_rd_maxOutstandingFIFO$DEQ,
       blueDMA_m_fpga_rd_maxOutstandingFIFO$D_IN,
       blueDMA_m_fpga_rd_maxOutstandingFIFO$EMPTY_N,
       blueDMA_m_fpga_rd_maxOutstandingFIFO$ENQ,
       blueDMA_m_fpga_rd_maxOutstandingFIFO$FULL_N;

  // ports of submodule blueDMA_m_fpga_rd_outgoingBuffer
  wire [511 : 0] blueDMA_m_fpga_rd_outgoingBuffer$D_IN,
		 blueDMA_m_fpga_rd_outgoingBuffer$D_OUT;
  wire blueDMA_m_fpga_rd_outgoingBuffer$CLR,
       blueDMA_m_fpga_rd_outgoingBuffer$DEQ,
       blueDMA_m_fpga_rd_outgoingBuffer$EMPTY_N,
       blueDMA_m_fpga_rd_outgoingBuffer$ENQ,
       blueDMA_m_fpga_rd_outgoingBuffer$FULL_N;

  // ports of submodule blueDMA_m_fpga_rd_reqGen_incomingBuffer
  wire [99 : 0] blueDMA_m_fpga_rd_reqGen_incomingBuffer$D_IN,
		blueDMA_m_fpga_rd_reqGen_incomingBuffer$D_OUT;
  wire blueDMA_m_fpga_rd_reqGen_incomingBuffer$CLR,
       blueDMA_m_fpga_rd_reqGen_incomingBuffer$DEQ,
       blueDMA_m_fpga_rd_reqGen_incomingBuffer$EMPTY_N,
       blueDMA_m_fpga_rd_reqGen_incomingBuffer$ENQ,
       blueDMA_m_fpga_rd_reqGen_incomingBuffer$FULL_N;

  // ports of submodule blueDMA_m_fpga_rd_reqGen_intermediateBuffer
  wire [111 : 0] blueDMA_m_fpga_rd_reqGen_intermediateBuffer$D_IN,
		 blueDMA_m_fpga_rd_reqGen_intermediateBuffer$D_OUT;
  wire blueDMA_m_fpga_rd_reqGen_intermediateBuffer$CLR,
       blueDMA_m_fpga_rd_reqGen_intermediateBuffer$DEQ,
       blueDMA_m_fpga_rd_reqGen_intermediateBuffer$EMPTY_N,
       blueDMA_m_fpga_rd_reqGen_intermediateBuffer$ENQ,
       blueDMA_m_fpga_rd_reqGen_intermediateBuffer$FULL_N;

  // ports of submodule blueDMA_m_fpga_rd_reqGen_intermediateBuffer2
  wire [137 : 0] blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$D_IN,
		 blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$D_OUT;
  wire blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$CLR,
       blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$DEQ,
       blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$EMPTY_N,
       blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$ENQ,
       blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$FULL_N;

  // ports of submodule blueDMA_m_fpga_rd_reqGen_intermediateBuffer3
  wire [146 : 0] blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$D_IN,
		 blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$D_OUT;
  wire blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$CLR,
       blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$DEQ,
       blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$EMPTY_N,
       blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$ENQ,
       blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$FULL_N;

  // ports of submodule blueDMA_m_fpga_rd_reqGen_outgoingBuffer
  wire [157 : 0] blueDMA_m_fpga_rd_reqGen_outgoingBuffer$D_IN,
		 blueDMA_m_fpga_rd_reqGen_outgoingBuffer$D_OUT;
  wire blueDMA_m_fpga_rd_reqGen_outgoingBuffer$CLR,
       blueDMA_m_fpga_rd_reqGen_outgoingBuffer$DEQ,
       blueDMA_m_fpga_rd_reqGen_outgoingBuffer$EMPTY_N,
       blueDMA_m_fpga_rd_reqGen_outgoingBuffer$ENQ,
       blueDMA_m_fpga_rd_reqGen_outgoingBuffer$FULL_N;

  // ports of submodule blueDMA_m_fpga_wr_beatsPerRequestFIFO
  wire [7 : 0] blueDMA_m_fpga_wr_beatsPerRequestFIFO$D_IN,
	       blueDMA_m_fpga_wr_beatsPerRequestFIFO$D_OUT;
  wire blueDMA_m_fpga_wr_beatsPerRequestFIFO$CLR,
       blueDMA_m_fpga_wr_beatsPerRequestFIFO$DEQ,
       blueDMA_m_fpga_wr_beatsPerRequestFIFO$EMPTY_N,
       blueDMA_m_fpga_wr_beatsPerRequestFIFO$ENQ,
       blueDMA_m_fpga_wr_beatsPerRequestFIFO$FULL_N;

  // ports of submodule blueDMA_m_fpga_wr_incomingBuffer
  wire [511 : 0] blueDMA_m_fpga_wr_incomingBuffer$D_IN,
		 blueDMA_m_fpga_wr_incomingBuffer$D_OUT;
  wire blueDMA_m_fpga_wr_incomingBuffer$CLR,
       blueDMA_m_fpga_wr_incomingBuffer$DEQ,
       blueDMA_m_fpga_wr_incomingBuffer$EMPTY_N,
       blueDMA_m_fpga_wr_incomingBuffer$ENQ,
       blueDMA_m_fpga_wr_incomingBuffer$FULL_N;

  // ports of submodule blueDMA_m_fpga_wr_master_wr_in_addr
  wire [94 : 0] blueDMA_m_fpga_wr_master_wr_in_addr$D_IN,
		blueDMA_m_fpga_wr_master_wr_in_addr$D_OUT;
  wire blueDMA_m_fpga_wr_master_wr_in_addr$CLR,
       blueDMA_m_fpga_wr_master_wr_in_addr$DEQ,
       blueDMA_m_fpga_wr_master_wr_in_addr$EMPTY_N,
       blueDMA_m_fpga_wr_master_wr_in_addr$ENQ,
       blueDMA_m_fpga_wr_master_wr_in_addr$FULL_N;

  // ports of submodule blueDMA_m_fpga_wr_master_wr_in_data
  wire [577 : 0] blueDMA_m_fpga_wr_master_wr_in_data$D_IN,
		 blueDMA_m_fpga_wr_master_wr_in_data$D_OUT;
  wire blueDMA_m_fpga_wr_master_wr_in_data$CLR,
       blueDMA_m_fpga_wr_master_wr_in_data$DEQ,
       blueDMA_m_fpga_wr_master_wr_in_data$EMPTY_N,
       blueDMA_m_fpga_wr_master_wr_in_data$ENQ,
       blueDMA_m_fpga_wr_master_wr_in_data$FULL_N;

  // ports of submodule blueDMA_m_fpga_wr_master_wr_out
  wire [3 : 0] blueDMA_m_fpga_wr_master_wr_out$D_IN;
  wire blueDMA_m_fpga_wr_master_wr_out$CLR,
       blueDMA_m_fpga_wr_master_wr_out$DEQ,
       blueDMA_m_fpga_wr_master_wr_out$EMPTY_N,
       blueDMA_m_fpga_wr_master_wr_out$ENQ,
       blueDMA_m_fpga_wr_master_wr_out$FULL_N;

  // ports of submodule blueDMA_m_fpga_wr_reqGen_incomingBuffer
  wire [99 : 0] blueDMA_m_fpga_wr_reqGen_incomingBuffer$D_IN,
		blueDMA_m_fpga_wr_reqGen_incomingBuffer$D_OUT;
  wire blueDMA_m_fpga_wr_reqGen_incomingBuffer$CLR,
       blueDMA_m_fpga_wr_reqGen_incomingBuffer$DEQ,
       blueDMA_m_fpga_wr_reqGen_incomingBuffer$EMPTY_N,
       blueDMA_m_fpga_wr_reqGen_incomingBuffer$ENQ,
       blueDMA_m_fpga_wr_reqGen_incomingBuffer$FULL_N;

  // ports of submodule blueDMA_m_fpga_wr_reqGen_intermediateBuffer
  wire [111 : 0] blueDMA_m_fpga_wr_reqGen_intermediateBuffer$D_IN,
		 blueDMA_m_fpga_wr_reqGen_intermediateBuffer$D_OUT;
  wire blueDMA_m_fpga_wr_reqGen_intermediateBuffer$CLR,
       blueDMA_m_fpga_wr_reqGen_intermediateBuffer$DEQ,
       blueDMA_m_fpga_wr_reqGen_intermediateBuffer$EMPTY_N,
       blueDMA_m_fpga_wr_reqGen_intermediateBuffer$ENQ,
       blueDMA_m_fpga_wr_reqGen_intermediateBuffer$FULL_N;

  // ports of submodule blueDMA_m_fpga_wr_reqGen_intermediateBuffer2
  wire [137 : 0] blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$D_IN,
		 blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$D_OUT;
  wire blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$CLR,
       blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$DEQ,
       blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$EMPTY_N,
       blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$ENQ,
       blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$FULL_N;

  // ports of submodule blueDMA_m_fpga_wr_reqGen_intermediateBuffer3
  wire [146 : 0] blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$D_IN,
		 blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$D_OUT;
  wire blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$CLR,
       blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$DEQ,
       blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$EMPTY_N,
       blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$ENQ,
       blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$FULL_N;

  // ports of submodule blueDMA_m_fpga_wr_reqGen_outgoingBuffer
  wire [157 : 0] blueDMA_m_fpga_wr_reqGen_outgoingBuffer$D_IN,
		 blueDMA_m_fpga_wr_reqGen_outgoingBuffer$D_OUT;
  wire blueDMA_m_fpga_wr_reqGen_outgoingBuffer$CLR,
       blueDMA_m_fpga_wr_reqGen_outgoingBuffer$DEQ,
       blueDMA_m_fpga_wr_reqGen_outgoingBuffer$EMPTY_N,
       blueDMA_m_fpga_wr_reqGen_outgoingBuffer$ENQ,
       blueDMA_m_fpga_wr_reqGen_outgoingBuffer$FULL_N;

  // ports of submodule blueDMA_m_pcie_rd_master_rd_in
  wire [94 : 0] blueDMA_m_pcie_rd_master_rd_in$D_IN,
		blueDMA_m_pcie_rd_master_rd_in$D_OUT;
  wire blueDMA_m_pcie_rd_master_rd_in$CLR,
       blueDMA_m_pcie_rd_master_rd_in$DEQ,
       blueDMA_m_pcie_rd_master_rd_in$EMPTY_N,
       blueDMA_m_pcie_rd_master_rd_in$ENQ,
       blueDMA_m_pcie_rd_master_rd_in$FULL_N;

  // ports of submodule blueDMA_m_pcie_rd_master_rd_out
  wire [260 : 0] blueDMA_m_pcie_rd_master_rd_out$D_IN,
		 blueDMA_m_pcie_rd_master_rd_out$D_OUT;
  wire blueDMA_m_pcie_rd_master_rd_out$CLR,
       blueDMA_m_pcie_rd_master_rd_out$DEQ,
       blueDMA_m_pcie_rd_master_rd_out$EMPTY_N,
       blueDMA_m_pcie_rd_master_rd_out$ENQ,
       blueDMA_m_pcie_rd_master_rd_out$FULL_N;

  // ports of submodule blueDMA_m_pcie_rd_maxOutstandingFIFO
  wire blueDMA_m_pcie_rd_maxOutstandingFIFO$CLR,
       blueDMA_m_pcie_rd_maxOutstandingFIFO$DEQ,
       blueDMA_m_pcie_rd_maxOutstandingFIFO$D_IN,
       blueDMA_m_pcie_rd_maxOutstandingFIFO$EMPTY_N,
       blueDMA_m_pcie_rd_maxOutstandingFIFO$ENQ,
       blueDMA_m_pcie_rd_maxOutstandingFIFO$FULL_N;

  // ports of submodule blueDMA_m_pcie_rd_outgoingBuffer
  wire [255 : 0] blueDMA_m_pcie_rd_outgoingBuffer$D_IN,
		 blueDMA_m_pcie_rd_outgoingBuffer$D_OUT;
  wire blueDMA_m_pcie_rd_outgoingBuffer$CLR,
       blueDMA_m_pcie_rd_outgoingBuffer$DEQ,
       blueDMA_m_pcie_rd_outgoingBuffer$EMPTY_N,
       blueDMA_m_pcie_rd_outgoingBuffer$ENQ,
       blueDMA_m_pcie_rd_outgoingBuffer$FULL_N;

  // ports of submodule blueDMA_m_pcie_rd_reqGen_incomingBuffer
  wire [99 : 0] blueDMA_m_pcie_rd_reqGen_incomingBuffer$D_IN,
		blueDMA_m_pcie_rd_reqGen_incomingBuffer$D_OUT;
  wire blueDMA_m_pcie_rd_reqGen_incomingBuffer$CLR,
       blueDMA_m_pcie_rd_reqGen_incomingBuffer$DEQ,
       blueDMA_m_pcie_rd_reqGen_incomingBuffer$EMPTY_N,
       blueDMA_m_pcie_rd_reqGen_incomingBuffer$ENQ,
       blueDMA_m_pcie_rd_reqGen_incomingBuffer$FULL_N;

  // ports of submodule blueDMA_m_pcie_rd_reqGen_intermediateBuffer
  wire [109 : 0] blueDMA_m_pcie_rd_reqGen_intermediateBuffer$D_IN,
		 blueDMA_m_pcie_rd_reqGen_intermediateBuffer$D_OUT;
  wire blueDMA_m_pcie_rd_reqGen_intermediateBuffer$CLR,
       blueDMA_m_pcie_rd_reqGen_intermediateBuffer$DEQ,
       blueDMA_m_pcie_rd_reqGen_intermediateBuffer$EMPTY_N,
       blueDMA_m_pcie_rd_reqGen_intermediateBuffer$ENQ,
       blueDMA_m_pcie_rd_reqGen_intermediateBuffer$FULL_N;

  // ports of submodule blueDMA_m_pcie_rd_reqGen_intermediateBuffer2
  wire [136 : 0] blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$D_IN,
		 blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$D_OUT;
  wire blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$CLR,
       blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$DEQ,
       blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$EMPTY_N,
       blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$ENQ,
       blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$FULL_N;

  // ports of submodule blueDMA_m_pcie_rd_reqGen_intermediateBuffer3
  wire [145 : 0] blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$D_IN,
		 blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$D_OUT;
  wire blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$CLR,
       blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$DEQ,
       blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$EMPTY_N,
       blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$ENQ,
       blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$FULL_N;

  // ports of submodule blueDMA_m_pcie_rd_reqGen_outgoingBuffer
  wire [156 : 0] blueDMA_m_pcie_rd_reqGen_outgoingBuffer$D_IN,
		 blueDMA_m_pcie_rd_reqGen_outgoingBuffer$D_OUT;
  wire blueDMA_m_pcie_rd_reqGen_outgoingBuffer$CLR,
       blueDMA_m_pcie_rd_reqGen_outgoingBuffer$DEQ,
       blueDMA_m_pcie_rd_reqGen_outgoingBuffer$EMPTY_N,
       blueDMA_m_pcie_rd_reqGen_outgoingBuffer$ENQ,
       blueDMA_m_pcie_rd_reqGen_outgoingBuffer$FULL_N;

  // ports of submodule blueDMA_m_pcie_wr_beatsPerRequestFIFO
  wire [7 : 0] blueDMA_m_pcie_wr_beatsPerRequestFIFO$D_IN,
	       blueDMA_m_pcie_wr_beatsPerRequestFIFO$D_OUT;
  wire blueDMA_m_pcie_wr_beatsPerRequestFIFO$CLR,
       blueDMA_m_pcie_wr_beatsPerRequestFIFO$DEQ,
       blueDMA_m_pcie_wr_beatsPerRequestFIFO$EMPTY_N,
       blueDMA_m_pcie_wr_beatsPerRequestFIFO$ENQ,
       blueDMA_m_pcie_wr_beatsPerRequestFIFO$FULL_N;

  // ports of submodule blueDMA_m_pcie_wr_incomingBuffer
  reg [255 : 0] blueDMA_m_pcie_wr_incomingBuffer$D_IN;
  wire [255 : 0] blueDMA_m_pcie_wr_incomingBuffer$D_OUT;
  wire blueDMA_m_pcie_wr_incomingBuffer$CLR,
       blueDMA_m_pcie_wr_incomingBuffer$DEQ,
       blueDMA_m_pcie_wr_incomingBuffer$EMPTY_N,
       blueDMA_m_pcie_wr_incomingBuffer$ENQ,
       blueDMA_m_pcie_wr_incomingBuffer$FULL_N;

  // ports of submodule blueDMA_m_pcie_wr_master_wr_in_addr
  wire [94 : 0] blueDMA_m_pcie_wr_master_wr_in_addr$D_IN,
		blueDMA_m_pcie_wr_master_wr_in_addr$D_OUT;
  wire blueDMA_m_pcie_wr_master_wr_in_addr$CLR,
       blueDMA_m_pcie_wr_master_wr_in_addr$DEQ,
       blueDMA_m_pcie_wr_master_wr_in_addr$EMPTY_N,
       blueDMA_m_pcie_wr_master_wr_in_addr$ENQ,
       blueDMA_m_pcie_wr_master_wr_in_addr$FULL_N;

  // ports of submodule blueDMA_m_pcie_wr_master_wr_in_data
  wire [289 : 0] blueDMA_m_pcie_wr_master_wr_in_data$D_IN,
		 blueDMA_m_pcie_wr_master_wr_in_data$D_OUT;
  wire blueDMA_m_pcie_wr_master_wr_in_data$CLR,
       blueDMA_m_pcie_wr_master_wr_in_data$DEQ,
       blueDMA_m_pcie_wr_master_wr_in_data$EMPTY_N,
       blueDMA_m_pcie_wr_master_wr_in_data$ENQ,
       blueDMA_m_pcie_wr_master_wr_in_data$FULL_N;

  // ports of submodule blueDMA_m_pcie_wr_master_wr_out
  wire [3 : 0] blueDMA_m_pcie_wr_master_wr_out$D_IN;
  wire blueDMA_m_pcie_wr_master_wr_out$CLR,
       blueDMA_m_pcie_wr_master_wr_out$DEQ,
       blueDMA_m_pcie_wr_master_wr_out$EMPTY_N,
       blueDMA_m_pcie_wr_master_wr_out$ENQ,
       blueDMA_m_pcie_wr_master_wr_out$FULL_N;

  // ports of submodule blueDMA_m_pcie_wr_reqGen_incomingBuffer
  wire [99 : 0] blueDMA_m_pcie_wr_reqGen_incomingBuffer$D_IN,
		blueDMA_m_pcie_wr_reqGen_incomingBuffer$D_OUT;
  wire blueDMA_m_pcie_wr_reqGen_incomingBuffer$CLR,
       blueDMA_m_pcie_wr_reqGen_incomingBuffer$DEQ,
       blueDMA_m_pcie_wr_reqGen_incomingBuffer$EMPTY_N,
       blueDMA_m_pcie_wr_reqGen_incomingBuffer$ENQ,
       blueDMA_m_pcie_wr_reqGen_incomingBuffer$FULL_N;

  // ports of submodule blueDMA_m_pcie_wr_reqGen_intermediateBuffer
  wire [109 : 0] blueDMA_m_pcie_wr_reqGen_intermediateBuffer$D_IN,
		 blueDMA_m_pcie_wr_reqGen_intermediateBuffer$D_OUT;
  wire blueDMA_m_pcie_wr_reqGen_intermediateBuffer$CLR,
       blueDMA_m_pcie_wr_reqGen_intermediateBuffer$DEQ,
       blueDMA_m_pcie_wr_reqGen_intermediateBuffer$EMPTY_N,
       blueDMA_m_pcie_wr_reqGen_intermediateBuffer$ENQ,
       blueDMA_m_pcie_wr_reqGen_intermediateBuffer$FULL_N;

  // ports of submodule blueDMA_m_pcie_wr_reqGen_intermediateBuffer2
  wire [136 : 0] blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$D_IN,
		 blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$D_OUT;
  wire blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$CLR,
       blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$DEQ,
       blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$EMPTY_N,
       blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$ENQ,
       blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$FULL_N;

  // ports of submodule blueDMA_m_pcie_wr_reqGen_intermediateBuffer3
  wire [145 : 0] blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$D_IN,
		 blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$D_OUT;
  wire blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$CLR,
       blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$DEQ,
       blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$EMPTY_N,
       blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$ENQ,
       blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$FULL_N;

  // ports of submodule blueDMA_m_pcie_wr_reqGen_outgoingBuffer
  wire [156 : 0] blueDMA_m_pcie_wr_reqGen_outgoingBuffer$D_IN,
		 blueDMA_m_pcie_wr_reqGen_outgoingBuffer$D_OUT;
  wire blueDMA_m_pcie_wr_reqGen_outgoingBuffer$CLR,
       blueDMA_m_pcie_wr_reqGen_outgoingBuffer$DEQ,
       blueDMA_m_pcie_wr_reqGen_outgoingBuffer$EMPTY_N,
       blueDMA_m_pcie_wr_reqGen_outgoingBuffer$ENQ,
       blueDMA_m_pcie_wr_reqGen_outgoingBuffer$FULL_N;

  // ports of submodule blueDMA_mclk_m_fpga_put_req_rd_ff
  wire [99 : 0] blueDMA_mclk_m_fpga_put_req_rd_ff$dD_OUT,
		blueDMA_mclk_m_fpga_put_req_rd_ff$sD_IN;
  wire blueDMA_mclk_m_fpga_put_req_rd_ff$dDEQ,
       blueDMA_mclk_m_fpga_put_req_rd_ff$dEMPTY_N,
       blueDMA_mclk_m_fpga_put_req_rd_ff$sENQ,
       blueDMA_mclk_m_fpga_put_req_rd_ff$sFULL_N;

  // ports of submodule blueDMA_mclk_m_fpga_put_req_wr_ff
  wire [99 : 0] blueDMA_mclk_m_fpga_put_req_wr_ff$dD_OUT,
		blueDMA_mclk_m_fpga_put_req_wr_ff$sD_IN;
  wire blueDMA_mclk_m_fpga_put_req_wr_ff$dDEQ,
       blueDMA_mclk_m_fpga_put_req_wr_ff$dEMPTY_N,
       blueDMA_mclk_m_fpga_put_req_wr_ff$sENQ,
       blueDMA_mclk_m_fpga_put_req_wr_ff$sFULL_N;

  // ports of submodule blueDMA_mclk_m_pcie_put_req_rd_ff
  wire [99 : 0] blueDMA_mclk_m_pcie_put_req_rd_ff$dD_OUT,
		blueDMA_mclk_m_pcie_put_req_rd_ff$sD_IN;
  wire blueDMA_mclk_m_pcie_put_req_rd_ff$dDEQ,
       blueDMA_mclk_m_pcie_put_req_rd_ff$dEMPTY_N,
       blueDMA_mclk_m_pcie_put_req_rd_ff$sENQ,
       blueDMA_mclk_m_pcie_put_req_rd_ff$sFULL_N;

  // ports of submodule blueDMA_mclk_m_pcie_put_req_wr_ff
  wire [99 : 0] blueDMA_mclk_m_pcie_put_req_wr_ff$dD_OUT,
		blueDMA_mclk_m_pcie_put_req_wr_ff$sD_IN;
  wire blueDMA_mclk_m_pcie_put_req_wr_ff$dDEQ,
       blueDMA_mclk_m_pcie_put_req_wr_ff$dEMPTY_N,
       blueDMA_mclk_m_pcie_put_req_wr_ff$sENQ,
       blueDMA_mclk_m_pcie_put_req_wr_ff$sFULL_N;

  // ports of submodule blueDMA_pcieDone
  wire blueDMA_pcieDone$dDEQ,
       blueDMA_pcieDone$dEMPTY_N,
       blueDMA_pcieDone$sD_IN,
       blueDMA_pcieDone$sENQ,
       blueDMA_pcieDone$sFULL_N;

  // ports of submodule blueDMA_readConvBTT_ff
  wire [32 : 0] blueDMA_readConvBTT_ff$dD_OUT, blueDMA_readConvBTT_ff$sD_IN;
  wire blueDMA_readConvBTT_ff$dDEQ,
       blueDMA_readConvBTT_ff$dEMPTY_N,
       blueDMA_readConvBTT_ff$sENQ,
       blueDMA_readConvBTT_ff$sFULL_N;

  // ports of submodule blueDMA_s_config_readSlave_in
  wire [66 : 0] blueDMA_s_config_readSlave_in$D_IN,
		blueDMA_s_config_readSlave_in$D_OUT;
  wire blueDMA_s_config_readSlave_in$CLR,
       blueDMA_s_config_readSlave_in$DEQ,
       blueDMA_s_config_readSlave_in$EMPTY_N,
       blueDMA_s_config_readSlave_in$ENQ,
       blueDMA_s_config_readSlave_in$FULL_N;

  // ports of submodule blueDMA_s_config_readSlave_out
  reg [65 : 0] blueDMA_s_config_readSlave_out$D_IN;
  wire [65 : 0] blueDMA_s_config_readSlave_out$D_OUT;
  wire blueDMA_s_config_readSlave_out$CLR,
       blueDMA_s_config_readSlave_out$DEQ,
       blueDMA_s_config_readSlave_out$EMPTY_N,
       blueDMA_s_config_readSlave_out$ENQ,
       blueDMA_s_config_readSlave_out$FULL_N;

  // ports of submodule blueDMA_s_config_writeSlave_in
  wire [138 : 0] blueDMA_s_config_writeSlave_in$D_IN,
		 blueDMA_s_config_writeSlave_in$D_OUT;
  wire blueDMA_s_config_writeSlave_in$CLR,
       blueDMA_s_config_writeSlave_in$DEQ,
       blueDMA_s_config_writeSlave_in$EMPTY_N,
       blueDMA_s_config_writeSlave_in$ENQ,
       blueDMA_s_config_writeSlave_in$FULL_N;

  // ports of submodule blueDMA_s_config_writeSlave_out
  wire [1 : 0] blueDMA_s_config_writeSlave_out$D_IN,
	       blueDMA_s_config_writeSlave_out$D_OUT;
  wire blueDMA_s_config_writeSlave_out$CLR,
       blueDMA_s_config_writeSlave_out$DEQ,
       blueDMA_s_config_writeSlave_out$EMPTY_N,
       blueDMA_s_config_writeSlave_out$ENQ,
       blueDMA_s_config_writeSlave_out$FULL_N;

  // ports of submodule blueDMA_writeConvBTT_ff
  wire [32 : 0] blueDMA_writeConvBTT_ff$dD_OUT, blueDMA_writeConvBTT_ff$sD_IN;
  wire blueDMA_writeConvBTT_ff$dDEQ,
       blueDMA_writeConvBTT_ff$dEMPTY_N,
       blueDMA_writeConvBTT_ff$sENQ,
       blueDMA_writeConvBTT_ff$sFULL_N;

  // ports of submodule blueDMA_writeConverter_dataSync
  wire [511 : 0] blueDMA_writeConverter_dataSync$D_IN,
		 blueDMA_writeConverter_dataSync$D_OUT;
  wire blueDMA_writeConverter_dataSync$CLR,
       blueDMA_writeConverter_dataSync$DEQ,
       blueDMA_writeConverter_dataSync$EMPTY_N,
       blueDMA_writeConverter_dataSync$ENQ,
       blueDMA_writeConverter_dataSync$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_blueDMA_byteAlignerReader_forwardOutputLast,
       CAN_FIRE_RL_blueDMA_byteAlignerWriter_forwardOutputLast,
       CAN_FIRE_RL_blueDMA_handleRead,
       WILL_FIRE_RL_blueDMA_1_mkConnectionGetPut,
       WILL_FIRE_RL_blueDMA_2_mkConnectionGetPut,
       WILL_FIRE_RL_blueDMA_3_mkConnectionGetPut,
       WILL_FIRE_RL_blueDMA_byteAlignerReader_fetchNewData,
       WILL_FIRE_RL_blueDMA_byteAlignerReader_forwardOutput,
       WILL_FIRE_RL_blueDMA_byteAlignerReader_forwardOutputLast,
       WILL_FIRE_RL_blueDMA_byteAlignerWriter_fetchNewData,
       WILL_FIRE_RL_blueDMA_byteAlignerWriter_forwardOutput,
       WILL_FIRE_RL_blueDMA_byteAlignerWriter_forwardOutputLast,
       WILL_FIRE_RL_blueDMA_handleRead,
       WILL_FIRE_RL_blueDMA_handleWrite,
       WILL_FIRE_RL_blueDMA_m_fpga_rd_fillBuffer,
       WILL_FIRE_RL_blueDMA_m_fpga_rd_forwardData,
       WILL_FIRE_RL_blueDMA_m_fpga_rd_placeRequest,
       WILL_FIRE_RL_blueDMA_m_fpga_rd_reqGen_finishRequest,
       WILL_FIRE_RL_blueDMA_m_fpga_wr_fillBuffer,
       WILL_FIRE_RL_blueDMA_m_fpga_wr_forwardData,
       WILL_FIRE_RL_blueDMA_m_fpga_wr_placeRequest,
       WILL_FIRE_RL_blueDMA_m_fpga_wr_reqGen_finishRequest,
       WILL_FIRE_RL_blueDMA_m_pcie_rd_fillBuffer,
       WILL_FIRE_RL_blueDMA_m_pcie_rd_forwardData,
       WILL_FIRE_RL_blueDMA_m_pcie_rd_placeRequest,
       WILL_FIRE_RL_blueDMA_m_pcie_rd_reqGen_finishRequest,
       WILL_FIRE_RL_blueDMA_m_pcie_wr_fillBuffer,
       WILL_FIRE_RL_blueDMA_m_pcie_wr_forwardData,
       WILL_FIRE_RL_blueDMA_m_pcie_wr_placeRequest,
       WILL_FIRE_RL_blueDMA_m_pcie_wr_reqGen_finishRequest,
       WILL_FIRE_RL_blueDMA_s_config_1_axiWriteFallback,
       WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial,
       WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled,
       WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1,
       WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2,
       WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3,
       WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4,
       WILL_FIRE_RL_blueDMA_s_config_axiReadFallback,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_1,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_2,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_3,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_4,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_5,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_7,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_8,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_1,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_2,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_3,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_4,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8,
       WILL_FIRE_RL_blueDMA_setInterrupt;

  // inputs to muxes for submodule ports
  wire [511 : 0] MUX_blueDMA_byteAlignerReader_buffer$port0__write_1__VAL_1,
		 MUX_blueDMA_byteAlignerWriter_buffer$port0__write_1__VAL_1;
  wire [113 : 0] MUX_blueDMA_m_pcie_rd_task_data_requests_reg$write_1__VAL_1,
		 MUX_blueDMA_m_pcie_wr_task_data_requests_reg$write_1__VAL_1;
  wire [112 : 0] MUX_blueDMA_m_fpga_rd_task_data_requests_reg$write_1__VAL_1,
		 MUX_blueDMA_m_fpga_wr_task_data_requests_reg$write_1__VAL_1;
  wire [65 : 0] MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_1,
		MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_2,
		MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_3,
		MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_4,
		MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_5,
		MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_6,
		MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_7,
		MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_8,
		MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_9;
  wire [44 : 0] MUX_blueDMA_m_fpga_rd_task_data_output_reg$write_1__VAL_1,
		MUX_blueDMA_m_fpga_wr_task_data_output_reg$write_1__VAL_1;
  wire [42 : 0] MUX_blueDMA_m_pcie_rd_task_data_output_reg$write_1__VAL_1,
		MUX_blueDMA_m_pcie_wr_task_data_output_reg$write_1__VAL_1;
  wire [31 : 0] MUX_blueDMA_byteAlignerReader_bytes_in$write_1__VAL_1,
		MUX_blueDMA_byteAlignerReader_bytes_out$write_1__VAL_1,
		MUX_blueDMA_byteAlignerReader_bytes_out$write_1__VAL_2,
		MUX_blueDMA_byteAlignerWriter_bytes_in$write_1__VAL_1,
		MUX_blueDMA_byteAlignerWriter_bytes_out$write_1__VAL_1,
		MUX_blueDMA_byteAlignerWriter_bytes_out$write_1__VAL_2,
		MUX_blueDMA_readConverter_byteCntr$write_1__VAL_2;
  wire [26 : 0] MUX_blueDMA_writeConverter_wordOutCntr$write_1__VAL_1,
		MUX_blueDMA_writeConverter_wordOutCntr$write_1__VAL_2;
  wire [7 : 0] MUX_blueDMA_m_fpga_wr_beatsThisRequestCntr$write_1__VAL_1,
	       MUX_blueDMA_m_pcie_wr_beatsThisRequestCntr$write_1__VAL_1;
  wire [5 : 0] MUX_blueDMA_byteAlignerReader_bytes_left_in_buffer$port0__write_1__VAL_1,
	       MUX_blueDMA_byteAlignerReader_bytes_out_needed$write_1__VAL_1,
	       MUX_blueDMA_byteAlignerWriter_bytes_left_in_buffer$port0__write_1__VAL_1,
	       MUX_blueDMA_byteAlignerWriter_bytes_out_needed$write_1__VAL_1;
  wire [1 : 0] MUX_blueDMA_writeConverter_wordInCntr$write_1__VAL_1,
	       MUX_blueDMA_writeConverter_wordInCntr$write_1__VAL_2;
  wire MUX_blueDMA_opInProgress$write_1__SEL_2;

  // remaining internal signals
  reg [63 : 0] v__h14052, v__h33722;
  reg [3 : 0] CASE_blueDMA_m_fpga_rd_master_rd_warcachewget_ETC__q5,
	      CASE_blueDMA_m_fpga_wr_master_wr_wawcachewget_ETC__q4,
	      CASE_blueDMA_m_pcie_rd_master_rd_warcachewget_ETC__q3,
	      CASE_blueDMA_m_pcie_wr_master_wr_wawcachewget_ETC__q2;
  wire [63 : 0] _theResult____h11174,
		_theResult____h15236,
		_theResult____h30847,
		_theResult____h946,
		bytes_first___1__h11205,
		bytes_first___1__h15267,
		bytes_first___1__h30878,
		bytes_first___1__h977,
		bytes_first__h11173,
		bytes_first__h15235,
		bytes_first__h30846,
		bytes_first__h945,
		x__h11179,
		x__h15241,
		x__h30852,
		x__h951,
		x_strb__h19096;
  wire [31 : 0] _theResult____h1123,
		_theResult____h11351,
		_theResult____h15413,
		_theResult____h31024,
		blueDMA_m_fpga_rd_reqGen_incomingBufferD_OUT__ETC__q6,
		blueDMA_m_fpga_wr_reqGen_incomingBufferD_OUT__ETC__q7,
		blueDMA_m_pcie_rd_reqGen_incomingBufferD_OUT__ETC__q8,
		blueDMA_m_pcie_wr_reqGen_incomingBufferD_OUT__ETC__q9,
		btt__h142114,
		btt__h98960,
		transfers_total___1__h1131,
		transfers_total___1__h11359,
		transfers_total___1__h15421,
		transfers_total___1__h31032,
		transfers_total__h1122,
		transfers_total__h1128,
		transfers_total__h11350,
		transfers_total__h11356,
		transfers_total__h15412,
		transfers_total__h15418,
		transfers_total__h31023,
		transfers_total__h31029,
		x__h1125,
		x__h11353,
		x__h11379,
		x__h1151,
		x__h15415,
		x__h15441,
		x__h31026,
		x__h31052,
		x_strb__h4831,
		y__h1018,
		y__h11246,
		y__h11380,
		y__h11382,
		y__h1152,
		y__h1154,
		y__h15308,
		y__h15442,
		y__h15444,
		y__h30919,
		y__h31053,
		y__h31055;
  wire [26 : 0] _theResult____h11702,
		_theResult____h1474,
		blueDMA_m_pcie_rd_reqGen_intermediateBuffer3_f_ETC___d445,
		blueDMA_m_pcie_wr_reqGen_intermediateBuffer3_f_ETC___d73,
		request_data_requests_total__h11669,
		request_data_requests_total__h1441,
		requests_total___1__h11709,
		requests_total___1__h1481,
		requests_total__h11622,
		requests_total__h11706,
		requests_total__h1394,
		requests_total__h1478,
		x_requests_total__h14006,
		x_requests_total__h4455,
		x_transfers_total__h10341,
		x_transfers_total__h14341;
  wire [25 : 0] _theResult____h15764,
		_theResult____h31375,
		blueDMA_m_fpga_rd_reqGen_intermediateBuffer3_f_ETC___d1156,
		blueDMA_m_fpga_wr_reqGen_intermediateBuffer3_f_ETC___d640,
		request_data_requests_total__h15731,
		request_data_requests_total__h31342,
		requests_total___1__h15771,
		requests_total___1__h31382,
		requests_total__h15684,
		requests_total__h15768,
		requests_total__h31295,
		requests_total__h31379,
		x_requests_total__h18720,
		x_requests_total__h33676,
		x_transfers_total__h30014,
		x_transfers_total__h34011;
  wire [20 : 0] x_address_dynamic__h14008,
		x_address_dynamic__h18722,
		x_address_dynamic__h33678,
		x_address_dynamic__h4457;
  wire [12 : 0] x__h11580, x__h1352, x__h15642, x__h31253;
  wire [11 : 0] addr_last__h11526,
		addr_last__h11527,
		addr_last__h1298,
		addr_last__h1299,
		addr_last__h15588,
		addr_last__h15589,
		addr_last__h31199,
		addr_last__h31200,
		barrier_transfers__h11570,
		barrier_transfers__h1342,
		barrier_transfers__h15632,
		barrier_transfers__h31243,
		y__h11547,
		y__h1319,
		y__h15609,
		y__h31220;
  wire [8 : 0] burst_length__h11524,
	       burst_length__h1296,
	       burst_length__h15586,
	       burst_length__h31197,
	       requests_first__h11455,
	       requests_first__h1227,
	       requests_first__h15517,
	       requests_first__h31128,
	       x__h11695,
	       x__h13922,
	       x__h13932,
	       x__h1467,
	       x__h15757,
	       x__h18650,
	       x__h18660,
	       x__h31368,
	       x__h33592,
	       x__h33602,
	       x__h4385,
	       x__h4395;
  wire [7 : 0] _theResult_____2__h13870,
	       _theResult_____2__h33540,
	       _theResult_____3__h18598,
	       _theResult_____3__h4333,
	       beatsThisRequestCntrT__h18982,
	       beatsThisRequestCntrT__h4717;
  wire [6 : 0] IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784,
	       endByte___1__h22005,
	       endByte___1__h22031,
	       startByte___1__h22004,
	       x__h21991;
  wire [5 : 0] IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217,
	       b__h112387,
	       b__h69154,
	       endByte___1__h6332,
	       endByte___1__h6358,
	       startByte___1__h6331,
	       x__h6318;
  wire [1 : 0] IF_0_CONCAT_blueDMA_readConverter_wordInCntr_E_ETC__q1;
  wire blueDMA_byteAlignerReader_bytes_in_583_ULT_blu_ETC___d1585,
       blueDMA_byteAlignerReader_bytes_left_in_buffer_ETC___d1600,
       blueDMA_byteAlignerWriter_bytes_in_709_ULT_blu_ETC___d1711,
       blueDMA_byteAlignerWriter_bytes_left_in_buffer_ETC___d1726,
       blueDMA_fpgaLastCycle_819_AND_blueDMA_m_fpga_r_ETC___d1821,
       blueDMA_m_fpga_wr_beatsThisRequestCntr_61_EQ_b_ETC___d763,
       blueDMA_m_pcie_wr_beatsThisRequestCntr_94_EQ_b_ETC___d196,
       blueDMA_pc_reqCntr_644_EQ_blueDMA_cycles_betwe_ETC___d1830,
       blueDMA_pcieLastCycle_812_AND_blueDMA_m_pcie_r_ETC___d1814;

  // value method s_rd_arready
  assign S_AXI_arready = blueDMA_s_config_readSlave_in$FULL_N ;

  // value method s_rd_rvalid
  assign S_AXI_rvalid = blueDMA_s_config_readSlave_out$EMPTY_N ;

  // value method s_rd_rdata
  assign S_AXI_rdata =
	     blueDMA_s_config_readSlave_out$EMPTY_N ?
	       blueDMA_s_config_readSlave_out$D_OUT[65:2] :
	       64'd0 ;

  // value method s_rd_rresp
  assign S_AXI_rresp =
	     blueDMA_s_config_readSlave_out$EMPTY_N ?
	       blueDMA_s_config_readSlave_out$D_OUT[1:0] :
	       2'd0 ;

  // value method s_wr_awready
  assign S_AXI_awready = !blueDMA_s_config_writeSlave_addrIn_rv[67] ;

  // value method s_wr_wready
  assign S_AXI_wready = !blueDMA_s_config_writeSlave_dataIn_rv[72] ;

  // value method s_wr_bvalid
  assign S_AXI_bvalid = blueDMA_s_config_writeSlave_out$EMPTY_N ;

  // value method s_wr_bresp
  assign S_AXI_bresp =
	     blueDMA_s_config_writeSlave_out$EMPTY_N ?
	       blueDMA_s_config_writeSlave_out$D_OUT :
	       2'd0 ;

  // value method pcie_rd_arvalid
  assign m64_axi_arvalid = blueDMA_m_pcie_rd_master_rd_in$EMPTY_N ;

  // value method pcie_rd_arid
  assign m64_axi_arid =
	     blueDMA_m_pcie_rd_master_rd_in$EMPTY_N &&
	     blueDMA_m_pcie_rd_master_rd_in$D_OUT[94] ;

  // value method pcie_rd_araddr
  assign m64_axi_araddr =
	     blueDMA_m_pcie_rd_master_rd_in$EMPTY_N ?
	       blueDMA_m_pcie_rd_master_rd_in$D_OUT[93:30] :
	       64'd0 ;

  // value method pcie_rd_arlen
  assign m64_axi_arlen =
	     blueDMA_m_pcie_rd_master_rd_in$EMPTY_N ?
	       blueDMA_m_pcie_rd_master_rd_in$D_OUT[29:22] :
	       8'd0 ;

  // value method pcie_rd_arsize
  assign m64_axi_arsize =
	     blueDMA_m_pcie_rd_master_rd_in$EMPTY_N ?
	       blueDMA_m_pcie_rd_master_rd_in$D_OUT[21:19] :
	       3'd0 ;

  // value method pcie_rd_arburst
  assign m64_axi_arburst =
	     blueDMA_m_pcie_rd_master_rd_in$EMPTY_N ?
	       blueDMA_m_pcie_rd_master_rd_in$D_OUT[18:17] :
	       2'd0 ;

  // value method pcie_rd_arlock
  assign m64_axi_arlock =
	     blueDMA_m_pcie_rd_master_rd_in$EMPTY_N &&
	     blueDMA_m_pcie_rd_master_rd_in$D_OUT[16] ;

  // value method pcie_rd_arcache
  assign m64_axi_arcache =
	     (!blueDMA_m_pcie_rd_master_rd_in$EMPTY_N ||
	      blueDMA_m_pcie_rd_master_rd_warcache$wget == 4'd0) ?
	       4'd0 :
	       CASE_blueDMA_m_pcie_rd_master_rd_warcachewget_ETC__q3 ;

  // value method pcie_rd_arprot
  assign m64_axi_arprot =
	     blueDMA_m_pcie_rd_master_rd_in$EMPTY_N ?
	       blueDMA_m_pcie_rd_master_rd_in$D_OUT[11:9] :
	       3'd0 ;

  // value method pcie_rd_arqos
  assign m64_axi_arqos =
	     blueDMA_m_pcie_rd_master_rd_in$EMPTY_N ?
	       blueDMA_m_pcie_rd_master_rd_in$D_OUT[8:5] :
	       4'd0 ;

  // value method pcie_rd_arregion
  assign m64_axi_arregion =
	     blueDMA_m_pcie_rd_master_rd_in$EMPTY_N ?
	       blueDMA_m_pcie_rd_master_rd_in$D_OUT[4:1] :
	       4'd0 ;

  // value method pcie_rd_aruser
  assign m64_axi_aruser =
	     blueDMA_m_pcie_rd_master_rd_in$EMPTY_N &&
	     blueDMA_m_pcie_rd_master_rd_in$D_OUT[0] ;

  // value method pcie_rd_rready
  assign m64_axi_rready = blueDMA_m_pcie_rd_master_rd_out$FULL_N ;

  // value method pcie_wr_awvalid
  assign m64_axi_awvalid = blueDMA_m_pcie_wr_master_wr_in_addr$EMPTY_N ;

  // value method pcie_wr_awid
  assign m64_axi_awid =
	     blueDMA_m_pcie_wr_master_wr_in_addr$EMPTY_N &&
	     blueDMA_m_pcie_wr_master_wr_in_addr$D_OUT[94] ;

  // value method pcie_wr_awaddr
  assign m64_axi_awaddr =
	     blueDMA_m_pcie_wr_master_wr_in_addr$EMPTY_N ?
	       blueDMA_m_pcie_wr_master_wr_in_addr$D_OUT[93:30] :
	       64'd0 ;

  // value method pcie_wr_awlen
  assign m64_axi_awlen =
	     blueDMA_m_pcie_wr_master_wr_in_addr$EMPTY_N ?
	       blueDMA_m_pcie_wr_master_wr_in_addr$D_OUT[29:22] :
	       8'd0 ;

  // value method pcie_wr_awsize
  assign m64_axi_awsize =
	     blueDMA_m_pcie_wr_master_wr_in_addr$EMPTY_N ?
	       blueDMA_m_pcie_wr_master_wr_in_addr$D_OUT[21:19] :
	       3'd0 ;

  // value method pcie_wr_awburst
  assign m64_axi_awburst =
	     blueDMA_m_pcie_wr_master_wr_in_addr$EMPTY_N ?
	       blueDMA_m_pcie_wr_master_wr_in_addr$D_OUT[18:17] :
	       2'd0 ;

  // value method pcie_wr_awlock
  assign m64_axi_awlock =
	     blueDMA_m_pcie_wr_master_wr_in_addr$EMPTY_N &&
	     blueDMA_m_pcie_wr_master_wr_in_addr$D_OUT[16] ;

  // value method pcie_wr_awcache
  assign m64_axi_awcache =
	     (!blueDMA_m_pcie_wr_master_wr_in_addr$EMPTY_N ||
	      blueDMA_m_pcie_wr_master_wr_wawcache$wget == 4'd0) ?
	       4'd0 :
	       CASE_blueDMA_m_pcie_wr_master_wr_wawcachewget_ETC__q2 ;

  // value method pcie_wr_awprot
  assign m64_axi_awprot =
	     blueDMA_m_pcie_wr_master_wr_in_addr$EMPTY_N ?
	       blueDMA_m_pcie_wr_master_wr_in_addr$D_OUT[11:9] :
	       3'd0 ;

  // value method pcie_wr_awqos
  assign m64_axi_awqos =
	     blueDMA_m_pcie_wr_master_wr_in_addr$EMPTY_N ?
	       blueDMA_m_pcie_wr_master_wr_in_addr$D_OUT[8:5] :
	       4'd0 ;

  // value method pcie_wr_awregion
  assign m64_axi_awregion =
	     blueDMA_m_pcie_wr_master_wr_in_addr$EMPTY_N ?
	       blueDMA_m_pcie_wr_master_wr_in_addr$D_OUT[4:1] :
	       4'd0 ;

  // value method pcie_wr_awuser
  assign m64_axi_awuser =
	     blueDMA_m_pcie_wr_master_wr_in_addr$EMPTY_N &&
	     blueDMA_m_pcie_wr_master_wr_in_addr$D_OUT[0] ;

  // value method pcie_wr_wvalid
  assign m64_axi_wvalid = blueDMA_m_pcie_wr_master_wr_in_data$EMPTY_N ;

  // value method pcie_wr_wdata
  assign m64_axi_wdata =
	     blueDMA_m_pcie_wr_master_wr_in_data$EMPTY_N ?
	       blueDMA_m_pcie_wr_master_wr_in_data$D_OUT[289:34] :
	       256'd0 ;

  // value method pcie_wr_wstrb
  assign m64_axi_wstrb =
	     blueDMA_m_pcie_wr_master_wr_in_data$EMPTY_N ?
	       blueDMA_m_pcie_wr_master_wr_in_data$D_OUT[33:2] :
	       32'd0 ;

  // value method pcie_wr_wlast
  assign m64_axi_wlast =
	     blueDMA_m_pcie_wr_master_wr_in_data$EMPTY_N &&
	     blueDMA_m_pcie_wr_master_wr_in_data$D_OUT[1] ;

  // value method pcie_wr_wuser
  assign m64_axi_wuser =
	     blueDMA_m_pcie_wr_master_wr_in_data$EMPTY_N &&
	     blueDMA_m_pcie_wr_master_wr_in_data$D_OUT[0] ;

  // value method pcie_wr_bready
  assign m64_axi_bready = blueDMA_m_pcie_wr_master_wr_out$FULL_N ;

  // value method fpga_rd_arvalid
  assign m32_axi_arvalid = blueDMA_m_fpga_rd_master_rd_in$EMPTY_N ;

  // value method fpga_rd_arid
  assign m32_axi_arid =
	     blueDMA_m_fpga_rd_master_rd_in$EMPTY_N &&
	     blueDMA_m_fpga_rd_master_rd_in$D_OUT[94] ;

  // value method fpga_rd_araddr
  assign m32_axi_araddr =
	     blueDMA_m_fpga_rd_master_rd_in$EMPTY_N ?
	       blueDMA_m_fpga_rd_master_rd_in$D_OUT[93:30] :
	       64'd0 ;

  // value method fpga_rd_arlen
  assign m32_axi_arlen =
	     blueDMA_m_fpga_rd_master_rd_in$EMPTY_N ?
	       blueDMA_m_fpga_rd_master_rd_in$D_OUT[29:22] :
	       8'd0 ;

  // value method fpga_rd_arsize
  assign m32_axi_arsize =
	     blueDMA_m_fpga_rd_master_rd_in$EMPTY_N ?
	       blueDMA_m_fpga_rd_master_rd_in$D_OUT[21:19] :
	       3'd0 ;

  // value method fpga_rd_arburst
  assign m32_axi_arburst =
	     blueDMA_m_fpga_rd_master_rd_in$EMPTY_N ?
	       blueDMA_m_fpga_rd_master_rd_in$D_OUT[18:17] :
	       2'd0 ;

  // value method fpga_rd_arlock
  assign m32_axi_arlock =
	     blueDMA_m_fpga_rd_master_rd_in$EMPTY_N &&
	     blueDMA_m_fpga_rd_master_rd_in$D_OUT[16] ;

  // value method fpga_rd_arcache
  assign m32_axi_arcache =
	     (!blueDMA_m_fpga_rd_master_rd_in$EMPTY_N ||
	      blueDMA_m_fpga_rd_master_rd_warcache$wget == 4'd0) ?
	       4'd0 :
	       CASE_blueDMA_m_fpga_rd_master_rd_warcachewget_ETC__q5 ;

  // value method fpga_rd_arprot
  assign m32_axi_arprot =
	     blueDMA_m_fpga_rd_master_rd_in$EMPTY_N ?
	       blueDMA_m_fpga_rd_master_rd_in$D_OUT[11:9] :
	       3'd0 ;

  // value method fpga_rd_arqos
  assign m32_axi_arqos =
	     blueDMA_m_fpga_rd_master_rd_in$EMPTY_N ?
	       blueDMA_m_fpga_rd_master_rd_in$D_OUT[8:5] :
	       4'd0 ;

  // value method fpga_rd_arregion
  assign m32_axi_arregion =
	     blueDMA_m_fpga_rd_master_rd_in$EMPTY_N ?
	       blueDMA_m_fpga_rd_master_rd_in$D_OUT[4:1] :
	       4'd0 ;

  // value method fpga_rd_aruser
  assign m32_axi_aruser =
	     blueDMA_m_fpga_rd_master_rd_in$EMPTY_N &&
	     blueDMA_m_fpga_rd_master_rd_in$D_OUT[0] ;

  // value method fpga_rd_rready
  assign m32_axi_rready = blueDMA_m_fpga_rd_master_rd_out$FULL_N ;

  // value method fpga_wr_awvalid
  assign m32_axi_awvalid = blueDMA_m_fpga_wr_master_wr_in_addr$EMPTY_N ;

  // value method fpga_wr_awid
  assign m32_axi_awid =
	     blueDMA_m_fpga_wr_master_wr_in_addr$EMPTY_N &&
	     blueDMA_m_fpga_wr_master_wr_in_addr$D_OUT[94] ;

  // value method fpga_wr_awaddr
  assign m32_axi_awaddr =
	     blueDMA_m_fpga_wr_master_wr_in_addr$EMPTY_N ?
	       blueDMA_m_fpga_wr_master_wr_in_addr$D_OUT[93:30] :
	       64'd0 ;

  // value method fpga_wr_awlen
  assign m32_axi_awlen =
	     blueDMA_m_fpga_wr_master_wr_in_addr$EMPTY_N ?
	       blueDMA_m_fpga_wr_master_wr_in_addr$D_OUT[29:22] :
	       8'd0 ;

  // value method fpga_wr_awsize
  assign m32_axi_awsize =
	     blueDMA_m_fpga_wr_master_wr_in_addr$EMPTY_N ?
	       blueDMA_m_fpga_wr_master_wr_in_addr$D_OUT[21:19] :
	       3'd0 ;

  // value method fpga_wr_awburst
  assign m32_axi_awburst =
	     blueDMA_m_fpga_wr_master_wr_in_addr$EMPTY_N ?
	       blueDMA_m_fpga_wr_master_wr_in_addr$D_OUT[18:17] :
	       2'd0 ;

  // value method fpga_wr_awlock
  assign m32_axi_awlock =
	     blueDMA_m_fpga_wr_master_wr_in_addr$EMPTY_N &&
	     blueDMA_m_fpga_wr_master_wr_in_addr$D_OUT[16] ;

  // value method fpga_wr_awcache
  assign m32_axi_awcache =
	     (!blueDMA_m_fpga_wr_master_wr_in_addr$EMPTY_N ||
	      blueDMA_m_fpga_wr_master_wr_wawcache$wget == 4'd0) ?
	       4'd0 :
	       CASE_blueDMA_m_fpga_wr_master_wr_wawcachewget_ETC__q4 ;

  // value method fpga_wr_awprot
  assign m32_axi_awprot =
	     blueDMA_m_fpga_wr_master_wr_in_addr$EMPTY_N ?
	       blueDMA_m_fpga_wr_master_wr_in_addr$D_OUT[11:9] :
	       3'd0 ;

  // value method fpga_wr_awqos
  assign m32_axi_awqos =
	     blueDMA_m_fpga_wr_master_wr_in_addr$EMPTY_N ?
	       blueDMA_m_fpga_wr_master_wr_in_addr$D_OUT[8:5] :
	       4'd0 ;

  // value method fpga_wr_awregion
  assign m32_axi_awregion =
	     blueDMA_m_fpga_wr_master_wr_in_addr$EMPTY_N ?
	       blueDMA_m_fpga_wr_master_wr_in_addr$D_OUT[4:1] :
	       4'd0 ;

  // value method fpga_wr_awuser
  assign m32_axi_awuser =
	     blueDMA_m_fpga_wr_master_wr_in_addr$EMPTY_N &&
	     blueDMA_m_fpga_wr_master_wr_in_addr$D_OUT[0] ;

  // value method fpga_wr_wvalid
  assign m32_axi_wvalid = blueDMA_m_fpga_wr_master_wr_in_data$EMPTY_N ;

  // value method fpga_wr_wdata
  assign m32_axi_wdata =
	     blueDMA_m_fpga_wr_master_wr_in_data$EMPTY_N ?
	       blueDMA_m_fpga_wr_master_wr_in_data$D_OUT[577:66] :
	       512'd0 ;

  // value method fpga_wr_wstrb
  assign m32_axi_wstrb =
	     blueDMA_m_fpga_wr_master_wr_in_data$EMPTY_N ?
	       blueDMA_m_fpga_wr_master_wr_in_data$D_OUT[65:2] :
	       64'd0 ;

  // value method fpga_wr_wlast
  assign m32_axi_wlast =
	     blueDMA_m_fpga_wr_master_wr_in_data$EMPTY_N &&
	     blueDMA_m_fpga_wr_master_wr_in_data$D_OUT[1] ;

  // value method fpga_wr_wuser
  assign m32_axi_wuser =
	     blueDMA_m_fpga_wr_master_wr_in_data$EMPTY_N &&
	     blueDMA_m_fpga_wr_master_wr_in_data$D_OUT[0] ;

  // value method fpga_wr_bready
  assign m32_axi_bready = blueDMA_m_fpga_wr_master_wr_out$FULL_N ;

  // value method interrupt
  assign IRQ = blueDMA_doneInterruptReg ;

  // submodule blueDMA_byteAlignerReader_addr_ff
  SyncFIFO1 #(.dataWidth(32'd160)) blueDMA_byteAlignerReader_addr_ff(.sCLK(s_axi_aclk),
								     .dCLK(m64_axi_aclk),
								     .sRST(s_axi_aresetn),
								     .sD_IN(blueDMA_byteAlignerReader_addr_ff$sD_IN),
								     .sENQ(blueDMA_byteAlignerReader_addr_ff$sENQ),
								     .dDEQ(blueDMA_byteAlignerReader_addr_ff$dDEQ),
								     .sFULL_N(),
								     .dEMPTY_N(blueDMA_byteAlignerReader_addr_ff$dEMPTY_N),
								     .dD_OUT(blueDMA_byteAlignerReader_addr_ff$dD_OUT));

  // submodule blueDMA_byteAlignerReader_incoming
  FIFO2 #(.width(32'd256),
	  .guarded(32'd1)) blueDMA_byteAlignerReader_incoming(.RST(m64_axi_aresetn),
							      .CLK(m64_axi_aclk),
							      .D_IN(blueDMA_byteAlignerReader_incoming$D_IN),
							      .ENQ(blueDMA_byteAlignerReader_incoming$ENQ),
							      .DEQ(blueDMA_byteAlignerReader_incoming$DEQ),
							      .CLR(blueDMA_byteAlignerReader_incoming$CLR),
							      .D_OUT(blueDMA_byteAlignerReader_incoming$D_OUT),
							      .FULL_N(),
							      .EMPTY_N(blueDMA_byteAlignerReader_incoming$EMPTY_N));

  // submodule blueDMA_byteAlignerReader_outgoing
  FIFO2 #(.width(32'd256),
	  .guarded(32'd1)) blueDMA_byteAlignerReader_outgoing(.RST(m64_axi_aresetn),
							      .CLK(m64_axi_aclk),
							      .D_IN(blueDMA_byteAlignerReader_outgoing$D_IN),
							      .ENQ(blueDMA_byteAlignerReader_outgoing$ENQ),
							      .DEQ(blueDMA_byteAlignerReader_outgoing$DEQ),
							      .CLR(blueDMA_byteAlignerReader_outgoing$CLR),
							      .D_OUT(),
							      .FULL_N(blueDMA_byteAlignerReader_outgoing$FULL_N),
							      .EMPTY_N());

  // submodule blueDMA_byteAlignerWriter_addr_ff
  SyncFIFO1 #(.dataWidth(32'd160)) blueDMA_byteAlignerWriter_addr_ff(.sCLK(s_axi_aclk),
								     .dCLK(m64_axi_aclk),
								     .sRST(s_axi_aresetn),
								     .sD_IN(blueDMA_byteAlignerWriter_addr_ff$sD_IN),
								     .sENQ(blueDMA_byteAlignerWriter_addr_ff$sENQ),
								     .dDEQ(blueDMA_byteAlignerWriter_addr_ff$dDEQ),
								     .sFULL_N(),
								     .dEMPTY_N(blueDMA_byteAlignerWriter_addr_ff$dEMPTY_N),
								     .dD_OUT(blueDMA_byteAlignerWriter_addr_ff$dD_OUT));

  // submodule blueDMA_byteAlignerWriter_incoming
  FIFO2 #(.width(32'd256),
	  .guarded(32'd1)) blueDMA_byteAlignerWriter_incoming(.RST(m64_axi_aresetn),
							      .CLK(m64_axi_aclk),
							      .D_IN(blueDMA_byteAlignerWriter_incoming$D_IN),
							      .ENQ(blueDMA_byteAlignerWriter_incoming$ENQ),
							      .DEQ(blueDMA_byteAlignerWriter_incoming$DEQ),
							      .CLR(blueDMA_byteAlignerWriter_incoming$CLR),
							      .D_OUT(blueDMA_byteAlignerWriter_incoming$D_OUT),
							      .FULL_N(),
							      .EMPTY_N(blueDMA_byteAlignerWriter_incoming$EMPTY_N));

  // submodule blueDMA_byteAlignerWriter_outgoing
  FIFO2 #(.width(32'd256),
	  .guarded(32'd1)) blueDMA_byteAlignerWriter_outgoing(.RST(m64_axi_aresetn),
							      .CLK(m64_axi_aclk),
							      .D_IN(blueDMA_byteAlignerWriter_outgoing$D_IN),
							      .ENQ(blueDMA_byteAlignerWriter_outgoing$ENQ),
							      .DEQ(blueDMA_byteAlignerWriter_outgoing$DEQ),
							      .CLR(blueDMA_byteAlignerWriter_outgoing$CLR),
							      .D_OUT(),
							      .FULL_N(blueDMA_byteAlignerWriter_outgoing$FULL_N),
							      .EMPTY_N());

  // submodule blueDMA_cmdsIn
  FIFO2 #(.width(32'd1), .guarded(32'd1)) blueDMA_cmdsIn(.RST(s_axi_aresetn),
							 .CLK(s_axi_aclk),
							 .D_IN(blueDMA_cmdsIn$D_IN),
							 .ENQ(blueDMA_cmdsIn$ENQ),
							 .DEQ(blueDMA_cmdsIn$DEQ),
							 .CLR(blueDMA_cmdsIn$CLR),
							 .D_OUT(blueDMA_cmdsIn$D_OUT),
							 .FULL_N(blueDMA_cmdsIn$FULL_N),
							 .EMPTY_N(blueDMA_cmdsIn$EMPTY_N));

  // submodule blueDMA_fpgaDone
  SyncFIFO1 #(.dataWidth(32'd1)) blueDMA_fpgaDone(.sCLK(m32_axi_aclk),
						  .dCLK(s_axi_aclk),
						  .sRST(m32_axi_aresetn),
						  .sD_IN(blueDMA_fpgaDone$sD_IN),
						  .sENQ(blueDMA_fpgaDone$sENQ),
						  .dDEQ(blueDMA_fpgaDone$dDEQ),
						  .sFULL_N(blueDMA_fpgaDone$sFULL_N),
						  .dEMPTY_N(blueDMA_fpgaDone$dEMPTY_N),
						  .dD_OUT());

  // submodule blueDMA_fpga_request_converter_fifo
  SyncFIFO #(.dataWidth(32'd512),
	     .depth(32'd512),
	     .indxWidth(32'd9)) blueDMA_fpga_request_converter_fifo(.sCLK(m64_axi_aclk),
								    .dCLK(m32_axi_aclk),
								    .sRST(m64_axi_aresetn),
								    .sD_IN(blueDMA_fpga_request_converter_fifo$sD_IN),
								    .sENQ(blueDMA_fpga_request_converter_fifo$sENQ),
								    .dDEQ(blueDMA_fpga_request_converter_fifo$dDEQ),
								    .sFULL_N(blueDMA_fpga_request_converter_fifo$sFULL_N),
								    .dEMPTY_N(blueDMA_fpga_request_converter_fifo$dEMPTY_N),
								    .dD_OUT(blueDMA_fpga_request_converter_fifo$dD_OUT));

  // submodule blueDMA_fpga_response_converter_fifo
  SyncFIFO #(.dataWidth(32'd512),
	     .depth(32'd512),
	     .indxWidth(32'd9)) blueDMA_fpga_response_converter_fifo(.sCLK(m32_axi_aclk),
								     .dCLK(m64_axi_aclk),
								     .sRST(m32_axi_aresetn),
								     .sD_IN(blueDMA_fpga_response_converter_fifo$sD_IN),
								     .sENQ(blueDMA_fpga_response_converter_fifo$sENQ),
								     .dDEQ(blueDMA_fpga_response_converter_fifo$dDEQ),
								     .sFULL_N(blueDMA_fpga_response_converter_fifo$sFULL_N),
								     .dEMPTY_N(blueDMA_fpga_response_converter_fifo$dEMPTY_N),
								     .dD_OUT(blueDMA_fpga_response_converter_fifo$dD_OUT));

  // submodule blueDMA_m_fpga_rd_master_rd_in
  SizedFIFO #(.p1width(32'd95),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) blueDMA_m_fpga_rd_master_rd_in(.RST(m32_axi_aresetn),
							      .CLK(m32_axi_aclk),
							      .D_IN(blueDMA_m_fpga_rd_master_rd_in$D_IN),
							      .ENQ(blueDMA_m_fpga_rd_master_rd_in$ENQ),
							      .DEQ(blueDMA_m_fpga_rd_master_rd_in$DEQ),
							      .CLR(blueDMA_m_fpga_rd_master_rd_in$CLR),
							      .D_OUT(blueDMA_m_fpga_rd_master_rd_in$D_OUT),
							      .FULL_N(blueDMA_m_fpga_rd_master_rd_in$FULL_N),
							      .EMPTY_N(blueDMA_m_fpga_rd_master_rd_in$EMPTY_N));

  // submodule blueDMA_m_fpga_rd_master_rd_out
  FIFO2 #(.width(32'd517),
	  .guarded(32'd1)) blueDMA_m_fpga_rd_master_rd_out(.RST(m32_axi_aresetn),
							   .CLK(m32_axi_aclk),
							   .D_IN(blueDMA_m_fpga_rd_master_rd_out$D_IN),
							   .ENQ(blueDMA_m_fpga_rd_master_rd_out$ENQ),
							   .DEQ(blueDMA_m_fpga_rd_master_rd_out$DEQ),
							   .CLR(blueDMA_m_fpga_rd_master_rd_out$CLR),
							   .D_OUT(blueDMA_m_fpga_rd_master_rd_out$D_OUT),
							   .FULL_N(blueDMA_m_fpga_rd_master_rd_out$FULL_N),
							   .EMPTY_N(blueDMA_m_fpga_rd_master_rd_out$EMPTY_N));

  // submodule blueDMA_m_fpga_rd_maxOutstandingFIFO
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) blueDMA_m_fpga_rd_maxOutstandingFIFO(.RST(m32_axi_aresetn),
								    .CLK(m32_axi_aclk),
								    .D_IN(blueDMA_m_fpga_rd_maxOutstandingFIFO$D_IN),
								    .ENQ(blueDMA_m_fpga_rd_maxOutstandingFIFO$ENQ),
								    .DEQ(blueDMA_m_fpga_rd_maxOutstandingFIFO$DEQ),
								    .CLR(blueDMA_m_fpga_rd_maxOutstandingFIFO$CLR),
								    .D_OUT(),
								    .FULL_N(blueDMA_m_fpga_rd_maxOutstandingFIFO$FULL_N),
								    .EMPTY_N(blueDMA_m_fpga_rd_maxOutstandingFIFO$EMPTY_N));

  // submodule blueDMA_m_fpga_rd_outgoingBuffer
  FIFO2 #(.width(32'd512),
	  .guarded(32'd1)) blueDMA_m_fpga_rd_outgoingBuffer(.RST(m32_axi_aresetn),
							    .CLK(m32_axi_aclk),
							    .D_IN(blueDMA_m_fpga_rd_outgoingBuffer$D_IN),
							    .ENQ(blueDMA_m_fpga_rd_outgoingBuffer$ENQ),
							    .DEQ(blueDMA_m_fpga_rd_outgoingBuffer$DEQ),
							    .CLR(blueDMA_m_fpga_rd_outgoingBuffer$CLR),
							    .D_OUT(blueDMA_m_fpga_rd_outgoingBuffer$D_OUT),
							    .FULL_N(blueDMA_m_fpga_rd_outgoingBuffer$FULL_N),
							    .EMPTY_N(blueDMA_m_fpga_rd_outgoingBuffer$EMPTY_N));

  // submodule blueDMA_m_fpga_rd_reqGen_incomingBuffer
  FIFO2 #(.width(32'd100),
	  .guarded(32'd1)) blueDMA_m_fpga_rd_reqGen_incomingBuffer(.RST(m32_axi_aresetn),
								   .CLK(m32_axi_aclk),
								   .D_IN(blueDMA_m_fpga_rd_reqGen_incomingBuffer$D_IN),
								   .ENQ(blueDMA_m_fpga_rd_reqGen_incomingBuffer$ENQ),
								   .DEQ(blueDMA_m_fpga_rd_reqGen_incomingBuffer$DEQ),
								   .CLR(blueDMA_m_fpga_rd_reqGen_incomingBuffer$CLR),
								   .D_OUT(blueDMA_m_fpga_rd_reqGen_incomingBuffer$D_OUT),
								   .FULL_N(blueDMA_m_fpga_rd_reqGen_incomingBuffer$FULL_N),
								   .EMPTY_N(blueDMA_m_fpga_rd_reqGen_incomingBuffer$EMPTY_N));

  // submodule blueDMA_m_fpga_rd_reqGen_intermediateBuffer
  FIFO2 #(.width(32'd112),
	  .guarded(32'd1)) blueDMA_m_fpga_rd_reqGen_intermediateBuffer(.RST(m32_axi_aresetn),
								       .CLK(m32_axi_aclk),
								       .D_IN(blueDMA_m_fpga_rd_reqGen_intermediateBuffer$D_IN),
								       .ENQ(blueDMA_m_fpga_rd_reqGen_intermediateBuffer$ENQ),
								       .DEQ(blueDMA_m_fpga_rd_reqGen_intermediateBuffer$DEQ),
								       .CLR(blueDMA_m_fpga_rd_reqGen_intermediateBuffer$CLR),
								       .D_OUT(blueDMA_m_fpga_rd_reqGen_intermediateBuffer$D_OUT),
								       .FULL_N(blueDMA_m_fpga_rd_reqGen_intermediateBuffer$FULL_N),
								       .EMPTY_N(blueDMA_m_fpga_rd_reqGen_intermediateBuffer$EMPTY_N));

  // submodule blueDMA_m_fpga_rd_reqGen_intermediateBuffer2
  FIFO2 #(.width(32'd138),
	  .guarded(32'd1)) blueDMA_m_fpga_rd_reqGen_intermediateBuffer2(.RST(m32_axi_aresetn),
									.CLK(m32_axi_aclk),
									.D_IN(blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$D_IN),
									.ENQ(blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$ENQ),
									.DEQ(blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$DEQ),
									.CLR(blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$CLR),
									.D_OUT(blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$D_OUT),
									.FULL_N(blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$FULL_N),
									.EMPTY_N(blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$EMPTY_N));

  // submodule blueDMA_m_fpga_rd_reqGen_intermediateBuffer3
  FIFO2 #(.width(32'd147),
	  .guarded(32'd1)) blueDMA_m_fpga_rd_reqGen_intermediateBuffer3(.RST(m32_axi_aresetn),
									.CLK(m32_axi_aclk),
									.D_IN(blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$D_IN),
									.ENQ(blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$ENQ),
									.DEQ(blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$DEQ),
									.CLR(blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$CLR),
									.D_OUT(blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$D_OUT),
									.FULL_N(blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$FULL_N),
									.EMPTY_N(blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$EMPTY_N));

  // submodule blueDMA_m_fpga_rd_reqGen_outgoingBuffer
  FIFO2 #(.width(32'd158),
	  .guarded(32'd1)) blueDMA_m_fpga_rd_reqGen_outgoingBuffer(.RST(m32_axi_aresetn),
								   .CLK(m32_axi_aclk),
								   .D_IN(blueDMA_m_fpga_rd_reqGen_outgoingBuffer$D_IN),
								   .ENQ(blueDMA_m_fpga_rd_reqGen_outgoingBuffer$ENQ),
								   .DEQ(blueDMA_m_fpga_rd_reqGen_outgoingBuffer$DEQ),
								   .CLR(blueDMA_m_fpga_rd_reqGen_outgoingBuffer$CLR),
								   .D_OUT(blueDMA_m_fpga_rd_reqGen_outgoingBuffer$D_OUT),
								   .FULL_N(blueDMA_m_fpga_rd_reqGen_outgoingBuffer$FULL_N),
								   .EMPTY_N(blueDMA_m_fpga_rd_reqGen_outgoingBuffer$EMPTY_N));

  // submodule blueDMA_m_fpga_wr_beatsPerRequestFIFO
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) blueDMA_m_fpga_wr_beatsPerRequestFIFO(.RST(m32_axi_aresetn),
								     .CLK(m32_axi_aclk),
								     .D_IN(blueDMA_m_fpga_wr_beatsPerRequestFIFO$D_IN),
								     .ENQ(blueDMA_m_fpga_wr_beatsPerRequestFIFO$ENQ),
								     .DEQ(blueDMA_m_fpga_wr_beatsPerRequestFIFO$DEQ),
								     .CLR(blueDMA_m_fpga_wr_beatsPerRequestFIFO$CLR),
								     .D_OUT(blueDMA_m_fpga_wr_beatsPerRequestFIFO$D_OUT),
								     .FULL_N(blueDMA_m_fpga_wr_beatsPerRequestFIFO$FULL_N),
								     .EMPTY_N(blueDMA_m_fpga_wr_beatsPerRequestFIFO$EMPTY_N));

  // submodule blueDMA_m_fpga_wr_incomingBuffer
  FIFO2 #(.width(32'd512),
	  .guarded(32'd1)) blueDMA_m_fpga_wr_incomingBuffer(.RST(m32_axi_aresetn),
							    .CLK(m32_axi_aclk),
							    .D_IN(blueDMA_m_fpga_wr_incomingBuffer$D_IN),
							    .ENQ(blueDMA_m_fpga_wr_incomingBuffer$ENQ),
							    .DEQ(blueDMA_m_fpga_wr_incomingBuffer$DEQ),
							    .CLR(blueDMA_m_fpga_wr_incomingBuffer$CLR),
							    .D_OUT(blueDMA_m_fpga_wr_incomingBuffer$D_OUT),
							    .FULL_N(blueDMA_m_fpga_wr_incomingBuffer$FULL_N),
							    .EMPTY_N(blueDMA_m_fpga_wr_incomingBuffer$EMPTY_N));

  // submodule blueDMA_m_fpga_wr_master_wr_in_addr
  SizedFIFO #(.p1width(32'd95),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) blueDMA_m_fpga_wr_master_wr_in_addr(.RST(m32_axi_aresetn),
								   .CLK(m32_axi_aclk),
								   .D_IN(blueDMA_m_fpga_wr_master_wr_in_addr$D_IN),
								   .ENQ(blueDMA_m_fpga_wr_master_wr_in_addr$ENQ),
								   .DEQ(blueDMA_m_fpga_wr_master_wr_in_addr$DEQ),
								   .CLR(blueDMA_m_fpga_wr_master_wr_in_addr$CLR),
								   .D_OUT(blueDMA_m_fpga_wr_master_wr_in_addr$D_OUT),
								   .FULL_N(blueDMA_m_fpga_wr_master_wr_in_addr$FULL_N),
								   .EMPTY_N(blueDMA_m_fpga_wr_master_wr_in_addr$EMPTY_N));

  // submodule blueDMA_m_fpga_wr_master_wr_in_data
  FIFO2 #(.width(32'd578),
	  .guarded(32'd1)) blueDMA_m_fpga_wr_master_wr_in_data(.RST(m32_axi_aresetn),
							       .CLK(m32_axi_aclk),
							       .D_IN(blueDMA_m_fpga_wr_master_wr_in_data$D_IN),
							       .ENQ(blueDMA_m_fpga_wr_master_wr_in_data$ENQ),
							       .DEQ(blueDMA_m_fpga_wr_master_wr_in_data$DEQ),
							       .CLR(blueDMA_m_fpga_wr_master_wr_in_data$CLR),
							       .D_OUT(blueDMA_m_fpga_wr_master_wr_in_data$D_OUT),
							       .FULL_N(blueDMA_m_fpga_wr_master_wr_in_data$FULL_N),
							       .EMPTY_N(blueDMA_m_fpga_wr_master_wr_in_data$EMPTY_N));

  // submodule blueDMA_m_fpga_wr_master_wr_out
  FIFO2 #(.width(32'd4),
	  .guarded(32'd1)) blueDMA_m_fpga_wr_master_wr_out(.RST(m32_axi_aresetn),
							   .CLK(m32_axi_aclk),
							   .D_IN(blueDMA_m_fpga_wr_master_wr_out$D_IN),
							   .ENQ(blueDMA_m_fpga_wr_master_wr_out$ENQ),
							   .DEQ(blueDMA_m_fpga_wr_master_wr_out$DEQ),
							   .CLR(blueDMA_m_fpga_wr_master_wr_out$CLR),
							   .D_OUT(),
							   .FULL_N(blueDMA_m_fpga_wr_master_wr_out$FULL_N),
							   .EMPTY_N(blueDMA_m_fpga_wr_master_wr_out$EMPTY_N));

  // submodule blueDMA_m_fpga_wr_reqGen_incomingBuffer
  FIFO2 #(.width(32'd100),
	  .guarded(32'd1)) blueDMA_m_fpga_wr_reqGen_incomingBuffer(.RST(m32_axi_aresetn),
								   .CLK(m32_axi_aclk),
								   .D_IN(blueDMA_m_fpga_wr_reqGen_incomingBuffer$D_IN),
								   .ENQ(blueDMA_m_fpga_wr_reqGen_incomingBuffer$ENQ),
								   .DEQ(blueDMA_m_fpga_wr_reqGen_incomingBuffer$DEQ),
								   .CLR(blueDMA_m_fpga_wr_reqGen_incomingBuffer$CLR),
								   .D_OUT(blueDMA_m_fpga_wr_reqGen_incomingBuffer$D_OUT),
								   .FULL_N(blueDMA_m_fpga_wr_reqGen_incomingBuffer$FULL_N),
								   .EMPTY_N(blueDMA_m_fpga_wr_reqGen_incomingBuffer$EMPTY_N));

  // submodule blueDMA_m_fpga_wr_reqGen_intermediateBuffer
  FIFO2 #(.width(32'd112),
	  .guarded(32'd1)) blueDMA_m_fpga_wr_reqGen_intermediateBuffer(.RST(m32_axi_aresetn),
								       .CLK(m32_axi_aclk),
								       .D_IN(blueDMA_m_fpga_wr_reqGen_intermediateBuffer$D_IN),
								       .ENQ(blueDMA_m_fpga_wr_reqGen_intermediateBuffer$ENQ),
								       .DEQ(blueDMA_m_fpga_wr_reqGen_intermediateBuffer$DEQ),
								       .CLR(blueDMA_m_fpga_wr_reqGen_intermediateBuffer$CLR),
								       .D_OUT(blueDMA_m_fpga_wr_reqGen_intermediateBuffer$D_OUT),
								       .FULL_N(blueDMA_m_fpga_wr_reqGen_intermediateBuffer$FULL_N),
								       .EMPTY_N(blueDMA_m_fpga_wr_reqGen_intermediateBuffer$EMPTY_N));

  // submodule blueDMA_m_fpga_wr_reqGen_intermediateBuffer2
  FIFO2 #(.width(32'd138),
	  .guarded(32'd1)) blueDMA_m_fpga_wr_reqGen_intermediateBuffer2(.RST(m32_axi_aresetn),
									.CLK(m32_axi_aclk),
									.D_IN(blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$D_IN),
									.ENQ(blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$ENQ),
									.DEQ(blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$DEQ),
									.CLR(blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$CLR),
									.D_OUT(blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$D_OUT),
									.FULL_N(blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$FULL_N),
									.EMPTY_N(blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$EMPTY_N));

  // submodule blueDMA_m_fpga_wr_reqGen_intermediateBuffer3
  FIFO2 #(.width(32'd147),
	  .guarded(32'd1)) blueDMA_m_fpga_wr_reqGen_intermediateBuffer3(.RST(m32_axi_aresetn),
									.CLK(m32_axi_aclk),
									.D_IN(blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$D_IN),
									.ENQ(blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$ENQ),
									.DEQ(blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$DEQ),
									.CLR(blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$CLR),
									.D_OUT(blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$D_OUT),
									.FULL_N(blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$FULL_N),
									.EMPTY_N(blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$EMPTY_N));

  // submodule blueDMA_m_fpga_wr_reqGen_outgoingBuffer
  FIFO2 #(.width(32'd158),
	  .guarded(32'd1)) blueDMA_m_fpga_wr_reqGen_outgoingBuffer(.RST(m32_axi_aresetn),
								   .CLK(m32_axi_aclk),
								   .D_IN(blueDMA_m_fpga_wr_reqGen_outgoingBuffer$D_IN),
								   .ENQ(blueDMA_m_fpga_wr_reqGen_outgoingBuffer$ENQ),
								   .DEQ(blueDMA_m_fpga_wr_reqGen_outgoingBuffer$DEQ),
								   .CLR(blueDMA_m_fpga_wr_reqGen_outgoingBuffer$CLR),
								   .D_OUT(blueDMA_m_fpga_wr_reqGen_outgoingBuffer$D_OUT),
								   .FULL_N(blueDMA_m_fpga_wr_reqGen_outgoingBuffer$FULL_N),
								   .EMPTY_N(blueDMA_m_fpga_wr_reqGen_outgoingBuffer$EMPTY_N));

  // submodule blueDMA_m_pcie_rd_master_rd_in
  SizedFIFO #(.p1width(32'd95),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) blueDMA_m_pcie_rd_master_rd_in(.RST(m64_axi_aresetn),
							      .CLK(m64_axi_aclk),
							      .D_IN(blueDMA_m_pcie_rd_master_rd_in$D_IN),
							      .ENQ(blueDMA_m_pcie_rd_master_rd_in$ENQ),
							      .DEQ(blueDMA_m_pcie_rd_master_rd_in$DEQ),
							      .CLR(blueDMA_m_pcie_rd_master_rd_in$CLR),
							      .D_OUT(blueDMA_m_pcie_rd_master_rd_in$D_OUT),
							      .FULL_N(blueDMA_m_pcie_rd_master_rd_in$FULL_N),
							      .EMPTY_N(blueDMA_m_pcie_rd_master_rd_in$EMPTY_N));

  // submodule blueDMA_m_pcie_rd_master_rd_out
  FIFO2 #(.width(32'd261),
	  .guarded(32'd1)) blueDMA_m_pcie_rd_master_rd_out(.RST(m64_axi_aresetn),
							   .CLK(m64_axi_aclk),
							   .D_IN(blueDMA_m_pcie_rd_master_rd_out$D_IN),
							   .ENQ(blueDMA_m_pcie_rd_master_rd_out$ENQ),
							   .DEQ(blueDMA_m_pcie_rd_master_rd_out$DEQ),
							   .CLR(blueDMA_m_pcie_rd_master_rd_out$CLR),
							   .D_OUT(blueDMA_m_pcie_rd_master_rd_out$D_OUT),
							   .FULL_N(blueDMA_m_pcie_rd_master_rd_out$FULL_N),
							   .EMPTY_N(blueDMA_m_pcie_rd_master_rd_out$EMPTY_N));

  // submodule blueDMA_m_pcie_rd_maxOutstandingFIFO
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) blueDMA_m_pcie_rd_maxOutstandingFIFO(.RST(m64_axi_aresetn),
								    .CLK(m64_axi_aclk),
								    .D_IN(blueDMA_m_pcie_rd_maxOutstandingFIFO$D_IN),
								    .ENQ(blueDMA_m_pcie_rd_maxOutstandingFIFO$ENQ),
								    .DEQ(blueDMA_m_pcie_rd_maxOutstandingFIFO$DEQ),
								    .CLR(blueDMA_m_pcie_rd_maxOutstandingFIFO$CLR),
								    .D_OUT(),
								    .FULL_N(blueDMA_m_pcie_rd_maxOutstandingFIFO$FULL_N),
								    .EMPTY_N(blueDMA_m_pcie_rd_maxOutstandingFIFO$EMPTY_N));

  // submodule blueDMA_m_pcie_rd_outgoingBuffer
  FIFO2 #(.width(32'd256),
	  .guarded(32'd1)) blueDMA_m_pcie_rd_outgoingBuffer(.RST(m64_axi_aresetn),
							    .CLK(m64_axi_aclk),
							    .D_IN(blueDMA_m_pcie_rd_outgoingBuffer$D_IN),
							    .ENQ(blueDMA_m_pcie_rd_outgoingBuffer$ENQ),
							    .DEQ(blueDMA_m_pcie_rd_outgoingBuffer$DEQ),
							    .CLR(blueDMA_m_pcie_rd_outgoingBuffer$CLR),
							    .D_OUT(blueDMA_m_pcie_rd_outgoingBuffer$D_OUT),
							    .FULL_N(blueDMA_m_pcie_rd_outgoingBuffer$FULL_N),
							    .EMPTY_N(blueDMA_m_pcie_rd_outgoingBuffer$EMPTY_N));

  // submodule blueDMA_m_pcie_rd_reqGen_incomingBuffer
  FIFO2 #(.width(32'd100),
	  .guarded(32'd1)) blueDMA_m_pcie_rd_reqGen_incomingBuffer(.RST(m64_axi_aresetn),
								   .CLK(m64_axi_aclk),
								   .D_IN(blueDMA_m_pcie_rd_reqGen_incomingBuffer$D_IN),
								   .ENQ(blueDMA_m_pcie_rd_reqGen_incomingBuffer$ENQ),
								   .DEQ(blueDMA_m_pcie_rd_reqGen_incomingBuffer$DEQ),
								   .CLR(blueDMA_m_pcie_rd_reqGen_incomingBuffer$CLR),
								   .D_OUT(blueDMA_m_pcie_rd_reqGen_incomingBuffer$D_OUT),
								   .FULL_N(blueDMA_m_pcie_rd_reqGen_incomingBuffer$FULL_N),
								   .EMPTY_N(blueDMA_m_pcie_rd_reqGen_incomingBuffer$EMPTY_N));

  // submodule blueDMA_m_pcie_rd_reqGen_intermediateBuffer
  FIFO2 #(.width(32'd110),
	  .guarded(32'd1)) blueDMA_m_pcie_rd_reqGen_intermediateBuffer(.RST(m64_axi_aresetn),
								       .CLK(m64_axi_aclk),
								       .D_IN(blueDMA_m_pcie_rd_reqGen_intermediateBuffer$D_IN),
								       .ENQ(blueDMA_m_pcie_rd_reqGen_intermediateBuffer$ENQ),
								       .DEQ(blueDMA_m_pcie_rd_reqGen_intermediateBuffer$DEQ),
								       .CLR(blueDMA_m_pcie_rd_reqGen_intermediateBuffer$CLR),
								       .D_OUT(blueDMA_m_pcie_rd_reqGen_intermediateBuffer$D_OUT),
								       .FULL_N(blueDMA_m_pcie_rd_reqGen_intermediateBuffer$FULL_N),
								       .EMPTY_N(blueDMA_m_pcie_rd_reqGen_intermediateBuffer$EMPTY_N));

  // submodule blueDMA_m_pcie_rd_reqGen_intermediateBuffer2
  FIFO2 #(.width(32'd137),
	  .guarded(32'd1)) blueDMA_m_pcie_rd_reqGen_intermediateBuffer2(.RST(m64_axi_aresetn),
									.CLK(m64_axi_aclk),
									.D_IN(blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$D_IN),
									.ENQ(blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$ENQ),
									.DEQ(blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$DEQ),
									.CLR(blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$CLR),
									.D_OUT(blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$D_OUT),
									.FULL_N(blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$FULL_N),
									.EMPTY_N(blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$EMPTY_N));

  // submodule blueDMA_m_pcie_rd_reqGen_intermediateBuffer3
  FIFO2 #(.width(32'd146),
	  .guarded(32'd1)) blueDMA_m_pcie_rd_reqGen_intermediateBuffer3(.RST(m64_axi_aresetn),
									.CLK(m64_axi_aclk),
									.D_IN(blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$D_IN),
									.ENQ(blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$ENQ),
									.DEQ(blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$DEQ),
									.CLR(blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$CLR),
									.D_OUT(blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$D_OUT),
									.FULL_N(blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$FULL_N),
									.EMPTY_N(blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$EMPTY_N));

  // submodule blueDMA_m_pcie_rd_reqGen_outgoingBuffer
  FIFO2 #(.width(32'd157),
	  .guarded(32'd1)) blueDMA_m_pcie_rd_reqGen_outgoingBuffer(.RST(m64_axi_aresetn),
								   .CLK(m64_axi_aclk),
								   .D_IN(blueDMA_m_pcie_rd_reqGen_outgoingBuffer$D_IN),
								   .ENQ(blueDMA_m_pcie_rd_reqGen_outgoingBuffer$ENQ),
								   .DEQ(blueDMA_m_pcie_rd_reqGen_outgoingBuffer$DEQ),
								   .CLR(blueDMA_m_pcie_rd_reqGen_outgoingBuffer$CLR),
								   .D_OUT(blueDMA_m_pcie_rd_reqGen_outgoingBuffer$D_OUT),
								   .FULL_N(blueDMA_m_pcie_rd_reqGen_outgoingBuffer$FULL_N),
								   .EMPTY_N(blueDMA_m_pcie_rd_reqGen_outgoingBuffer$EMPTY_N));

  // submodule blueDMA_m_pcie_wr_beatsPerRequestFIFO
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) blueDMA_m_pcie_wr_beatsPerRequestFIFO(.RST(m64_axi_aresetn),
								     .CLK(m64_axi_aclk),
								     .D_IN(blueDMA_m_pcie_wr_beatsPerRequestFIFO$D_IN),
								     .ENQ(blueDMA_m_pcie_wr_beatsPerRequestFIFO$ENQ),
								     .DEQ(blueDMA_m_pcie_wr_beatsPerRequestFIFO$DEQ),
								     .CLR(blueDMA_m_pcie_wr_beatsPerRequestFIFO$CLR),
								     .D_OUT(blueDMA_m_pcie_wr_beatsPerRequestFIFO$D_OUT),
								     .FULL_N(blueDMA_m_pcie_wr_beatsPerRequestFIFO$FULL_N),
								     .EMPTY_N(blueDMA_m_pcie_wr_beatsPerRequestFIFO$EMPTY_N));

  // submodule blueDMA_m_pcie_wr_incomingBuffer
  FIFO2 #(.width(32'd256),
	  .guarded(32'd1)) blueDMA_m_pcie_wr_incomingBuffer(.RST(m64_axi_aresetn),
							    .CLK(m64_axi_aclk),
							    .D_IN(blueDMA_m_pcie_wr_incomingBuffer$D_IN),
							    .ENQ(blueDMA_m_pcie_wr_incomingBuffer$ENQ),
							    .DEQ(blueDMA_m_pcie_wr_incomingBuffer$DEQ),
							    .CLR(blueDMA_m_pcie_wr_incomingBuffer$CLR),
							    .D_OUT(blueDMA_m_pcie_wr_incomingBuffer$D_OUT),
							    .FULL_N(blueDMA_m_pcie_wr_incomingBuffer$FULL_N),
							    .EMPTY_N(blueDMA_m_pcie_wr_incomingBuffer$EMPTY_N));

  // submodule blueDMA_m_pcie_wr_master_wr_in_addr
  SizedFIFO #(.p1width(32'd95),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) blueDMA_m_pcie_wr_master_wr_in_addr(.RST(m64_axi_aresetn),
								   .CLK(m64_axi_aclk),
								   .D_IN(blueDMA_m_pcie_wr_master_wr_in_addr$D_IN),
								   .ENQ(blueDMA_m_pcie_wr_master_wr_in_addr$ENQ),
								   .DEQ(blueDMA_m_pcie_wr_master_wr_in_addr$DEQ),
								   .CLR(blueDMA_m_pcie_wr_master_wr_in_addr$CLR),
								   .D_OUT(blueDMA_m_pcie_wr_master_wr_in_addr$D_OUT),
								   .FULL_N(blueDMA_m_pcie_wr_master_wr_in_addr$FULL_N),
								   .EMPTY_N(blueDMA_m_pcie_wr_master_wr_in_addr$EMPTY_N));

  // submodule blueDMA_m_pcie_wr_master_wr_in_data
  FIFO2 #(.width(32'd290),
	  .guarded(32'd1)) blueDMA_m_pcie_wr_master_wr_in_data(.RST(m64_axi_aresetn),
							       .CLK(m64_axi_aclk),
							       .D_IN(blueDMA_m_pcie_wr_master_wr_in_data$D_IN),
							       .ENQ(blueDMA_m_pcie_wr_master_wr_in_data$ENQ),
							       .DEQ(blueDMA_m_pcie_wr_master_wr_in_data$DEQ),
							       .CLR(blueDMA_m_pcie_wr_master_wr_in_data$CLR),
							       .D_OUT(blueDMA_m_pcie_wr_master_wr_in_data$D_OUT),
							       .FULL_N(blueDMA_m_pcie_wr_master_wr_in_data$FULL_N),
							       .EMPTY_N(blueDMA_m_pcie_wr_master_wr_in_data$EMPTY_N));

  // submodule blueDMA_m_pcie_wr_master_wr_out
  FIFO2 #(.width(32'd4),
	  .guarded(32'd1)) blueDMA_m_pcie_wr_master_wr_out(.RST(m64_axi_aresetn),
							   .CLK(m64_axi_aclk),
							   .D_IN(blueDMA_m_pcie_wr_master_wr_out$D_IN),
							   .ENQ(blueDMA_m_pcie_wr_master_wr_out$ENQ),
							   .DEQ(blueDMA_m_pcie_wr_master_wr_out$DEQ),
							   .CLR(blueDMA_m_pcie_wr_master_wr_out$CLR),
							   .D_OUT(),
							   .FULL_N(blueDMA_m_pcie_wr_master_wr_out$FULL_N),
							   .EMPTY_N(blueDMA_m_pcie_wr_master_wr_out$EMPTY_N));

  // submodule blueDMA_m_pcie_wr_reqGen_incomingBuffer
  FIFO2 #(.width(32'd100),
	  .guarded(32'd1)) blueDMA_m_pcie_wr_reqGen_incomingBuffer(.RST(m64_axi_aresetn),
								   .CLK(m64_axi_aclk),
								   .D_IN(blueDMA_m_pcie_wr_reqGen_incomingBuffer$D_IN),
								   .ENQ(blueDMA_m_pcie_wr_reqGen_incomingBuffer$ENQ),
								   .DEQ(blueDMA_m_pcie_wr_reqGen_incomingBuffer$DEQ),
								   .CLR(blueDMA_m_pcie_wr_reqGen_incomingBuffer$CLR),
								   .D_OUT(blueDMA_m_pcie_wr_reqGen_incomingBuffer$D_OUT),
								   .FULL_N(blueDMA_m_pcie_wr_reqGen_incomingBuffer$FULL_N),
								   .EMPTY_N(blueDMA_m_pcie_wr_reqGen_incomingBuffer$EMPTY_N));

  // submodule blueDMA_m_pcie_wr_reqGen_intermediateBuffer
  FIFO2 #(.width(32'd110),
	  .guarded(32'd1)) blueDMA_m_pcie_wr_reqGen_intermediateBuffer(.RST(m64_axi_aresetn),
								       .CLK(m64_axi_aclk),
								       .D_IN(blueDMA_m_pcie_wr_reqGen_intermediateBuffer$D_IN),
								       .ENQ(blueDMA_m_pcie_wr_reqGen_intermediateBuffer$ENQ),
								       .DEQ(blueDMA_m_pcie_wr_reqGen_intermediateBuffer$DEQ),
								       .CLR(blueDMA_m_pcie_wr_reqGen_intermediateBuffer$CLR),
								       .D_OUT(blueDMA_m_pcie_wr_reqGen_intermediateBuffer$D_OUT),
								       .FULL_N(blueDMA_m_pcie_wr_reqGen_intermediateBuffer$FULL_N),
								       .EMPTY_N(blueDMA_m_pcie_wr_reqGen_intermediateBuffer$EMPTY_N));

  // submodule blueDMA_m_pcie_wr_reqGen_intermediateBuffer2
  FIFO2 #(.width(32'd137),
	  .guarded(32'd1)) blueDMA_m_pcie_wr_reqGen_intermediateBuffer2(.RST(m64_axi_aresetn),
									.CLK(m64_axi_aclk),
									.D_IN(blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$D_IN),
									.ENQ(blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$ENQ),
									.DEQ(blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$DEQ),
									.CLR(blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$CLR),
									.D_OUT(blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$D_OUT),
									.FULL_N(blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$FULL_N),
									.EMPTY_N(blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$EMPTY_N));

  // submodule blueDMA_m_pcie_wr_reqGen_intermediateBuffer3
  FIFO2 #(.width(32'd146),
	  .guarded(32'd1)) blueDMA_m_pcie_wr_reqGen_intermediateBuffer3(.RST(m64_axi_aresetn),
									.CLK(m64_axi_aclk),
									.D_IN(blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$D_IN),
									.ENQ(blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$ENQ),
									.DEQ(blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$DEQ),
									.CLR(blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$CLR),
									.D_OUT(blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$D_OUT),
									.FULL_N(blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$FULL_N),
									.EMPTY_N(blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$EMPTY_N));

  // submodule blueDMA_m_pcie_wr_reqGen_outgoingBuffer
  FIFO2 #(.width(32'd157),
	  .guarded(32'd1)) blueDMA_m_pcie_wr_reqGen_outgoingBuffer(.RST(m64_axi_aresetn),
								   .CLK(m64_axi_aclk),
								   .D_IN(blueDMA_m_pcie_wr_reqGen_outgoingBuffer$D_IN),
								   .ENQ(blueDMA_m_pcie_wr_reqGen_outgoingBuffer$ENQ),
								   .DEQ(blueDMA_m_pcie_wr_reqGen_outgoingBuffer$DEQ),
								   .CLR(blueDMA_m_pcie_wr_reqGen_outgoingBuffer$CLR),
								   .D_OUT(blueDMA_m_pcie_wr_reqGen_outgoingBuffer$D_OUT),
								   .FULL_N(blueDMA_m_pcie_wr_reqGen_outgoingBuffer$FULL_N),
								   .EMPTY_N(blueDMA_m_pcie_wr_reqGen_outgoingBuffer$EMPTY_N));

  // submodule blueDMA_mclk_m_fpga_put_req_rd_ff
  SyncFIFO1 #(.dataWidth(32'd100)) blueDMA_mclk_m_fpga_put_req_rd_ff(.sCLK(s_axi_aclk),
								     .dCLK(m32_axi_aclk),
								     .sRST(s_axi_aresetn),
								     .sD_IN(blueDMA_mclk_m_fpga_put_req_rd_ff$sD_IN),
								     .sENQ(blueDMA_mclk_m_fpga_put_req_rd_ff$sENQ),
								     .dDEQ(blueDMA_mclk_m_fpga_put_req_rd_ff$dDEQ),
								     .sFULL_N(blueDMA_mclk_m_fpga_put_req_rd_ff$sFULL_N),
								     .dEMPTY_N(blueDMA_mclk_m_fpga_put_req_rd_ff$dEMPTY_N),
								     .dD_OUT(blueDMA_mclk_m_fpga_put_req_rd_ff$dD_OUT));

  // submodule blueDMA_mclk_m_fpga_put_req_wr_ff
  SyncFIFO1 #(.dataWidth(32'd100)) blueDMA_mclk_m_fpga_put_req_wr_ff(.sCLK(s_axi_aclk),
								     .dCLK(m32_axi_aclk),
								     .sRST(s_axi_aresetn),
								     .sD_IN(blueDMA_mclk_m_fpga_put_req_wr_ff$sD_IN),
								     .sENQ(blueDMA_mclk_m_fpga_put_req_wr_ff$sENQ),
								     .dDEQ(blueDMA_mclk_m_fpga_put_req_wr_ff$dDEQ),
								     .sFULL_N(blueDMA_mclk_m_fpga_put_req_wr_ff$sFULL_N),
								     .dEMPTY_N(blueDMA_mclk_m_fpga_put_req_wr_ff$dEMPTY_N),
								     .dD_OUT(blueDMA_mclk_m_fpga_put_req_wr_ff$dD_OUT));

  // submodule blueDMA_mclk_m_pcie_put_req_rd_ff
  SyncFIFO1 #(.dataWidth(32'd100)) blueDMA_mclk_m_pcie_put_req_rd_ff(.sCLK(s_axi_aclk),
								     .dCLK(m64_axi_aclk),
								     .sRST(s_axi_aresetn),
								     .sD_IN(blueDMA_mclk_m_pcie_put_req_rd_ff$sD_IN),
								     .sENQ(blueDMA_mclk_m_pcie_put_req_rd_ff$sENQ),
								     .dDEQ(blueDMA_mclk_m_pcie_put_req_rd_ff$dDEQ),
								     .sFULL_N(blueDMA_mclk_m_pcie_put_req_rd_ff$sFULL_N),
								     .dEMPTY_N(blueDMA_mclk_m_pcie_put_req_rd_ff$dEMPTY_N),
								     .dD_OUT(blueDMA_mclk_m_pcie_put_req_rd_ff$dD_OUT));

  // submodule blueDMA_mclk_m_pcie_put_req_wr_ff
  SyncFIFO1 #(.dataWidth(32'd100)) blueDMA_mclk_m_pcie_put_req_wr_ff(.sCLK(s_axi_aclk),
								     .dCLK(m64_axi_aclk),
								     .sRST(s_axi_aresetn),
								     .sD_IN(blueDMA_mclk_m_pcie_put_req_wr_ff$sD_IN),
								     .sENQ(blueDMA_mclk_m_pcie_put_req_wr_ff$sENQ),
								     .dDEQ(blueDMA_mclk_m_pcie_put_req_wr_ff$dDEQ),
								     .sFULL_N(blueDMA_mclk_m_pcie_put_req_wr_ff$sFULL_N),
								     .dEMPTY_N(blueDMA_mclk_m_pcie_put_req_wr_ff$dEMPTY_N),
								     .dD_OUT(blueDMA_mclk_m_pcie_put_req_wr_ff$dD_OUT));

  // submodule blueDMA_pcieDone
  SyncFIFO1 #(.dataWidth(32'd1)) blueDMA_pcieDone(.sCLK(m64_axi_aclk),
						  .dCLK(s_axi_aclk),
						  .sRST(m64_axi_aresetn),
						  .sD_IN(blueDMA_pcieDone$sD_IN),
						  .sENQ(blueDMA_pcieDone$sENQ),
						  .dDEQ(blueDMA_pcieDone$dDEQ),
						  .sFULL_N(blueDMA_pcieDone$sFULL_N),
						  .dEMPTY_N(blueDMA_pcieDone$dEMPTY_N),
						  .dD_OUT());

  // submodule blueDMA_readConvBTT_ff
  SyncFIFO1 #(.dataWidth(32'd33)) blueDMA_readConvBTT_ff(.sCLK(s_axi_aclk),
							 .dCLK(m64_axi_aclk),
							 .sRST(s_axi_aresetn),
							 .sD_IN(blueDMA_readConvBTT_ff$sD_IN),
							 .sENQ(blueDMA_readConvBTT_ff$sENQ),
							 .dDEQ(blueDMA_readConvBTT_ff$dDEQ),
							 .sFULL_N(blueDMA_readConvBTT_ff$sFULL_N),
							 .dEMPTY_N(blueDMA_readConvBTT_ff$dEMPTY_N),
							 .dD_OUT(blueDMA_readConvBTT_ff$dD_OUT));

  // submodule blueDMA_s_config_readSlave_in
  FIFO1 #(.width(32'd67),
	  .guarded(32'd1)) blueDMA_s_config_readSlave_in(.RST(s_axi_aresetn),
							 .CLK(s_axi_aclk),
							 .D_IN(blueDMA_s_config_readSlave_in$D_IN),
							 .ENQ(blueDMA_s_config_readSlave_in$ENQ),
							 .DEQ(blueDMA_s_config_readSlave_in$DEQ),
							 .CLR(blueDMA_s_config_readSlave_in$CLR),
							 .D_OUT(blueDMA_s_config_readSlave_in$D_OUT),
							 .FULL_N(blueDMA_s_config_readSlave_in$FULL_N),
							 .EMPTY_N(blueDMA_s_config_readSlave_in$EMPTY_N));

  // submodule blueDMA_s_config_readSlave_out
  FIFO1 #(.width(32'd66),
	  .guarded(32'd1)) blueDMA_s_config_readSlave_out(.RST(s_axi_aresetn),
							  .CLK(s_axi_aclk),
							  .D_IN(blueDMA_s_config_readSlave_out$D_IN),
							  .ENQ(blueDMA_s_config_readSlave_out$ENQ),
							  .DEQ(blueDMA_s_config_readSlave_out$DEQ),
							  .CLR(blueDMA_s_config_readSlave_out$CLR),
							  .D_OUT(blueDMA_s_config_readSlave_out$D_OUT),
							  .FULL_N(blueDMA_s_config_readSlave_out$FULL_N),
							  .EMPTY_N(blueDMA_s_config_readSlave_out$EMPTY_N));

  // submodule blueDMA_s_config_writeSlave_in
  FIFO1 #(.width(32'd139),
	  .guarded(32'd1)) blueDMA_s_config_writeSlave_in(.RST(s_axi_aresetn),
							  .CLK(s_axi_aclk),
							  .D_IN(blueDMA_s_config_writeSlave_in$D_IN),
							  .ENQ(blueDMA_s_config_writeSlave_in$ENQ),
							  .DEQ(blueDMA_s_config_writeSlave_in$DEQ),
							  .CLR(blueDMA_s_config_writeSlave_in$CLR),
							  .D_OUT(blueDMA_s_config_writeSlave_in$D_OUT),
							  .FULL_N(blueDMA_s_config_writeSlave_in$FULL_N),
							  .EMPTY_N(blueDMA_s_config_writeSlave_in$EMPTY_N));

  // submodule blueDMA_s_config_writeSlave_out
  FIFO1 #(.width(32'd2),
	  .guarded(32'd1)) blueDMA_s_config_writeSlave_out(.RST(s_axi_aresetn),
							   .CLK(s_axi_aclk),
							   .D_IN(blueDMA_s_config_writeSlave_out$D_IN),
							   .ENQ(blueDMA_s_config_writeSlave_out$ENQ),
							   .DEQ(blueDMA_s_config_writeSlave_out$DEQ),
							   .CLR(blueDMA_s_config_writeSlave_out$CLR),
							   .D_OUT(blueDMA_s_config_writeSlave_out$D_OUT),
							   .FULL_N(blueDMA_s_config_writeSlave_out$FULL_N),
							   .EMPTY_N(blueDMA_s_config_writeSlave_out$EMPTY_N));

  // submodule blueDMA_writeConvBTT_ff
  SyncFIFO1 #(.dataWidth(32'd33)) blueDMA_writeConvBTT_ff(.sCLK(s_axi_aclk),
							  .dCLK(m64_axi_aclk),
							  .sRST(s_axi_aresetn),
							  .sD_IN(blueDMA_writeConvBTT_ff$sD_IN),
							  .sENQ(blueDMA_writeConvBTT_ff$sENQ),
							  .dDEQ(blueDMA_writeConvBTT_ff$dDEQ),
							  .sFULL_N(blueDMA_writeConvBTT_ff$sFULL_N),
							  .dEMPTY_N(blueDMA_writeConvBTT_ff$dEMPTY_N),
							  .dD_OUT(blueDMA_writeConvBTT_ff$dD_OUT));

  // submodule blueDMA_writeConverter_dataSync
  FIFO2 #(.width(32'd512),
	  .guarded(32'd1)) blueDMA_writeConverter_dataSync(.RST(m64_axi_aresetn),
							   .CLK(m64_axi_aclk),
							   .D_IN(blueDMA_writeConverter_dataSync$D_IN),
							   .ENQ(blueDMA_writeConverter_dataSync$ENQ),
							   .DEQ(blueDMA_writeConverter_dataSync$DEQ),
							   .CLR(blueDMA_writeConverter_dataSync$CLR),
							   .D_OUT(blueDMA_writeConverter_dataSync$D_OUT),
							   .FULL_N(blueDMA_writeConverter_dataSync$FULL_N),
							   .EMPTY_N(blueDMA_writeConverter_dataSync$EMPTY_N));

  // rule RL_blueDMA_m_pcie_wr_fillBuffer
  assign WILL_FIRE_RL_blueDMA_m_pcie_wr_fillBuffer =
	     blueDMA_m_pcie_wr_reqGen_outgoingBuffer$EMPTY_N &&
	     blueDMA_m_pcie_wr_task_data_output_reg[32:6] == 27'd0 &&
	     blueDMA_m_pcie_wr_task_data_requests_reg[95:69] == 27'd0 ;

  // rule RL_blueDMA_m_pcie_wr_reqGen_finishRequest
  assign WILL_FIRE_RL_blueDMA_m_pcie_wr_reqGen_finishRequest =
	     blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$EMPTY_N &&
	     blueDMA_m_pcie_wr_reqGen_outgoingBuffer$FULL_N ;

  // rule RL_blueDMA_m_pcie_wr_placeRequest
  assign WILL_FIRE_RL_blueDMA_m_pcie_wr_placeRequest =
	     blueDMA_m_pcie_wr_master_wr_in_addr$FULL_N &&
	     blueDMA_m_pcie_wr_beatsPerRequestFIFO$FULL_N &&
	     blueDMA_m_pcie_wr_task_data_requests_reg[95:69] != 27'd0 &&
	     blueDMA_m_pcie_wr_incomingBuffer$EMPTY_N ;

  // rule RL_blueDMA_m_pcie_wr_forwardData
  assign WILL_FIRE_RL_blueDMA_m_pcie_wr_forwardData =
	     blueDMA_m_pcie_wr_incomingBuffer$EMPTY_N &&
	     blueDMA_m_pcie_wr_beatsPerRequestFIFO$EMPTY_N &&
	     blueDMA_m_pcie_wr_master_wr_in_data$FULL_N &&
	     blueDMA_m_pcie_wr_task_data_output_reg[32:6] != 27'd0 ;

  // rule RL_blueDMA_m_pcie_rd_fillBuffer
  assign WILL_FIRE_RL_blueDMA_m_pcie_rd_fillBuffer =
	     blueDMA_m_pcie_rd_reqGen_outgoingBuffer$EMPTY_N &&
	     blueDMA_m_pcie_rd_task_data_output_reg[32:6] == 27'd0 &&
	     blueDMA_m_pcie_rd_task_data_requests_reg[95:69] == 27'd0 ;

  // rule RL_blueDMA_m_pcie_rd_reqGen_finishRequest
  assign WILL_FIRE_RL_blueDMA_m_pcie_rd_reqGen_finishRequest =
	     blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$EMPTY_N &&
	     blueDMA_m_pcie_rd_reqGen_outgoingBuffer$FULL_N ;

  // rule RL_blueDMA_m_pcie_rd_placeRequest
  assign WILL_FIRE_RL_blueDMA_m_pcie_rd_placeRequest =
	     blueDMA_m_pcie_rd_master_rd_in$FULL_N &&
	     blueDMA_m_pcie_rd_maxOutstandingFIFO$FULL_N &&
	     blueDMA_m_pcie_rd_task_data_requests_reg[95:69] != 27'd0 ;

  // rule RL_blueDMA_m_pcie_rd_forwardData
  assign WILL_FIRE_RL_blueDMA_m_pcie_rd_forwardData =
	     blueDMA_m_pcie_rd_master_rd_out$EMPTY_N &&
	     blueDMA_m_pcie_rd_outgoingBuffer$FULL_N &&
	     blueDMA_m_pcie_rd_maxOutstandingFIFO$EMPTY_N &&
	     blueDMA_m_pcie_rd_task_data_output_reg[32:6] != 27'd0 ;

  // rule RL_blueDMA_m_fpga_wr_fillBuffer
  assign WILL_FIRE_RL_blueDMA_m_fpga_wr_fillBuffer =
	     blueDMA_m_fpga_wr_reqGen_outgoingBuffer$EMPTY_N &&
	     blueDMA_m_fpga_wr_task_data_output_reg[32:7] == 26'd0 &&
	     blueDMA_m_fpga_wr_task_data_requests_reg[94:69] == 26'd0 ;

  // rule RL_blueDMA_m_fpga_wr_reqGen_finishRequest
  assign WILL_FIRE_RL_blueDMA_m_fpga_wr_reqGen_finishRequest =
	     blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$EMPTY_N &&
	     blueDMA_m_fpga_wr_reqGen_outgoingBuffer$FULL_N ;

  // rule RL_blueDMA_m_fpga_wr_placeRequest
  assign WILL_FIRE_RL_blueDMA_m_fpga_wr_placeRequest =
	     blueDMA_m_fpga_wr_master_wr_in_addr$FULL_N &&
	     blueDMA_m_fpga_wr_beatsPerRequestFIFO$FULL_N &&
	     blueDMA_m_fpga_wr_task_data_requests_reg[94:69] != 26'd0 &&
	     blueDMA_m_fpga_wr_incomingBuffer$EMPTY_N ;

  // rule RL_blueDMA_m_fpga_wr_forwardData
  assign WILL_FIRE_RL_blueDMA_m_fpga_wr_forwardData =
	     blueDMA_m_fpga_wr_incomingBuffer$EMPTY_N &&
	     blueDMA_m_fpga_wr_beatsPerRequestFIFO$EMPTY_N &&
	     blueDMA_m_fpga_wr_master_wr_in_data$FULL_N &&
	     blueDMA_m_fpga_wr_task_data_output_reg[32:7] != 26'd0 ;

  // rule RL_blueDMA_m_fpga_rd_fillBuffer
  assign WILL_FIRE_RL_blueDMA_m_fpga_rd_fillBuffer =
	     blueDMA_m_fpga_rd_reqGen_outgoingBuffer$EMPTY_N &&
	     blueDMA_m_fpga_rd_task_data_output_reg[32:7] == 26'd0 &&
	     blueDMA_m_fpga_rd_task_data_requests_reg[94:69] == 26'd0 ;

  // rule RL_blueDMA_m_fpga_rd_reqGen_finishRequest
  assign WILL_FIRE_RL_blueDMA_m_fpga_rd_reqGen_finishRequest =
	     blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$EMPTY_N &&
	     blueDMA_m_fpga_rd_reqGen_outgoingBuffer$FULL_N ;

  // rule RL_blueDMA_m_fpga_rd_placeRequest
  assign WILL_FIRE_RL_blueDMA_m_fpga_rd_placeRequest =
	     blueDMA_m_fpga_rd_master_rd_in$FULL_N &&
	     blueDMA_m_fpga_rd_maxOutstandingFIFO$FULL_N &&
	     blueDMA_m_fpga_rd_task_data_requests_reg[94:69] != 26'd0 ;

  // rule RL_blueDMA_m_fpga_rd_forwardData
  assign WILL_FIRE_RL_blueDMA_m_fpga_rd_forwardData =
	     blueDMA_m_fpga_rd_master_rd_out$EMPTY_N &&
	     blueDMA_m_fpga_rd_outgoingBuffer$FULL_N &&
	     blueDMA_m_fpga_rd_maxOutstandingFIFO$EMPTY_N &&
	     blueDMA_m_fpga_rd_task_data_output_reg[32:7] != 26'd0 ;

  // rule RL_blueDMA_s_config_axiReadSpecialIsHandled
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd0 ;

  // rule RL_blueDMA_s_config_axiReadSpecialIsHandled_1
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_1 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd1 ;

  // rule RL_blueDMA_s_config_axiReadSpecialIsHandled_2
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_2 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd8 ;

  // rule RL_blueDMA_s_config_axiReadSpecialIsHandled_3
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_3 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd9 ;

  // rule RL_blueDMA_s_config_axiReadSpecialIsHandled_4
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_4 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd12 ;

  // rule RL_blueDMA_s_config_axiReadSpecialIsHandled_5
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_5 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd3 ;

  // rule RL_blueDMA_s_config_axiReadSpecialIsHandled_6
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd2 ;

  // rule RL_blueDMA_s_config_axiReadSpecialIsHandled_7
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_7 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd6 ;

  // rule RL_blueDMA_s_config_axiReadSpecialIsHandled_8
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_8 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd7 ;

  // rule RL_blueDMA_s_config_axiReadSpecial_2
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_2 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_out$FULL_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd8 &&
	     !blueDMA_s_config_readBusy ;

  // rule RL_blueDMA_s_config_axiReadSpecial_3
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_3 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_out$FULL_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd9 &&
	     !blueDMA_s_config_readBusy ;

  // rule RL_blueDMA_setInterrupt
  assign WILL_FIRE_RL_blueDMA_setInterrupt =
	     blueDMA_pcieDone$dEMPTY_N && blueDMA_fpgaDone$dEMPTY_N &&
	     blueDMA_opInProgress ;

  // rule RL_blueDMA_s_config_axiReadSpecial_5
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_out$FULL_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd3 &&
	     !blueDMA_s_config_readBusy ;

  // rule RL_blueDMA_s_config_axiReadSpecial_7
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_out$FULL_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd6 &&
	     !blueDMA_s_config_readBusy ;

  // rule RL_blueDMA_handleRead
  assign CAN_FIRE_RL_blueDMA_handleRead =
	     blueDMA_readIn_rv[160] &&
	     blueDMA_mclk_m_pcie_put_req_wr_ff$sFULL_N &&
	     blueDMA_mclk_m_fpga_put_req_rd_ff$sFULL_N &&
	     blueDMA_readConvBTT_ff$sFULL_N &&
	     !blueDMA_opInProgress ;
  assign WILL_FIRE_RL_blueDMA_handleRead =
	     CAN_FIRE_RL_blueDMA_handleRead &&
	     !WILL_FIRE_RL_blueDMA_handleWrite ;

  // rule RL_blueDMA_s_config_axiReadSpecial_8
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_out$FULL_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd7 &&
	     !blueDMA_s_config_readBusy ;

  // rule RL_blueDMA_handleWrite
  assign WILL_FIRE_RL_blueDMA_handleWrite =
	     blueDMA_writeIn_rv[160] &&
	     blueDMA_mclk_m_pcie_put_req_rd_ff$sFULL_N &&
	     blueDMA_mclk_m_fpga_put_req_wr_ff$sFULL_N &&
	     blueDMA_writeConvBTT_ff$sFULL_N &&
	     !blueDMA_opInProgress ;

  // rule RL_blueDMA_s_config_1_axiWriteSpecial
  assign WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial =
	     blueDMA_s_config_writeSlave_in$EMPTY_N &&
	     blueDMA_s_config_writeSlave_out$FULL_N &&
	     blueDMA_cmdsIn$FULL_N &&
	     blueDMA_s_config_writeSlave_in$D_OUT[81:78] == 4'd4 ;

  // rule RL_blueDMA_s_config_1_axiWriteSpecialIsHandled
  assign WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd4 ;

  // rule RL_blueDMA_s_config_axiReadSpecial
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_out$FULL_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd0 &&
	     !blueDMA_s_config_readBusy ;

  // rule RL_blueDMA_s_config_1_axiWriteSpecial_1
  assign WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1 =
	     blueDMA_s_config_writeSlave_in$EMPTY_N &&
	     blueDMA_s_config_writeSlave_out$FULL_N &&
	     blueDMA_s_config_writeSlave_in$D_OUT[81:78] == 4'd0 ;

  // rule RL_blueDMA_s_config_axiReadSpecial_1
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_1 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_out$FULL_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd1 &&
	     !blueDMA_s_config_readBusy ;

  // rule RL_blueDMA_s_config_1_axiWriteSpecial_2
  assign WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2 =
	     blueDMA_s_config_writeSlave_in$EMPTY_N &&
	     blueDMA_s_config_writeSlave_out$FULL_N &&
	     blueDMA_s_config_writeSlave_in$D_OUT[81:78] == 4'd1 ;

  // rule RL_blueDMA_s_config_axiReadSpecial_4
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_4 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_out$FULL_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd12 &&
	     !blueDMA_s_config_readBusy ;

  // rule RL_blueDMA_s_config_1_axiWriteSpecial_3
  assign WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 =
	     blueDMA_s_config_writeSlave_in$EMPTY_N &&
	     blueDMA_s_config_writeSlave_out$FULL_N &&
	     blueDMA_s_config_writeSlave_in$D_OUT[81:78] == 4'd12 ;

  // rule RL_blueDMA_s_config_axiReadSpecial_6
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_out$FULL_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd2 &&
	     !blueDMA_s_config_readBusy ;

  // rule RL_blueDMA_s_config_axiReadFallback
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadFallback =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_out$FULL_N &&
	     !blueDMA_s_config_readIsHandled$whas ;

  // rule RL_blueDMA_s_config_1_axiWriteSpecial_4
  assign WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 =
	     blueDMA_s_config_writeSlave_in$EMPTY_N &&
	     blueDMA_s_config_writeSlave_out$FULL_N &&
	     blueDMA_s_config_writeSlave_in$D_OUT[81:78] == 4'd2 ;

  // rule RL_blueDMA_s_config_1_axiWriteFallback
  assign WILL_FIRE_RL_blueDMA_s_config_1_axiWriteFallback =
	     blueDMA_s_config_writeSlave_in$EMPTY_N &&
	     blueDMA_s_config_writeSlave_out$FULL_N &&
	     !blueDMA_s_config_writeIsHandled$whas &&
	     !WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	     !WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 &&
	     !WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2 &&
	     !WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1 &&
	     !WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial ;

  // rule RL_blueDMA_byteAlignerReader_forwardOutput
  assign WILL_FIRE_RL_blueDMA_byteAlignerReader_forwardOutput =
	     blueDMA_byteAlignerReader_outgoing$FULL_N &&
	     !blueDMA_byteAlignerReader_addr_ff$dEMPTY_N &&
	     blueDMA_byteAlignerReader_fetchedDatum &&
	     !blueDMA_byteAlignerReader_bytes_left_in_buffer_ETC___d1600 &&
	     !blueDMA_byteAlignerReader_addr_ff$dEMPTY_N ;

  // rule RL_blueDMA_byteAlignerReader_fetchNewData
  assign WILL_FIRE_RL_blueDMA_byteAlignerReader_fetchNewData =
	     blueDMA_byteAlignerReader_incoming$EMPTY_N &&
	     !blueDMA_byteAlignerReader_addr_ff$dEMPTY_N &&
	     !blueDMA_byteAlignerReader_fetchedDatum$port1__read &&
	     blueDMA_byteAlignerReader_bytes_in_583_ULT_blu_ETC___d1585 &&
	     !blueDMA_byteAlignerReader_addr_ff$dEMPTY_N ;

  // rule RL_blueDMA_byteAlignerReader_forwardOutputLast
  assign CAN_FIRE_RL_blueDMA_byteAlignerReader_forwardOutputLast =
	     blueDMA_byteAlignerReader_outgoing$FULL_N &&
	     !blueDMA_byteAlignerReader_addr_ff$dEMPTY_N &&
	     !blueDMA_byteAlignerReader_fetchedDatum &&
	     !blueDMA_byteAlignerReader_bytes_in_583_ULT_blu_ETC___d1585 &&
	     blueDMA_byteAlignerReader_bytes_out <
	     blueDMA_byteAlignerReader_bytes_total ;
  assign WILL_FIRE_RL_blueDMA_byteAlignerReader_forwardOutputLast =
	     CAN_FIRE_RL_blueDMA_byteAlignerReader_forwardOutputLast &&
	     !blueDMA_byteAlignerReader_addr_ff$dEMPTY_N ;

  // rule RL_blueDMA_2_mkConnectionGetPut
  assign WILL_FIRE_RL_blueDMA_2_mkConnectionGetPut =
	     !blueDMA_readConvBTT_ff$dEMPTY_N &&
	     !blueDMA_readConverter_bufferEmpty &&
	     blueDMA_m_pcie_wr_incomingBuffer$FULL_N &&
	     !blueDMA_readConvBTT_ff$dEMPTY_N ;

  // rule RL_blueDMA_1_mkConnectionGetPut
  assign WILL_FIRE_RL_blueDMA_1_mkConnectionGetPut =
	     !blueDMA_readConvBTT_ff$dEMPTY_N &&
	     blueDMA_readConverter_bufferEmpty$port1__read &&
	     blueDMA_fpga_response_converter_fifo$dEMPTY_N &&
	     !blueDMA_readConvBTT_ff$dEMPTY_N ;

  // rule RL_blueDMA_byteAlignerWriter_forwardOutput
  assign WILL_FIRE_RL_blueDMA_byteAlignerWriter_forwardOutput =
	     blueDMA_byteAlignerWriter_outgoing$FULL_N &&
	     !blueDMA_byteAlignerWriter_addr_ff$dEMPTY_N &&
	     blueDMA_byteAlignerWriter_fetchedDatum &&
	     !blueDMA_byteAlignerWriter_bytes_left_in_buffer_ETC___d1726 &&
	     !blueDMA_byteAlignerWriter_addr_ff$dEMPTY_N ;

  // rule RL_blueDMA_byteAlignerWriter_fetchNewData
  assign WILL_FIRE_RL_blueDMA_byteAlignerWriter_fetchNewData =
	     blueDMA_byteAlignerWriter_incoming$EMPTY_N &&
	     !blueDMA_byteAlignerWriter_addr_ff$dEMPTY_N &&
	     !blueDMA_byteAlignerWriter_fetchedDatum$port1__read &&
	     blueDMA_byteAlignerWriter_bytes_in_709_ULT_blu_ETC___d1711 &&
	     !blueDMA_byteAlignerWriter_addr_ff$dEMPTY_N ;

  // rule RL_blueDMA_byteAlignerWriter_forwardOutputLast
  assign CAN_FIRE_RL_blueDMA_byteAlignerWriter_forwardOutputLast =
	     blueDMA_byteAlignerWriter_outgoing$FULL_N &&
	     !blueDMA_byteAlignerWriter_addr_ff$dEMPTY_N &&
	     !blueDMA_byteAlignerWriter_fetchedDatum &&
	     !blueDMA_byteAlignerWriter_bytes_in_709_ULT_blu_ETC___d1711 &&
	     blueDMA_byteAlignerWriter_bytes_out <
	     blueDMA_byteAlignerWriter_bytes_total ;
  assign WILL_FIRE_RL_blueDMA_byteAlignerWriter_forwardOutputLast =
	     CAN_FIRE_RL_blueDMA_byteAlignerWriter_forwardOutputLast &&
	     !blueDMA_byteAlignerWriter_addr_ff$dEMPTY_N ;

  // rule RL_blueDMA_3_mkConnectionGetPut
  assign WILL_FIRE_RL_blueDMA_3_mkConnectionGetPut =
	     !blueDMA_writeConvBTT_ff$dEMPTY_N &&
	     blueDMA_m_pcie_rd_outgoingBuffer$EMPTY_N &&
	     blueDMA_writeConverter_dataSync$FULL_N &&
	     !blueDMA_writeConvBTT_ff$dEMPTY_N ;

  // inputs to muxes for submodule ports
  assign MUX_blueDMA_opInProgress$write_1__SEL_2 =
	     WILL_FIRE_RL_blueDMA_handleRead ||
	     WILL_FIRE_RL_blueDMA_handleWrite ;
  assign MUX_blueDMA_byteAlignerReader_buffer$port0__write_1__VAL_1 =
	     { 256'd0, blueDMA_byteAlignerReader_buffer[511:256] } ;
  assign MUX_blueDMA_byteAlignerReader_bytes_in$write_1__VAL_1 =
	     blueDMA_byteAlignerReader_bytes_in + 32'd32 ;
  assign MUX_blueDMA_byteAlignerReader_bytes_left_in_buffer$port0__write_1__VAL_1 =
	     blueDMA_byteAlignerReader_bytes_left_in_buffer -
	     blueDMA_byteAlignerReader_bytes_out_needed ;
  assign MUX_blueDMA_byteAlignerReader_bytes_out$write_1__VAL_1 =
	     blueDMA_byteAlignerReader_bytes_out +
	     { 26'd0, blueDMA_byteAlignerReader_bytes_out_needed } ;
  assign MUX_blueDMA_byteAlignerReader_bytes_out$write_1__VAL_2 =
	     blueDMA_byteAlignerReader_bytes_out + 32'd256 ;
  assign MUX_blueDMA_byteAlignerReader_bytes_out_needed$write_1__VAL_1 =
	     6'd32 -
	     { 1'd0, blueDMA_byteAlignerReader_addr_ff$dD_OUT[36:32] } ;
  assign MUX_blueDMA_byteAlignerWriter_buffer$port0__write_1__VAL_1 =
	     { 256'd0, blueDMA_byteAlignerWriter_buffer[511:256] } ;
  assign MUX_blueDMA_byteAlignerWriter_bytes_in$write_1__VAL_1 =
	     blueDMA_byteAlignerWriter_bytes_in + 32'd32 ;
  assign MUX_blueDMA_byteAlignerWriter_bytes_left_in_buffer$port0__write_1__VAL_1 =
	     blueDMA_byteAlignerWriter_bytes_left_in_buffer -
	     blueDMA_byteAlignerWriter_bytes_out_needed ;
  assign MUX_blueDMA_byteAlignerWriter_bytes_out$write_1__VAL_1 =
	     blueDMA_byteAlignerWriter_bytes_out +
	     { 26'd0, blueDMA_byteAlignerWriter_bytes_out_needed } ;
  assign MUX_blueDMA_byteAlignerWriter_bytes_out$write_1__VAL_2 =
	     blueDMA_byteAlignerWriter_bytes_out + 32'd256 ;
  assign MUX_blueDMA_byteAlignerWriter_bytes_out_needed$write_1__VAL_1 =
	     6'd32 -
	     { 1'd0, blueDMA_byteAlignerWriter_addr_ff$dD_OUT[36:32] } ;
  assign MUX_blueDMA_m_fpga_rd_task_data_output_reg$write_1__VAL_1 =
	     { blueDMA_m_fpga_rd_task_data_output_reg[44:33],
	       x_transfers_total__h34011,
	       blueDMA_m_fpga_rd_task_data_output_reg[6:0] } ;
  assign MUX_blueDMA_m_fpga_rd_task_data_requests_reg$write_1__VAL_1 =
	     { blueDMA_m_fpga_rd_task_data_requests_reg[112:95],
	       x_requests_total__h33676,
	       blueDMA_m_fpga_rd_task_data_requests_reg[68:38],
	       x_address_dynamic__h33678,
	       12'd0,
	       blueDMA_m_fpga_rd_task_data_requests_reg[4:1],
	       1'd0 } ;
  assign MUX_blueDMA_m_fpga_wr_beatsThisRequestCntr$write_1__VAL_1 =
	     blueDMA_m_fpga_wr_beatsThisRequestCntr_61_EQ_b_ETC___d763 ?
	       8'd0 :
	       beatsThisRequestCntrT__h18982 ;
  assign MUX_blueDMA_m_fpga_wr_task_data_output_reg$write_1__VAL_1 =
	     { blueDMA_m_fpga_wr_task_data_output_reg[44:33],
	       x_transfers_total__h30014,
	       blueDMA_m_fpga_wr_task_data_output_reg[6:1],
	       1'd0 } ;
  assign MUX_blueDMA_m_fpga_wr_task_data_requests_reg$write_1__VAL_1 =
	     { blueDMA_m_fpga_wr_task_data_requests_reg[112:95],
	       x_requests_total__h18720,
	       blueDMA_m_fpga_wr_task_data_requests_reg[68:38],
	       x_address_dynamic__h18722,
	       12'd0,
	       blueDMA_m_fpga_wr_task_data_requests_reg[4:1],
	       1'd0 } ;
  assign MUX_blueDMA_m_pcie_rd_task_data_output_reg$write_1__VAL_1 =
	     { blueDMA_m_pcie_rd_task_data_output_reg[42:33],
	       x_transfers_total__h14341,
	       blueDMA_m_pcie_rd_task_data_output_reg[5:0] } ;
  assign MUX_blueDMA_m_pcie_rd_task_data_requests_reg$write_1__VAL_1 =
	     { blueDMA_m_pcie_rd_task_data_requests_reg[113:96],
	       x_requests_total__h14006,
	       blueDMA_m_pcie_rd_task_data_requests_reg[68:38],
	       x_address_dynamic__h14008,
	       12'd0,
	       blueDMA_m_pcie_rd_task_data_requests_reg[4:1],
	       1'd0 } ;
  assign MUX_blueDMA_m_pcie_wr_beatsThisRequestCntr$write_1__VAL_1 =
	     blueDMA_m_pcie_wr_beatsThisRequestCntr_94_EQ_b_ETC___d196 ?
	       8'd0 :
	       beatsThisRequestCntrT__h4717 ;
  assign MUX_blueDMA_m_pcie_wr_task_data_output_reg$write_1__VAL_1 =
	     { blueDMA_m_pcie_wr_task_data_output_reg[42:33],
	       x_transfers_total__h10341,
	       blueDMA_m_pcie_wr_task_data_output_reg[5:1],
	       1'd0 } ;
  assign MUX_blueDMA_m_pcie_wr_task_data_requests_reg$write_1__VAL_1 =
	     { blueDMA_m_pcie_wr_task_data_requests_reg[113:96],
	       x_requests_total__h4455,
	       blueDMA_m_pcie_wr_task_data_requests_reg[68:38],
	       x_address_dynamic__h4457,
	       12'd0,
	       blueDMA_m_pcie_wr_task_data_requests_reg[4:1],
	       1'd0 } ;
  assign MUX_blueDMA_readConverter_byteCntr$write_1__VAL_2 =
	     blueDMA_readConverter_byteCntr - 32'd32 ;
  assign MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_1 =
	     { blueDMA_host_addr, 2'd0 } ;
  assign MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_2 =
	     { blueDMA_fpga_addr, 2'd0 } ;
  assign MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_3 =
	     { blueDMA_cycles_last_request, 2'd0 } ;
  assign MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_4 =
	     { blueDMA_cycles_between, 2'd0 } ;
  assign MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_5 =
	     { blueDMA_cycles_between_set, 2'd0 } ;
  assign MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_6 =
	     { blueDMA_id, 2'd0 } ;
  assign MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_7 =
	     { blueDMA_transfer_length, 2'd0 } ;
  assign MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_8 =
	     { blueDMA_read_requests, 2'd0 } ;
  assign MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_9 =
	     { blueDMA_write_requests, 2'd0 } ;
  assign MUX_blueDMA_writeConverter_wordInCntr$write_1__VAL_1 =
	     { 1'd0, blueDMA_writeConvBTT_ff$dD_OUT[0] } ;
  assign MUX_blueDMA_writeConverter_wordInCntr$write_1__VAL_2 =
	     (blueDMA_writeConverter_wordInCntr == 2'd1 ||
	      blueDMA_writeConverter_wordOutCntr == 27'd1) ?
	       2'd0 :
	       blueDMA_writeConverter_wordInCntr + 2'd1 ;
  assign MUX_blueDMA_writeConverter_wordOutCntr$write_1__VAL_1 =
	     blueDMA_writeConvBTT_ff$dD_OUT[32:6] +
	     ((blueDMA_writeConvBTT_ff$dD_OUT[5:1] == 5'd0) ? 27'd0 : 27'd1) ;
  assign MUX_blueDMA_writeConverter_wordOutCntr$write_1__VAL_2 =
	     blueDMA_writeConverter_wordOutCntr - 27'd1 ;

  // inlined wires
  always@(blueDMA_m_pcie_wr_master_wr_in_addr$D_OUT)
  begin
    case (blueDMA_m_pcie_wr_master_wr_in_addr$D_OUT[15:12])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  blueDMA_m_pcie_wr_master_wr_wawcache$wget =
	      blueDMA_m_pcie_wr_master_wr_in_addr$D_OUT[15:12];
      default: blueDMA_m_pcie_wr_master_wr_wawcache$wget = 4'd15;
    endcase
  end
  always@(blueDMA_m_pcie_rd_master_rd_in$D_OUT)
  begin
    case (blueDMA_m_pcie_rd_master_rd_in$D_OUT[15:12])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  blueDMA_m_pcie_rd_master_rd_warcache$wget =
	      blueDMA_m_pcie_rd_master_rd_in$D_OUT[15:12];
      default: blueDMA_m_pcie_rd_master_rd_warcache$wget = 4'd11;
    endcase
  end
  always@(blueDMA_m_fpga_wr_master_wr_in_addr$D_OUT)
  begin
    case (blueDMA_m_fpga_wr_master_wr_in_addr$D_OUT[15:12])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  blueDMA_m_fpga_wr_master_wr_wawcache$wget =
	      blueDMA_m_fpga_wr_master_wr_in_addr$D_OUT[15:12];
      default: blueDMA_m_fpga_wr_master_wr_wawcache$wget = 4'd15;
    endcase
  end
  always@(blueDMA_m_fpga_rd_master_rd_in$D_OUT)
  begin
    case (blueDMA_m_fpga_rd_master_rd_in$D_OUT[15:12])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  blueDMA_m_fpga_rd_master_rd_warcache$wget =
	      blueDMA_m_fpga_rd_master_rd_in$D_OUT[15:12];
      default: blueDMA_m_fpga_rd_master_rd_warcache$wget = 4'd11;
    endcase
  end
  assign blueDMA_s_config_readIsHandled$whas =
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_8 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_7 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_5 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_4 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_3 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_2 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_1 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled ;
  assign blueDMA_s_config_writeIsHandled$whas =
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_4 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_1 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled ;
  assign blueDMA_m_pcie_wr_master_wr_rinpkg$wget =
	     { m64_axi_bid, m64_axi_bresp, m64_axi_buser } ;
  assign blueDMA_m_pcie_rd_master_rd_rinpkg$wget =
	     { m64_axi_rid,
	       m64_axi_rdata,
	       m64_axi_rresp,
	       m64_axi_rlast,
	       m64_axi_ruser } ;
  assign blueDMA_m_fpga_wr_master_wr_rinpkg$wget =
	     { m32_axi_bid, m32_axi_bresp, m32_axi_buser } ;
  assign blueDMA_m_fpga_rd_master_rd_rinpkg$wget =
	     { m32_axi_rid,
	       m32_axi_rdata,
	       m32_axi_rresp,
	       m32_axi_rlast,
	       m32_axi_ruser } ;
  assign blueDMA_s_config_writeSlave_addrIn_rv$EN_port0__write =
	     !blueDMA_s_config_writeSlave_addrIn_rv[67] && S_AXI_awvalid ;
  assign blueDMA_s_config_writeSlave_addrIn_rv$port0__write_1 =
	     { 1'd1, S_AXI_awaddr, S_AXI_awprot } ;
  assign blueDMA_s_config_writeSlave_addrIn_rv$port1__read =
	     blueDMA_s_config_writeSlave_addrIn_rv$EN_port0__write ?
	       blueDMA_s_config_writeSlave_addrIn_rv$port0__write_1 :
	       blueDMA_s_config_writeSlave_addrIn_rv ;
  assign blueDMA_s_config_writeSlave_addrIn_rv$EN_port1__write =
	     blueDMA_s_config_writeSlave_addrIn_rv$port1__read[67] &&
	     blueDMA_s_config_writeSlave_dataIn_rv$port1__read[72] &&
	     blueDMA_s_config_writeSlave_in$FULL_N ;
  assign blueDMA_s_config_writeSlave_addrIn_rv$port2__read =
	     blueDMA_s_config_writeSlave_addrIn_rv$EN_port1__write ?
	       68'h2AAAAAAAAAAAAAAAA :
	       blueDMA_s_config_writeSlave_addrIn_rv$port1__read ;
  assign blueDMA_s_config_writeSlave_dataIn_rv$EN_port0__write =
	     !blueDMA_s_config_writeSlave_dataIn_rv[72] && S_AXI_wvalid ;
  assign blueDMA_s_config_writeSlave_dataIn_rv$port0__write_1 =
	     { 1'd1, S_AXI_wdata, S_AXI_wstrb } ;
  assign blueDMA_s_config_writeSlave_dataIn_rv$port1__read =
	     blueDMA_s_config_writeSlave_dataIn_rv$EN_port0__write ?
	       blueDMA_s_config_writeSlave_dataIn_rv$port0__write_1 :
	       blueDMA_s_config_writeSlave_dataIn_rv ;
  assign blueDMA_s_config_writeSlave_dataIn_rv$EN_port1__write =
	     blueDMA_s_config_writeSlave_addrIn_rv$port1__read[67] &&
	     blueDMA_s_config_writeSlave_dataIn_rv$port1__read[72] &&
	     blueDMA_s_config_writeSlave_in$FULL_N ;
  assign blueDMA_s_config_writeSlave_dataIn_rv$port2__read =
	     blueDMA_s_config_writeSlave_dataIn_rv$EN_port1__write ?
	       73'h0AAAAAAAAAAAAAAAAAA :
	       blueDMA_s_config_writeSlave_dataIn_rv$port1__read ;
  assign blueDMA_readIn_rv$port1__read =
	     WILL_FIRE_RL_blueDMA_handleRead ?
	       161'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       blueDMA_readIn_rv ;
  assign blueDMA_readIn_rv$EN_port1__write =
	     blueDMA_cmdsIn$EMPTY_N && !blueDMA_readIn_rv$port1__read[160] &&
	     !blueDMA_cmdsIn$D_OUT ;
  assign blueDMA_readIn_rv$port1__write_1 =
	     { 1'd1,
	       blueDMA_host_addr,
	       blueDMA_fpga_addr,
	       blueDMA_transfer_length[31:0] } ;
  assign blueDMA_readIn_rv$port2__read =
	     blueDMA_readIn_rv$EN_port1__write ?
	       blueDMA_readIn_rv$port1__write_1 :
	       blueDMA_readIn_rv$port1__read ;
  assign blueDMA_writeIn_rv$port1__read =
	     WILL_FIRE_RL_blueDMA_handleWrite ?
	       161'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       blueDMA_writeIn_rv ;
  assign blueDMA_writeIn_rv$EN_port1__write =
	     blueDMA_cmdsIn$EMPTY_N && !blueDMA_writeIn_rv$port1__read[160] &&
	     blueDMA_cmdsIn$D_OUT ;
  assign blueDMA_writeIn_rv$port2__read =
	     blueDMA_writeIn_rv$EN_port1__write ?
	       blueDMA_readIn_rv$port1__write_1 :
	       blueDMA_writeIn_rv$port1__read ;
  assign blueDMA_readConverter_bufferEmpty$EN_port0__write =
	     WILL_FIRE_RL_blueDMA_2_mkConnectionGetPut &&
	     ({ 1'd0, blueDMA_readConverter_wordInCntr } == 2'd1 ||
	      blueDMA_readConverter_byteCntr <= 32'd32) ;
  assign blueDMA_readConverter_bufferEmpty$port1__read =
	     blueDMA_readConverter_bufferEmpty$EN_port0__write ||
	     blueDMA_readConverter_bufferEmpty ;
  assign blueDMA_readConverter_bufferEmpty$EN_port1__write =
	     WILL_FIRE_RL_blueDMA_1_mkConnectionGetPut ||
	     blueDMA_readConvBTT_ff$dEMPTY_N ;
  assign blueDMA_readConverter_bufferEmpty$port2__read =
	     blueDMA_readConverter_bufferEmpty$EN_port1__write ?
	       !WILL_FIRE_RL_blueDMA_1_mkConnectionGetPut :
	       blueDMA_readConverter_bufferEmpty$port1__read ;
  assign blueDMA_byteAlignerReader_buffer$EN_port0__write =
	     WILL_FIRE_RL_blueDMA_byteAlignerReader_forwardOutput ||
	     blueDMA_byteAlignerReader_addr_ff$dEMPTY_N ;
  assign blueDMA_byteAlignerReader_buffer$port0__write_1 =
	     WILL_FIRE_RL_blueDMA_byteAlignerReader_forwardOutput ?
	       MUX_blueDMA_byteAlignerReader_buffer$port0__write_1__VAL_1 :
	       512'd0 ;
  assign blueDMA_byteAlignerReader_buffer$port1__read =
	     blueDMA_byteAlignerReader_buffer$EN_port0__write ?
	       blueDMA_byteAlignerReader_buffer$port0__write_1 :
	       blueDMA_byteAlignerReader_buffer ;
  assign blueDMA_byteAlignerReader_buffer$port1__write_1 =
	     { blueDMA_byteAlignerReader_buffer$port1__read[511:256],
	       blueDMA_byteAlignerReader_incoming$D_OUT } ;
  assign blueDMA_byteAlignerReader_buffer$port2__read =
	     WILL_FIRE_RL_blueDMA_byteAlignerReader_fetchNewData ?
	       blueDMA_byteAlignerReader_buffer$port1__write_1 :
	       blueDMA_byteAlignerReader_buffer$port1__read ;
  assign blueDMA_byteAlignerReader_bytes_left_in_buffer$EN_port0__write =
	     WILL_FIRE_RL_blueDMA_byteAlignerReader_forwardOutput ||
	     blueDMA_byteAlignerReader_addr_ff$dEMPTY_N ;
  assign blueDMA_byteAlignerReader_bytes_left_in_buffer$port0__write_1 =
	     WILL_FIRE_RL_blueDMA_byteAlignerReader_forwardOutput ?
	       MUX_blueDMA_byteAlignerReader_bytes_left_in_buffer$port0__write_1__VAL_1 :
	       6'd0 ;
  assign blueDMA_byteAlignerReader_bytes_left_in_buffer$port1__write_1 =
	     b__h69154 + 6'd32 ;
  assign blueDMA_byteAlignerReader_bytes_left_in_buffer$port2__read =
	     WILL_FIRE_RL_blueDMA_byteAlignerReader_fetchNewData ?
	       blueDMA_byteAlignerReader_bytes_left_in_buffer$port1__write_1 :
	       b__h69154 ;
  assign blueDMA_byteAlignerReader_fetchedDatum$EN_port0__write =
	     blueDMA_byteAlignerReader_addr_ff$dEMPTY_N ||
	     !blueDMA_byteAlignerReader_addr_ff$dEMPTY_N &&
	     blueDMA_byteAlignerReader_fetchedDatum &&
	     blueDMA_byteAlignerReader_bytes_left_in_buffer_ETC___d1600 ||
	     WILL_FIRE_RL_blueDMA_byteAlignerReader_forwardOutput ;
  assign blueDMA_byteAlignerReader_fetchedDatum$port1__read =
	     !blueDMA_byteAlignerReader_fetchedDatum$EN_port0__write &&
	     blueDMA_byteAlignerReader_fetchedDatum ;
  assign blueDMA_byteAlignerReader_fetchedDatum$port2__read =
	     WILL_FIRE_RL_blueDMA_byteAlignerReader_fetchNewData ||
	     blueDMA_byteAlignerReader_fetchedDatum$port1__read ;
  assign blueDMA_byteAlignerWriter_buffer$EN_port0__write =
	     WILL_FIRE_RL_blueDMA_byteAlignerWriter_forwardOutput ||
	     blueDMA_byteAlignerWriter_addr_ff$dEMPTY_N ;
  assign blueDMA_byteAlignerWriter_buffer$port0__write_1 =
	     WILL_FIRE_RL_blueDMA_byteAlignerWriter_forwardOutput ?
	       MUX_blueDMA_byteAlignerWriter_buffer$port0__write_1__VAL_1 :
	       512'd0 ;
  assign blueDMA_byteAlignerWriter_buffer$port1__read =
	     blueDMA_byteAlignerWriter_buffer$EN_port0__write ?
	       blueDMA_byteAlignerWriter_buffer$port0__write_1 :
	       blueDMA_byteAlignerWriter_buffer ;
  assign blueDMA_byteAlignerWriter_buffer$port1__write_1 =
	     { blueDMA_byteAlignerWriter_buffer$port1__read[511:256],
	       blueDMA_byteAlignerWriter_incoming$D_OUT } ;
  assign blueDMA_byteAlignerWriter_buffer$port2__read =
	     WILL_FIRE_RL_blueDMA_byteAlignerWriter_fetchNewData ?
	       blueDMA_byteAlignerWriter_buffer$port1__write_1 :
	       blueDMA_byteAlignerWriter_buffer$port1__read ;
  assign blueDMA_byteAlignerWriter_bytes_left_in_buffer$EN_port0__write =
	     WILL_FIRE_RL_blueDMA_byteAlignerWriter_forwardOutput ||
	     blueDMA_byteAlignerWriter_addr_ff$dEMPTY_N ;
  assign blueDMA_byteAlignerWriter_bytes_left_in_buffer$port0__write_1 =
	     WILL_FIRE_RL_blueDMA_byteAlignerWriter_forwardOutput ?
	       MUX_blueDMA_byteAlignerWriter_bytes_left_in_buffer$port0__write_1__VAL_1 :
	       6'd0 ;
  assign blueDMA_byteAlignerWriter_bytes_left_in_buffer$port1__write_1 =
	     b__h112387 + 6'd32 ;
  assign blueDMA_byteAlignerWriter_bytes_left_in_buffer$port2__read =
	     WILL_FIRE_RL_blueDMA_byteAlignerWriter_fetchNewData ?
	       blueDMA_byteAlignerWriter_bytes_left_in_buffer$port1__write_1 :
	       b__h112387 ;
  assign blueDMA_byteAlignerWriter_fetchedDatum$EN_port0__write =
	     blueDMA_byteAlignerWriter_addr_ff$dEMPTY_N ||
	     !blueDMA_byteAlignerWriter_addr_ff$dEMPTY_N &&
	     blueDMA_byteAlignerWriter_fetchedDatum &&
	     blueDMA_byteAlignerWriter_bytes_left_in_buffer_ETC___d1726 ||
	     WILL_FIRE_RL_blueDMA_byteAlignerWriter_forwardOutput ;
  assign blueDMA_byteAlignerWriter_fetchedDatum$port1__read =
	     !blueDMA_byteAlignerWriter_fetchedDatum$EN_port0__write &&
	     blueDMA_byteAlignerWriter_fetchedDatum ;
  assign blueDMA_byteAlignerWriter_fetchedDatum$port2__read =
	     WILL_FIRE_RL_blueDMA_byteAlignerWriter_fetchNewData ||
	     blueDMA_byteAlignerWriter_fetchedDatum$port1__read ;

  // register blueDMA_byteAlignerReader_buffer
  assign blueDMA_byteAlignerReader_buffer$D_IN =
	     blueDMA_byteAlignerReader_buffer$port2__read ;
  assign blueDMA_byteAlignerReader_buffer$EN = 1'b1 ;

  // register blueDMA_byteAlignerReader_bytes_in
  assign blueDMA_byteAlignerReader_bytes_in$D_IN =
	     WILL_FIRE_RL_blueDMA_byteAlignerReader_fetchNewData ?
	       MUX_blueDMA_byteAlignerReader_bytes_in$write_1__VAL_1 :
	       32'd0 ;
  assign blueDMA_byteAlignerReader_bytes_in$EN =
	     WILL_FIRE_RL_blueDMA_byteAlignerReader_fetchNewData ||
	     blueDMA_byteAlignerReader_addr_ff$dEMPTY_N ;

  // register blueDMA_byteAlignerReader_bytes_left_in_buffer
  assign blueDMA_byteAlignerReader_bytes_left_in_buffer$D_IN =
	     blueDMA_byteAlignerReader_bytes_left_in_buffer$port2__read ;
  assign blueDMA_byteAlignerReader_bytes_left_in_buffer$EN = 1'b1 ;

  // register blueDMA_byteAlignerReader_bytes_out
  always@(WILL_FIRE_RL_blueDMA_byteAlignerReader_forwardOutput or
	  MUX_blueDMA_byteAlignerReader_bytes_out$write_1__VAL_1 or
	  WILL_FIRE_RL_blueDMA_byteAlignerReader_forwardOutputLast or
	  MUX_blueDMA_byteAlignerReader_bytes_out$write_1__VAL_2 or
	  blueDMA_byteAlignerReader_addr_ff$dEMPTY_N)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_blueDMA_byteAlignerReader_forwardOutput:
	  blueDMA_byteAlignerReader_bytes_out$D_IN =
	      MUX_blueDMA_byteAlignerReader_bytes_out$write_1__VAL_1;
      WILL_FIRE_RL_blueDMA_byteAlignerReader_forwardOutputLast:
	  blueDMA_byteAlignerReader_bytes_out$D_IN =
	      MUX_blueDMA_byteAlignerReader_bytes_out$write_1__VAL_2;
      blueDMA_byteAlignerReader_addr_ff$dEMPTY_N:
	  blueDMA_byteAlignerReader_bytes_out$D_IN = 32'd0;
      default: blueDMA_byteAlignerReader_bytes_out$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign blueDMA_byteAlignerReader_bytes_out$EN =
	     WILL_FIRE_RL_blueDMA_byteAlignerReader_forwardOutput ||
	     WILL_FIRE_RL_blueDMA_byteAlignerReader_forwardOutputLast ||
	     blueDMA_byteAlignerReader_addr_ff$dEMPTY_N ;

  // register blueDMA_byteAlignerReader_bytes_out_needed
  assign blueDMA_byteAlignerReader_bytes_out_needed$D_IN =
	     blueDMA_byteAlignerReader_addr_ff$dEMPTY_N ?
	       MUX_blueDMA_byteAlignerReader_bytes_out_needed$write_1__VAL_1 :
	       6'd32 ;
  assign blueDMA_byteAlignerReader_bytes_out_needed$EN =
	     blueDMA_byteAlignerReader_addr_ff$dEMPTY_N ||
	     WILL_FIRE_RL_blueDMA_byteAlignerReader_forwardOutput ;

  // register blueDMA_byteAlignerReader_bytes_total
  assign blueDMA_byteAlignerReader_bytes_total$D_IN =
	     blueDMA_byteAlignerReader_addr_ff$dD_OUT[31:0] ;
  assign blueDMA_byteAlignerReader_bytes_total$EN =
	     blueDMA_byteAlignerReader_addr_ff$dEMPTY_N ;

  // register blueDMA_byteAlignerReader_fetchedDatum
  assign blueDMA_byteAlignerReader_fetchedDatum$D_IN =
	     blueDMA_byteAlignerReader_fetchedDatum$port2__read ;
  assign blueDMA_byteAlignerReader_fetchedDatum$EN = 1'b1 ;

  // register blueDMA_byteAlignerWriter_buffer
  assign blueDMA_byteAlignerWriter_buffer$D_IN =
	     blueDMA_byteAlignerWriter_buffer$port2__read ;
  assign blueDMA_byteAlignerWriter_buffer$EN = 1'b1 ;

  // register blueDMA_byteAlignerWriter_bytes_in
  assign blueDMA_byteAlignerWriter_bytes_in$D_IN =
	     WILL_FIRE_RL_blueDMA_byteAlignerWriter_fetchNewData ?
	       MUX_blueDMA_byteAlignerWriter_bytes_in$write_1__VAL_1 :
	       32'd0 ;
  assign blueDMA_byteAlignerWriter_bytes_in$EN =
	     WILL_FIRE_RL_blueDMA_byteAlignerWriter_fetchNewData ||
	     blueDMA_byteAlignerWriter_addr_ff$dEMPTY_N ;

  // register blueDMA_byteAlignerWriter_bytes_left_in_buffer
  assign blueDMA_byteAlignerWriter_bytes_left_in_buffer$D_IN =
	     blueDMA_byteAlignerWriter_bytes_left_in_buffer$port2__read ;
  assign blueDMA_byteAlignerWriter_bytes_left_in_buffer$EN = 1'b1 ;

  // register blueDMA_byteAlignerWriter_bytes_out
  always@(WILL_FIRE_RL_blueDMA_byteAlignerWriter_forwardOutput or
	  MUX_blueDMA_byteAlignerWriter_bytes_out$write_1__VAL_1 or
	  WILL_FIRE_RL_blueDMA_byteAlignerWriter_forwardOutputLast or
	  MUX_blueDMA_byteAlignerWriter_bytes_out$write_1__VAL_2 or
	  blueDMA_byteAlignerWriter_addr_ff$dEMPTY_N)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_blueDMA_byteAlignerWriter_forwardOutput:
	  blueDMA_byteAlignerWriter_bytes_out$D_IN =
	      MUX_blueDMA_byteAlignerWriter_bytes_out$write_1__VAL_1;
      WILL_FIRE_RL_blueDMA_byteAlignerWriter_forwardOutputLast:
	  blueDMA_byteAlignerWriter_bytes_out$D_IN =
	      MUX_blueDMA_byteAlignerWriter_bytes_out$write_1__VAL_2;
      blueDMA_byteAlignerWriter_addr_ff$dEMPTY_N:
	  blueDMA_byteAlignerWriter_bytes_out$D_IN = 32'd0;
      default: blueDMA_byteAlignerWriter_bytes_out$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign blueDMA_byteAlignerWriter_bytes_out$EN =
	     WILL_FIRE_RL_blueDMA_byteAlignerWriter_forwardOutput ||
	     WILL_FIRE_RL_blueDMA_byteAlignerWriter_forwardOutputLast ||
	     blueDMA_byteAlignerWriter_addr_ff$dEMPTY_N ;

  // register blueDMA_byteAlignerWriter_bytes_out_needed
  assign blueDMA_byteAlignerWriter_bytes_out_needed$D_IN =
	     blueDMA_byteAlignerWriter_addr_ff$dEMPTY_N ?
	       MUX_blueDMA_byteAlignerWriter_bytes_out_needed$write_1__VAL_1 :
	       6'd32 ;
  assign blueDMA_byteAlignerWriter_bytes_out_needed$EN =
	     blueDMA_byteAlignerWriter_addr_ff$dEMPTY_N ||
	     WILL_FIRE_RL_blueDMA_byteAlignerWriter_forwardOutput ;

  // register blueDMA_byteAlignerWriter_bytes_total
  assign blueDMA_byteAlignerWriter_bytes_total$D_IN =
	     blueDMA_byteAlignerWriter_addr_ff$dD_OUT[31:0] ;
  assign blueDMA_byteAlignerWriter_bytes_total$EN =
	     blueDMA_byteAlignerWriter_addr_ff$dEMPTY_N ;

  // register blueDMA_byteAlignerWriter_fetchedDatum
  assign blueDMA_byteAlignerWriter_fetchedDatum$D_IN =
	     blueDMA_byteAlignerWriter_fetchedDatum$port2__read ;
  assign blueDMA_byteAlignerWriter_fetchedDatum$EN = 1'b1 ;

  // register blueDMA_clkCntr
  assign blueDMA_clkCntr$D_IN = blueDMA_clkCntr + 32'd1 ;
  assign blueDMA_clkCntr$EN = 1'd1 ;

  // register blueDMA_cycles_between
  assign blueDMA_cycles_between$D_IN =
	     { 32'd0, blueDMA_clkCntr - blueDMA_pc_betweenStart } ;
  assign blueDMA_cycles_between$EN =
	     WILL_FIRE_RL_blueDMA_setInterrupt &&
	     blueDMA_pc_reqCntr_644_EQ_blueDMA_cycles_betwe_ETC___d1830 ;

  // register blueDMA_cycles_between_set
  assign blueDMA_cycles_between_set$D_IN =
	     { blueDMA_s_config_writeSlave_in$D_OUT[10] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[74:67] :
		 blueDMA_cycles_between_set[63:56],
	       blueDMA_s_config_writeSlave_in$D_OUT[9] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[66:59] :
		 blueDMA_cycles_between_set[55:48],
	       blueDMA_s_config_writeSlave_in$D_OUT[8] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[58:51] :
		 blueDMA_cycles_between_set[47:40],
	       blueDMA_s_config_writeSlave_in$D_OUT[7] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[50:43] :
		 blueDMA_cycles_between_set[39:32],
	       blueDMA_s_config_writeSlave_in$D_OUT[6] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[42:35] :
		 blueDMA_cycles_between_set[31:24],
	       blueDMA_s_config_writeSlave_in$D_OUT[5] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[34:27] :
		 blueDMA_cycles_between_set[23:16],
	       blueDMA_s_config_writeSlave_in$D_OUT[4] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[26:19] :
		 blueDMA_cycles_between_set[15:8],
	       blueDMA_s_config_writeSlave_in$D_OUT[3] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[18:11] :
		 blueDMA_cycles_between_set[7:0] } ;
  assign blueDMA_cycles_between_set$EN =
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 ;

  // register blueDMA_cycles_last_request
  assign blueDMA_cycles_last_request$D_IN =
	     { 32'd0, blueDMA_clkCntr - blueDMA_pc_start } ;
  assign blueDMA_cycles_last_request$EN = WILL_FIRE_RL_blueDMA_setInterrupt ;

  // register blueDMA_doneInterruptReg
  assign blueDMA_doneInterruptReg$D_IN = WILL_FIRE_RL_blueDMA_setInterrupt ;
  assign blueDMA_doneInterruptReg$EN = 1'd1 ;

  // register blueDMA_fpgaLastCycle
  assign blueDMA_fpgaLastCycle$D_IN =
	     blueDMA_m_fpga_rd_task_data_output_reg[32:7] != 26'd0 ||
	     blueDMA_m_fpga_rd_task_data_requests_reg[94:69] != 26'd0 ||
	     blueDMA_m_fpga_wr_task_data_output_reg[32:7] != 26'd0 ||
	     blueDMA_m_fpga_wr_task_data_requests_reg[94:69] != 26'd0 ;
  assign blueDMA_fpgaLastCycle$EN = blueDMA_fpgaDone$sFULL_N ;

  // register blueDMA_fpga_addr
  assign blueDMA_fpga_addr$D_IN =
	     { blueDMA_s_config_writeSlave_in$D_OUT[10] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[74:67] :
		 blueDMA_fpga_addr[63:56],
	       blueDMA_s_config_writeSlave_in$D_OUT[9] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[66:59] :
		 blueDMA_fpga_addr[55:48],
	       blueDMA_s_config_writeSlave_in$D_OUT[8] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[58:51] :
		 blueDMA_fpga_addr[47:40],
	       blueDMA_s_config_writeSlave_in$D_OUT[7] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[50:43] :
		 blueDMA_fpga_addr[39:32],
	       blueDMA_s_config_writeSlave_in$D_OUT[6] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[42:35] :
		 blueDMA_fpga_addr[31:24],
	       blueDMA_s_config_writeSlave_in$D_OUT[5] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[34:27] :
		 blueDMA_fpga_addr[23:16],
	       blueDMA_s_config_writeSlave_in$D_OUT[4] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[26:19] :
		 blueDMA_fpga_addr[15:8],
	       blueDMA_s_config_writeSlave_in$D_OUT[3] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[18:11] :
		 blueDMA_fpga_addr[7:0] } ;
  assign blueDMA_fpga_addr$EN =
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2 ;

  // register blueDMA_host_addr
  assign blueDMA_host_addr$D_IN =
	     { blueDMA_s_config_writeSlave_in$D_OUT[10] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[74:67] :
		 blueDMA_host_addr[63:56],
	       blueDMA_s_config_writeSlave_in$D_OUT[9] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[66:59] :
		 blueDMA_host_addr[55:48],
	       blueDMA_s_config_writeSlave_in$D_OUT[8] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[58:51] :
		 blueDMA_host_addr[47:40],
	       blueDMA_s_config_writeSlave_in$D_OUT[7] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[50:43] :
		 blueDMA_host_addr[39:32],
	       blueDMA_s_config_writeSlave_in$D_OUT[6] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[42:35] :
		 blueDMA_host_addr[31:24],
	       blueDMA_s_config_writeSlave_in$D_OUT[5] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[34:27] :
		 blueDMA_host_addr[23:16],
	       blueDMA_s_config_writeSlave_in$D_OUT[4] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[26:19] :
		 blueDMA_host_addr[15:8],
	       blueDMA_s_config_writeSlave_in$D_OUT[3] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[18:11] :
		 blueDMA_host_addr[7:0] } ;
  assign blueDMA_host_addr$EN =
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1 ;

  // register blueDMA_id
  assign blueDMA_id$D_IN = 64'h0 ;
  assign blueDMA_id$EN = 1'b0 ;

  // register blueDMA_isWriteActive
  assign blueDMA_isWriteActive$D_IN = !WILL_FIRE_RL_blueDMA_handleRead ;
  assign blueDMA_isWriteActive$EN = MUX_blueDMA_opInProgress$write_1__SEL_2 ;

  // register blueDMA_m_fpga_rd_task_data_output_reg
  assign blueDMA_m_fpga_rd_task_data_output_reg$D_IN =
	     WILL_FIRE_RL_blueDMA_m_fpga_rd_forwardData ?
	       MUX_blueDMA_m_fpga_rd_task_data_output_reg$write_1__VAL_1 :
	       blueDMA_m_fpga_rd_reqGen_outgoingBuffer$D_OUT[44:0] ;
  assign blueDMA_m_fpga_rd_task_data_output_reg$EN =
	     WILL_FIRE_RL_blueDMA_m_fpga_rd_forwardData ||
	     WILL_FIRE_RL_blueDMA_m_fpga_rd_fillBuffer ;

  // register blueDMA_m_fpga_rd_task_data_requests_reg
  assign blueDMA_m_fpga_rd_task_data_requests_reg$D_IN =
	     WILL_FIRE_RL_blueDMA_m_fpga_rd_placeRequest ?
	       MUX_blueDMA_m_fpga_rd_task_data_requests_reg$write_1__VAL_1 :
	       blueDMA_m_fpga_rd_reqGen_outgoingBuffer$D_OUT[157:45] ;
  assign blueDMA_m_fpga_rd_task_data_requests_reg$EN =
	     WILL_FIRE_RL_blueDMA_m_fpga_rd_placeRequest ||
	     WILL_FIRE_RL_blueDMA_m_fpga_rd_fillBuffer ;

  // register blueDMA_m_fpga_wr_beatsThisRequestCntr
  assign blueDMA_m_fpga_wr_beatsThisRequestCntr$D_IN =
	     WILL_FIRE_RL_blueDMA_m_fpga_wr_forwardData ?
	       MUX_blueDMA_m_fpga_wr_beatsThisRequestCntr$write_1__VAL_1 :
	       8'd0 ;
  assign blueDMA_m_fpga_wr_beatsThisRequestCntr$EN =
	     WILL_FIRE_RL_blueDMA_m_fpga_wr_forwardData ||
	     WILL_FIRE_RL_blueDMA_m_fpga_wr_fillBuffer ;

  // register blueDMA_m_fpga_wr_task_data_output_reg
  assign blueDMA_m_fpga_wr_task_data_output_reg$D_IN =
	     WILL_FIRE_RL_blueDMA_m_fpga_wr_forwardData ?
	       MUX_blueDMA_m_fpga_wr_task_data_output_reg$write_1__VAL_1 :
	       blueDMA_m_fpga_wr_reqGen_outgoingBuffer$D_OUT[44:0] ;
  assign blueDMA_m_fpga_wr_task_data_output_reg$EN =
	     WILL_FIRE_RL_blueDMA_m_fpga_wr_forwardData ||
	     WILL_FIRE_RL_blueDMA_m_fpga_wr_fillBuffer ;

  // register blueDMA_m_fpga_wr_task_data_requests_reg
  assign blueDMA_m_fpga_wr_task_data_requests_reg$D_IN =
	     WILL_FIRE_RL_blueDMA_m_fpga_wr_placeRequest ?
	       MUX_blueDMA_m_fpga_wr_task_data_requests_reg$write_1__VAL_1 :
	       blueDMA_m_fpga_wr_reqGen_outgoingBuffer$D_OUT[157:45] ;
  assign blueDMA_m_fpga_wr_task_data_requests_reg$EN =
	     WILL_FIRE_RL_blueDMA_m_fpga_wr_placeRequest ||
	     WILL_FIRE_RL_blueDMA_m_fpga_wr_fillBuffer ;

  // register blueDMA_m_pcie_rd_task_data_output_reg
  assign blueDMA_m_pcie_rd_task_data_output_reg$D_IN =
	     WILL_FIRE_RL_blueDMA_m_pcie_rd_forwardData ?
	       MUX_blueDMA_m_pcie_rd_task_data_output_reg$write_1__VAL_1 :
	       blueDMA_m_pcie_rd_reqGen_outgoingBuffer$D_OUT[42:0] ;
  assign blueDMA_m_pcie_rd_task_data_output_reg$EN =
	     WILL_FIRE_RL_blueDMA_m_pcie_rd_forwardData ||
	     WILL_FIRE_RL_blueDMA_m_pcie_rd_fillBuffer ;

  // register blueDMA_m_pcie_rd_task_data_requests_reg
  assign blueDMA_m_pcie_rd_task_data_requests_reg$D_IN =
	     WILL_FIRE_RL_blueDMA_m_pcie_rd_placeRequest ?
	       MUX_blueDMA_m_pcie_rd_task_data_requests_reg$write_1__VAL_1 :
	       blueDMA_m_pcie_rd_reqGen_outgoingBuffer$D_OUT[156:43] ;
  assign blueDMA_m_pcie_rd_task_data_requests_reg$EN =
	     WILL_FIRE_RL_blueDMA_m_pcie_rd_placeRequest ||
	     WILL_FIRE_RL_blueDMA_m_pcie_rd_fillBuffer ;

  // register blueDMA_m_pcie_wr_beatsThisRequestCntr
  assign blueDMA_m_pcie_wr_beatsThisRequestCntr$D_IN =
	     WILL_FIRE_RL_blueDMA_m_pcie_wr_forwardData ?
	       MUX_blueDMA_m_pcie_wr_beatsThisRequestCntr$write_1__VAL_1 :
	       8'd0 ;
  assign blueDMA_m_pcie_wr_beatsThisRequestCntr$EN =
	     WILL_FIRE_RL_blueDMA_m_pcie_wr_forwardData ||
	     WILL_FIRE_RL_blueDMA_m_pcie_wr_fillBuffer ;

  // register blueDMA_m_pcie_wr_task_data_output_reg
  assign blueDMA_m_pcie_wr_task_data_output_reg$D_IN =
	     WILL_FIRE_RL_blueDMA_m_pcie_wr_forwardData ?
	       MUX_blueDMA_m_pcie_wr_task_data_output_reg$write_1__VAL_1 :
	       blueDMA_m_pcie_wr_reqGen_outgoingBuffer$D_OUT[42:0] ;
  assign blueDMA_m_pcie_wr_task_data_output_reg$EN =
	     WILL_FIRE_RL_blueDMA_m_pcie_wr_forwardData ||
	     WILL_FIRE_RL_blueDMA_m_pcie_wr_fillBuffer ;

  // register blueDMA_m_pcie_wr_task_data_requests_reg
  assign blueDMA_m_pcie_wr_task_data_requests_reg$D_IN =
	     WILL_FIRE_RL_blueDMA_m_pcie_wr_placeRequest ?
	       MUX_blueDMA_m_pcie_wr_task_data_requests_reg$write_1__VAL_1 :
	       blueDMA_m_pcie_wr_reqGen_outgoingBuffer$D_OUT[156:43] ;
  assign blueDMA_m_pcie_wr_task_data_requests_reg$EN =
	     WILL_FIRE_RL_blueDMA_m_pcie_wr_placeRequest ||
	     WILL_FIRE_RL_blueDMA_m_pcie_wr_fillBuffer ;

  // register blueDMA_opInProgress
  assign blueDMA_opInProgress$D_IN = !WILL_FIRE_RL_blueDMA_setInterrupt ;
  assign blueDMA_opInProgress$EN =
	     WILL_FIRE_RL_blueDMA_setInterrupt ||
	     WILL_FIRE_RL_blueDMA_handleRead ||
	     WILL_FIRE_RL_blueDMA_handleWrite ;

  // register blueDMA_pc_betweenStart
  assign blueDMA_pc_betweenStart$D_IN = blueDMA_clkCntr ;
  assign blueDMA_pc_betweenStart$EN =
	     MUX_blueDMA_opInProgress$write_1__SEL_2 &&
	     blueDMA_pc_reqCntr == 12'd0 ;

  // register blueDMA_pc_reqCntr
  assign blueDMA_pc_reqCntr$D_IN =
	     blueDMA_pc_reqCntr_644_EQ_blueDMA_cycles_betwe_ETC___d1830 ?
	       12'd0 :
	       blueDMA_pc_reqCntr + 12'd1 ;
  assign blueDMA_pc_reqCntr$EN = WILL_FIRE_RL_blueDMA_setInterrupt ;

  // register blueDMA_pc_start
  assign blueDMA_pc_start$D_IN = blueDMA_clkCntr ;
  assign blueDMA_pc_start$EN = MUX_blueDMA_opInProgress$write_1__SEL_2 ;

  // register blueDMA_pcieLastCycle
  assign blueDMA_pcieLastCycle$D_IN =
	     blueDMA_m_pcie_rd_task_data_output_reg[32:6] != 27'd0 ||
	     blueDMA_m_pcie_rd_task_data_requests_reg[95:69] != 27'd0 ||
	     blueDMA_m_pcie_wr_task_data_output_reg[32:6] != 27'd0 ||
	     blueDMA_m_pcie_wr_task_data_requests_reg[95:69] != 27'd0 ;
  assign blueDMA_pcieLastCycle$EN = blueDMA_pcieDone$sFULL_N ;

  // register blueDMA_readConverter_buffer
  assign blueDMA_readConverter_buffer$D_IN =
	     blueDMA_fpga_response_converter_fifo$dD_OUT ;
  assign blueDMA_readConverter_buffer$EN =
	     WILL_FIRE_RL_blueDMA_1_mkConnectionGetPut ;

  // register blueDMA_readConverter_bufferEmpty
  assign blueDMA_readConverter_bufferEmpty$D_IN =
	     blueDMA_readConverter_bufferEmpty$port2__read ;
  assign blueDMA_readConverter_bufferEmpty$EN = 1'b1 ;

  // register blueDMA_readConverter_byteCntr
  assign blueDMA_readConverter_byteCntr$D_IN =
	     blueDMA_readConvBTT_ff$dEMPTY_N ?
	       blueDMA_readConvBTT_ff$dD_OUT[32:1] :
	       MUX_blueDMA_readConverter_byteCntr$write_1__VAL_2 ;
  assign blueDMA_readConverter_byteCntr$EN =
	     blueDMA_readConvBTT_ff$dEMPTY_N ||
	     WILL_FIRE_RL_blueDMA_2_mkConnectionGetPut ;

  // register blueDMA_readConverter_wordInCntr
  assign blueDMA_readConverter_wordInCntr$D_IN =
	     blueDMA_readConvBTT_ff$dEMPTY_N ?
	       blueDMA_readConvBTT_ff$dD_OUT[0] :
	       IF_0_CONCAT_blueDMA_readConverter_wordInCntr_E_ETC__q1[0] ;
  assign blueDMA_readConverter_wordInCntr$EN =
	     blueDMA_readConvBTT_ff$dEMPTY_N ||
	     WILL_FIRE_RL_blueDMA_2_mkConnectionGetPut ;

  // register blueDMA_readIn_rv
  assign blueDMA_readIn_rv$D_IN = blueDMA_readIn_rv$port2__read ;
  assign blueDMA_readIn_rv$EN = 1'b1 ;

  // register blueDMA_read_requests
  assign blueDMA_read_requests$D_IN = blueDMA_read_requests + 64'd1 ;
  assign blueDMA_read_requests$EN = WILL_FIRE_RL_blueDMA_handleRead ;

  // register blueDMA_s_config_readBusy
  assign blueDMA_s_config_readBusy$D_IN = 1'b0 ;
  assign blueDMA_s_config_readBusy$EN = 1'b0 ;

  // register blueDMA_s_config_writeSlave_addrIn_rv
  assign blueDMA_s_config_writeSlave_addrIn_rv$D_IN =
	     blueDMA_s_config_writeSlave_addrIn_rv$port2__read ;
  assign blueDMA_s_config_writeSlave_addrIn_rv$EN = 1'b1 ;

  // register blueDMA_s_config_writeSlave_dataIn_rv
  assign blueDMA_s_config_writeSlave_dataIn_rv$D_IN =
	     blueDMA_s_config_writeSlave_dataIn_rv$port2__read ;
  assign blueDMA_s_config_writeSlave_dataIn_rv$EN = 1'b1 ;

  // register blueDMA_transfer_length
  assign blueDMA_transfer_length$D_IN =
	     { blueDMA_s_config_writeSlave_in$D_OUT[10] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[74:67] :
		 blueDMA_transfer_length[63:56],
	       blueDMA_s_config_writeSlave_in$D_OUT[9] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[66:59] :
		 blueDMA_transfer_length[55:48],
	       blueDMA_s_config_writeSlave_in$D_OUT[8] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[58:51] :
		 blueDMA_transfer_length[47:40],
	       blueDMA_s_config_writeSlave_in$D_OUT[7] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[50:43] :
		 blueDMA_transfer_length[39:32],
	       blueDMA_s_config_writeSlave_in$D_OUT[6] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[42:35] :
		 blueDMA_transfer_length[31:24],
	       blueDMA_s_config_writeSlave_in$D_OUT[5] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[34:27] :
		 blueDMA_transfer_length[23:16],
	       blueDMA_s_config_writeSlave_in$D_OUT[4] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[26:19] :
		 blueDMA_transfer_length[15:8],
	       blueDMA_s_config_writeSlave_in$D_OUT[3] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[18:11] :
		 blueDMA_transfer_length[7:0] } ;
  assign blueDMA_transfer_length$EN =
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 ;

  // register blueDMA_writeConverter_buffer_0
  assign blueDMA_writeConverter_buffer_0$D_IN =
	     blueDMA_m_pcie_rd_outgoingBuffer$D_OUT ;
  assign blueDMA_writeConverter_buffer_0$EN =
	     WILL_FIRE_RL_blueDMA_3_mkConnectionGetPut &&
	     blueDMA_writeConverter_wordInCntr == 2'd0 ;

  // register blueDMA_writeConverter_wordInCntr
  assign blueDMA_writeConverter_wordInCntr$D_IN =
	     blueDMA_writeConvBTT_ff$dEMPTY_N ?
	       MUX_blueDMA_writeConverter_wordInCntr$write_1__VAL_1 :
	       MUX_blueDMA_writeConverter_wordInCntr$write_1__VAL_2 ;
  assign blueDMA_writeConverter_wordInCntr$EN =
	     blueDMA_writeConvBTT_ff$dEMPTY_N ||
	     WILL_FIRE_RL_blueDMA_3_mkConnectionGetPut ;

  // register blueDMA_writeConverter_wordOutCntr
  assign blueDMA_writeConverter_wordOutCntr$D_IN =
	     blueDMA_writeConvBTT_ff$dEMPTY_N ?
	       MUX_blueDMA_writeConverter_wordOutCntr$write_1__VAL_1 :
	       MUX_blueDMA_writeConverter_wordOutCntr$write_1__VAL_2 ;
  assign blueDMA_writeConverter_wordOutCntr$EN =
	     blueDMA_writeConvBTT_ff$dEMPTY_N ||
	     WILL_FIRE_RL_blueDMA_3_mkConnectionGetPut ;

  // register blueDMA_writeIn_rv
  assign blueDMA_writeIn_rv$D_IN = blueDMA_writeIn_rv$port2__read ;
  assign blueDMA_writeIn_rv$EN = 1'b1 ;

  // register blueDMA_write_requests
  assign blueDMA_write_requests$D_IN = blueDMA_write_requests + 64'd1 ;
  assign blueDMA_write_requests$EN = WILL_FIRE_RL_blueDMA_handleWrite ;

  // submodule blueDMA_byteAlignerReader_addr_ff
  assign blueDMA_byteAlignerReader_addr_ff$sD_IN = 160'h0 ;
  assign blueDMA_byteAlignerReader_addr_ff$sENQ = 1'b0 ;
  assign blueDMA_byteAlignerReader_addr_ff$dDEQ =
	     blueDMA_byteAlignerReader_addr_ff$dEMPTY_N ;

  // submodule blueDMA_byteAlignerReader_incoming
  assign blueDMA_byteAlignerReader_incoming$D_IN = 256'h0 ;
  assign blueDMA_byteAlignerReader_incoming$ENQ = 1'b0 ;
  assign blueDMA_byteAlignerReader_incoming$DEQ =
	     WILL_FIRE_RL_blueDMA_byteAlignerReader_fetchNewData ;
  assign blueDMA_byteAlignerReader_incoming$CLR = 1'b0 ;

  // submodule blueDMA_byteAlignerReader_outgoing
  assign blueDMA_byteAlignerReader_outgoing$D_IN =
	     blueDMA_byteAlignerReader_buffer[255:0] ;
  assign blueDMA_byteAlignerReader_outgoing$ENQ =
	     WILL_FIRE_RL_blueDMA_byteAlignerReader_forwardOutputLast ||
	     WILL_FIRE_RL_blueDMA_byteAlignerReader_forwardOutput ;
  assign blueDMA_byteAlignerReader_outgoing$DEQ = 1'b0 ;
  assign blueDMA_byteAlignerReader_outgoing$CLR = 1'b0 ;

  // submodule blueDMA_byteAlignerWriter_addr_ff
  assign blueDMA_byteAlignerWriter_addr_ff$sD_IN = 160'h0 ;
  assign blueDMA_byteAlignerWriter_addr_ff$sENQ = 1'b0 ;
  assign blueDMA_byteAlignerWriter_addr_ff$dDEQ =
	     blueDMA_byteAlignerWriter_addr_ff$dEMPTY_N ;

  // submodule blueDMA_byteAlignerWriter_incoming
  assign blueDMA_byteAlignerWriter_incoming$D_IN = 256'h0 ;
  assign blueDMA_byteAlignerWriter_incoming$ENQ = 1'b0 ;
  assign blueDMA_byteAlignerWriter_incoming$DEQ =
	     WILL_FIRE_RL_blueDMA_byteAlignerWriter_fetchNewData ;
  assign blueDMA_byteAlignerWriter_incoming$CLR = 1'b0 ;

  // submodule blueDMA_byteAlignerWriter_outgoing
  assign blueDMA_byteAlignerWriter_outgoing$D_IN =
	     blueDMA_byteAlignerWriter_buffer[255:0] ;
  assign blueDMA_byteAlignerWriter_outgoing$ENQ =
	     WILL_FIRE_RL_blueDMA_byteAlignerWriter_forwardOutputLast ||
	     WILL_FIRE_RL_blueDMA_byteAlignerWriter_forwardOutput ;
  assign blueDMA_byteAlignerWriter_outgoing$DEQ = 1'b0 ;
  assign blueDMA_byteAlignerWriter_outgoing$CLR = 1'b0 ;

  // submodule blueDMA_cmdsIn
  assign blueDMA_cmdsIn$D_IN =
	     blueDMA_s_config_writeSlave_in$D_OUT[74:11] !=
	     64'h0000000010001000 ;
  assign blueDMA_cmdsIn$ENQ =
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial &&
	     (blueDMA_s_config_writeSlave_in$D_OUT[74:11] ==
	      64'h0000000010001000 ||
	      blueDMA_s_config_writeSlave_in$D_OUT[74:11] ==
	      64'h0000000010000001) ;
  assign blueDMA_cmdsIn$DEQ =
	     blueDMA_cmdsIn$EMPTY_N && !blueDMA_writeIn_rv$port1__read[160] &&
	     blueDMA_cmdsIn$D_OUT ||
	     blueDMA_cmdsIn$EMPTY_N && !blueDMA_readIn_rv$port1__read[160] &&
	     !blueDMA_cmdsIn$D_OUT ;
  assign blueDMA_cmdsIn$CLR = 1'b0 ;

  // submodule blueDMA_fpgaDone
  assign blueDMA_fpgaDone$sD_IN = 1'd1 ;
  assign blueDMA_fpgaDone$sENQ =
	     blueDMA_fpgaDone$sFULL_N &&
	     blueDMA_fpgaLastCycle_819_AND_blueDMA_m_fpga_r_ETC___d1821 ;
  assign blueDMA_fpgaDone$dDEQ = WILL_FIRE_RL_blueDMA_setInterrupt ;

  // submodule blueDMA_fpga_request_converter_fifo
  assign blueDMA_fpga_request_converter_fifo$sD_IN =
	     blueDMA_writeConverter_dataSync$D_OUT ;
  assign blueDMA_fpga_request_converter_fifo$sENQ =
	     blueDMA_fpga_request_converter_fifo$sFULL_N &&
	     blueDMA_writeConverter_dataSync$EMPTY_N ;
  assign blueDMA_fpga_request_converter_fifo$dDEQ =
	     blueDMA_fpga_request_converter_fifo$dEMPTY_N &&
	     blueDMA_m_fpga_wr_incomingBuffer$FULL_N ;

  // submodule blueDMA_fpga_response_converter_fifo
  assign blueDMA_fpga_response_converter_fifo$sD_IN =
	     blueDMA_m_fpga_rd_outgoingBuffer$D_OUT ;
  assign blueDMA_fpga_response_converter_fifo$sENQ =
	     blueDMA_fpga_response_converter_fifo$sFULL_N &&
	     blueDMA_m_fpga_rd_outgoingBuffer$EMPTY_N ;
  assign blueDMA_fpga_response_converter_fifo$dDEQ =
	     WILL_FIRE_RL_blueDMA_1_mkConnectionGetPut ;

  // submodule blueDMA_m_fpga_rd_master_rd_in
  assign blueDMA_m_fpga_rd_master_rd_in$D_IN =
	     { 1'd0,
	       blueDMA_m_fpga_rd_task_data_requests_reg[68:5],
	       _theResult_____2__h33540,
	       17'd102784,
	       blueDMA_m_fpga_rd_task_data_requests_reg[4:1],
	       1'd0 } ;
  assign blueDMA_m_fpga_rd_master_rd_in$ENQ =
	     WILL_FIRE_RL_blueDMA_m_fpga_rd_placeRequest ;
  assign blueDMA_m_fpga_rd_master_rd_in$DEQ =
	     blueDMA_m_fpga_rd_master_rd_in$EMPTY_N && m32_axi_arready ;
  assign blueDMA_m_fpga_rd_master_rd_in$CLR = 1'b0 ;

  // submodule blueDMA_m_fpga_rd_master_rd_out
  assign blueDMA_m_fpga_rd_master_rd_out$D_IN =
	     blueDMA_m_fpga_rd_master_rd_rinpkg$wget ;
  assign blueDMA_m_fpga_rd_master_rd_out$ENQ =
	     blueDMA_m_fpga_rd_master_rd_out$FULL_N && m32_axi_rvalid ;
  assign blueDMA_m_fpga_rd_master_rd_out$DEQ =
	     WILL_FIRE_RL_blueDMA_m_fpga_rd_forwardData ;
  assign blueDMA_m_fpga_rd_master_rd_out$CLR = 1'b0 ;

  // submodule blueDMA_m_fpga_rd_maxOutstandingFIFO
  assign blueDMA_m_fpga_rd_maxOutstandingFIFO$D_IN = 1'd1 ;
  assign blueDMA_m_fpga_rd_maxOutstandingFIFO$ENQ =
	     WILL_FIRE_RL_blueDMA_m_fpga_rd_placeRequest ;
  assign blueDMA_m_fpga_rd_maxOutstandingFIFO$DEQ =
	     WILL_FIRE_RL_blueDMA_m_fpga_rd_forwardData &&
	     blueDMA_m_fpga_rd_master_rd_out$D_OUT[1] ;
  assign blueDMA_m_fpga_rd_maxOutstandingFIFO$CLR = 1'b0 ;

  // submodule blueDMA_m_fpga_rd_outgoingBuffer
  assign blueDMA_m_fpga_rd_outgoingBuffer$D_IN =
	     blueDMA_m_fpga_rd_master_rd_out$D_OUT[515:4] ;
  assign blueDMA_m_fpga_rd_outgoingBuffer$ENQ =
	     WILL_FIRE_RL_blueDMA_m_fpga_rd_forwardData ;
  assign blueDMA_m_fpga_rd_outgoingBuffer$DEQ =
	     blueDMA_fpga_response_converter_fifo$sFULL_N &&
	     blueDMA_m_fpga_rd_outgoingBuffer$EMPTY_N ;
  assign blueDMA_m_fpga_rd_outgoingBuffer$CLR = 1'b0 ;

  // submodule blueDMA_m_fpga_rd_reqGen_incomingBuffer
  assign blueDMA_m_fpga_rd_reqGen_incomingBuffer$D_IN =
	     blueDMA_mclk_m_fpga_put_req_rd_ff$dD_OUT ;
  assign blueDMA_m_fpga_rd_reqGen_incomingBuffer$ENQ =
	     blueDMA_mclk_m_fpga_put_req_rd_ff$dEMPTY_N &&
	     blueDMA_m_fpga_rd_reqGen_incomingBuffer$FULL_N ;
  assign blueDMA_m_fpga_rd_reqGen_incomingBuffer$DEQ =
	     blueDMA_m_fpga_rd_reqGen_incomingBuffer$EMPTY_N &&
	     blueDMA_m_fpga_rd_reqGen_intermediateBuffer$FULL_N ;
  assign blueDMA_m_fpga_rd_reqGen_incomingBuffer$CLR = 1'b0 ;

  // submodule blueDMA_m_fpga_rd_reqGen_intermediateBuffer
  assign blueDMA_m_fpga_rd_reqGen_intermediateBuffer$D_IN =
	     { x__h30852[5:0],
	       blueDMA_m_fpga_rd_reqGen_incomingBufferD_OUT__ETC__q6[5:0],
	       blueDMA_m_fpga_rd_reqGen_incomingBuffer$D_OUT } ;
  assign blueDMA_m_fpga_rd_reqGen_intermediateBuffer$ENQ =
	     blueDMA_m_fpga_rd_reqGen_incomingBuffer$EMPTY_N &&
	     blueDMA_m_fpga_rd_reqGen_intermediateBuffer$FULL_N ;
  assign blueDMA_m_fpga_rd_reqGen_intermediateBuffer$DEQ =
	     blueDMA_m_fpga_rd_reqGen_intermediateBuffer$EMPTY_N &&
	     blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$FULL_N ;
  assign blueDMA_m_fpga_rd_reqGen_intermediateBuffer$CLR = 1'b0 ;

  // submodule blueDMA_m_fpga_rd_reqGen_intermediateBuffer2
  assign blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$D_IN =
	     { blueDMA_m_fpga_rd_reqGen_intermediateBuffer$D_OUT[111:100],
	       x__h31026[25:0],
	       blueDMA_m_fpga_rd_reqGen_intermediateBuffer$D_OUT[99:0] } ;
  assign blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$ENQ =
	     blueDMA_m_fpga_rd_reqGen_intermediateBuffer$EMPTY_N &&
	     blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$FULL_N ;
  assign blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$DEQ =
	     blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$EMPTY_N &&
	     blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$FULL_N ;
  assign blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$CLR = 1'b0 ;

  // submodule blueDMA_m_fpga_rd_reqGen_intermediateBuffer3
  assign blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$D_IN =
	     { blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$D_OUT,
	       requests_first__h31128 } ;
  assign blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$ENQ =
	     blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$EMPTY_N &&
	     blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$FULL_N ;
  assign blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$DEQ =
	     WILL_FIRE_RL_blueDMA_m_fpga_rd_reqGen_finishRequest ;
  assign blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$CLR = 1'b0 ;

  // submodule blueDMA_m_fpga_rd_reqGen_outgoingBuffer
  assign blueDMA_m_fpga_rd_reqGen_outgoingBuffer$D_IN =
	     { blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$D_OUT[8:0],
	       x__h31368,
	       request_data_requests_total__h31342,
	       blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$D_OUT[108:45],
	       blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$D_OUT[12:9],
	       1'd1,
	       blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$D_OUT[146:109],
	       blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$D_OUT[50:45],
	       1'd1 } ;
  assign blueDMA_m_fpga_rd_reqGen_outgoingBuffer$ENQ =
	     WILL_FIRE_RL_blueDMA_m_fpga_rd_reqGen_finishRequest ;
  assign blueDMA_m_fpga_rd_reqGen_outgoingBuffer$DEQ =
	     WILL_FIRE_RL_blueDMA_m_fpga_rd_fillBuffer ;
  assign blueDMA_m_fpga_rd_reqGen_outgoingBuffer$CLR = 1'b0 ;

  // submodule blueDMA_m_fpga_wr_beatsPerRequestFIFO
  assign blueDMA_m_fpga_wr_beatsPerRequestFIFO$D_IN =
	     _theResult_____3__h18598 ;
  assign blueDMA_m_fpga_wr_beatsPerRequestFIFO$ENQ =
	     WILL_FIRE_RL_blueDMA_m_fpga_wr_placeRequest ;
  assign blueDMA_m_fpga_wr_beatsPerRequestFIFO$DEQ =
	     WILL_FIRE_RL_blueDMA_m_fpga_wr_forwardData &&
	     blueDMA_m_fpga_wr_beatsThisRequestCntr_61_EQ_b_ETC___d763 ;
  assign blueDMA_m_fpga_wr_beatsPerRequestFIFO$CLR = 1'b0 ;

  // submodule blueDMA_m_fpga_wr_incomingBuffer
  assign blueDMA_m_fpga_wr_incomingBuffer$D_IN =
	     blueDMA_fpga_request_converter_fifo$dD_OUT ;
  assign blueDMA_m_fpga_wr_incomingBuffer$ENQ =
	     blueDMA_fpga_request_converter_fifo$dEMPTY_N &&
	     blueDMA_m_fpga_wr_incomingBuffer$FULL_N ;
  assign blueDMA_m_fpga_wr_incomingBuffer$DEQ =
	     WILL_FIRE_RL_blueDMA_m_fpga_wr_forwardData ;
  assign blueDMA_m_fpga_wr_incomingBuffer$CLR = 1'b0 ;

  // submodule blueDMA_m_fpga_wr_master_wr_in_addr
  assign blueDMA_m_fpga_wr_master_wr_in_addr$D_IN =
	     { 1'd0,
	       blueDMA_m_fpga_wr_task_data_requests_reg[68:5],
	       _theResult_____3__h18598,
	       17'd102784,
	       blueDMA_m_fpga_wr_task_data_requests_reg[4:1],
	       1'd0 } ;
  assign blueDMA_m_fpga_wr_master_wr_in_addr$ENQ =
	     WILL_FIRE_RL_blueDMA_m_fpga_wr_placeRequest ;
  assign blueDMA_m_fpga_wr_master_wr_in_addr$DEQ =
	     blueDMA_m_fpga_wr_master_wr_in_addr$EMPTY_N && m32_axi_awready ;
  assign blueDMA_m_fpga_wr_master_wr_in_addr$CLR = 1'b0 ;

  // submodule blueDMA_m_fpga_wr_master_wr_in_data
  assign blueDMA_m_fpga_wr_master_wr_in_data$D_IN =
	     { blueDMA_m_fpga_wr_incomingBuffer$D_OUT,
	       x_strb__h19096,
	       blueDMA_m_fpga_wr_beatsThisRequestCntr_61_EQ_b_ETC___d763,
	       1'd0 } ;
  assign blueDMA_m_fpga_wr_master_wr_in_data$ENQ =
	     WILL_FIRE_RL_blueDMA_m_fpga_wr_forwardData ;
  assign blueDMA_m_fpga_wr_master_wr_in_data$DEQ =
	     blueDMA_m_fpga_wr_master_wr_in_data$EMPTY_N && m32_axi_wready ;
  assign blueDMA_m_fpga_wr_master_wr_in_data$CLR = 1'b0 ;

  // submodule blueDMA_m_fpga_wr_master_wr_out
  assign blueDMA_m_fpga_wr_master_wr_out$D_IN =
	     blueDMA_m_fpga_wr_master_wr_rinpkg$wget ;
  assign blueDMA_m_fpga_wr_master_wr_out$ENQ =
	     blueDMA_m_fpga_wr_master_wr_out$FULL_N && m32_axi_bvalid ;
  assign blueDMA_m_fpga_wr_master_wr_out$DEQ =
	     blueDMA_m_fpga_wr_master_wr_out$EMPTY_N ;
  assign blueDMA_m_fpga_wr_master_wr_out$CLR = 1'b0 ;

  // submodule blueDMA_m_fpga_wr_reqGen_incomingBuffer
  assign blueDMA_m_fpga_wr_reqGen_incomingBuffer$D_IN =
	     blueDMA_mclk_m_fpga_put_req_wr_ff$dD_OUT ;
  assign blueDMA_m_fpga_wr_reqGen_incomingBuffer$ENQ =
	     blueDMA_mclk_m_fpga_put_req_wr_ff$dEMPTY_N &&
	     blueDMA_m_fpga_wr_reqGen_incomingBuffer$FULL_N ;
  assign blueDMA_m_fpga_wr_reqGen_incomingBuffer$DEQ =
	     blueDMA_m_fpga_wr_reqGen_incomingBuffer$EMPTY_N &&
	     blueDMA_m_fpga_wr_reqGen_intermediateBuffer$FULL_N ;
  assign blueDMA_m_fpga_wr_reqGen_incomingBuffer$CLR = 1'b0 ;

  // submodule blueDMA_m_fpga_wr_reqGen_intermediateBuffer
  assign blueDMA_m_fpga_wr_reqGen_intermediateBuffer$D_IN =
	     { x__h15241[5:0],
	       blueDMA_m_fpga_wr_reqGen_incomingBufferD_OUT__ETC__q7[5:0],
	       blueDMA_m_fpga_wr_reqGen_incomingBuffer$D_OUT } ;
  assign blueDMA_m_fpga_wr_reqGen_intermediateBuffer$ENQ =
	     blueDMA_m_fpga_wr_reqGen_incomingBuffer$EMPTY_N &&
	     blueDMA_m_fpga_wr_reqGen_intermediateBuffer$FULL_N ;
  assign blueDMA_m_fpga_wr_reqGen_intermediateBuffer$DEQ =
	     blueDMA_m_fpga_wr_reqGen_intermediateBuffer$EMPTY_N &&
	     blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$FULL_N ;
  assign blueDMA_m_fpga_wr_reqGen_intermediateBuffer$CLR = 1'b0 ;

  // submodule blueDMA_m_fpga_wr_reqGen_intermediateBuffer2
  assign blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$D_IN =
	     { blueDMA_m_fpga_wr_reqGen_intermediateBuffer$D_OUT[111:100],
	       x__h15415[25:0],
	       blueDMA_m_fpga_wr_reqGen_intermediateBuffer$D_OUT[99:0] } ;
  assign blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$ENQ =
	     blueDMA_m_fpga_wr_reqGen_intermediateBuffer$EMPTY_N &&
	     blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$FULL_N ;
  assign blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$DEQ =
	     blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$EMPTY_N &&
	     blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$FULL_N ;
  assign blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$CLR = 1'b0 ;

  // submodule blueDMA_m_fpga_wr_reqGen_intermediateBuffer3
  assign blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$D_IN =
	     { blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$D_OUT,
	       requests_first__h15517 } ;
  assign blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$ENQ =
	     blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$EMPTY_N &&
	     blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$FULL_N ;
  assign blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$DEQ =
	     WILL_FIRE_RL_blueDMA_m_fpga_wr_reqGen_finishRequest ;
  assign blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$CLR = 1'b0 ;

  // submodule blueDMA_m_fpga_wr_reqGen_outgoingBuffer
  assign blueDMA_m_fpga_wr_reqGen_outgoingBuffer$D_IN =
	     { blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$D_OUT[8:0],
	       x__h15757,
	       request_data_requests_total__h15731,
	       blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$D_OUT[108:45],
	       blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$D_OUT[12:9],
	       1'd1,
	       blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$D_OUT[146:109],
	       blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$D_OUT[50:45],
	       1'd1 } ;
  assign blueDMA_m_fpga_wr_reqGen_outgoingBuffer$ENQ =
	     WILL_FIRE_RL_blueDMA_m_fpga_wr_reqGen_finishRequest ;
  assign blueDMA_m_fpga_wr_reqGen_outgoingBuffer$DEQ =
	     WILL_FIRE_RL_blueDMA_m_fpga_wr_fillBuffer ;
  assign blueDMA_m_fpga_wr_reqGen_outgoingBuffer$CLR = 1'b0 ;

  // submodule blueDMA_m_pcie_rd_master_rd_in
  assign blueDMA_m_pcie_rd_master_rd_in$D_IN =
	     { 1'd0,
	       blueDMA_m_pcie_rd_task_data_requests_reg[68:5],
	       _theResult_____2__h13870,
	       17'd86400,
	       blueDMA_m_pcie_rd_task_data_requests_reg[4:1],
	       1'd0 } ;
  assign blueDMA_m_pcie_rd_master_rd_in$ENQ =
	     WILL_FIRE_RL_blueDMA_m_pcie_rd_placeRequest ;
  assign blueDMA_m_pcie_rd_master_rd_in$DEQ =
	     blueDMA_m_pcie_rd_master_rd_in$EMPTY_N && m64_axi_arready ;
  assign blueDMA_m_pcie_rd_master_rd_in$CLR = 1'b0 ;

  // submodule blueDMA_m_pcie_rd_master_rd_out
  assign blueDMA_m_pcie_rd_master_rd_out$D_IN =
	     blueDMA_m_pcie_rd_master_rd_rinpkg$wget ;
  assign blueDMA_m_pcie_rd_master_rd_out$ENQ =
	     blueDMA_m_pcie_rd_master_rd_out$FULL_N && m64_axi_rvalid ;
  assign blueDMA_m_pcie_rd_master_rd_out$DEQ =
	     WILL_FIRE_RL_blueDMA_m_pcie_rd_forwardData ;
  assign blueDMA_m_pcie_rd_master_rd_out$CLR = 1'b0 ;

  // submodule blueDMA_m_pcie_rd_maxOutstandingFIFO
  assign blueDMA_m_pcie_rd_maxOutstandingFIFO$D_IN = 1'd1 ;
  assign blueDMA_m_pcie_rd_maxOutstandingFIFO$ENQ =
	     WILL_FIRE_RL_blueDMA_m_pcie_rd_placeRequest ;
  assign blueDMA_m_pcie_rd_maxOutstandingFIFO$DEQ =
	     WILL_FIRE_RL_blueDMA_m_pcie_rd_forwardData &&
	     blueDMA_m_pcie_rd_master_rd_out$D_OUT[1] ;
  assign blueDMA_m_pcie_rd_maxOutstandingFIFO$CLR = 1'b0 ;

  // submodule blueDMA_m_pcie_rd_outgoingBuffer
  assign blueDMA_m_pcie_rd_outgoingBuffer$D_IN =
	     blueDMA_m_pcie_rd_master_rd_out$D_OUT[259:4] ;
  assign blueDMA_m_pcie_rd_outgoingBuffer$ENQ =
	     WILL_FIRE_RL_blueDMA_m_pcie_rd_forwardData ;
  assign blueDMA_m_pcie_rd_outgoingBuffer$DEQ =
	     WILL_FIRE_RL_blueDMA_3_mkConnectionGetPut ;
  assign blueDMA_m_pcie_rd_outgoingBuffer$CLR = 1'b0 ;

  // submodule blueDMA_m_pcie_rd_reqGen_incomingBuffer
  assign blueDMA_m_pcie_rd_reqGen_incomingBuffer$D_IN =
	     blueDMA_mclk_m_pcie_put_req_rd_ff$dD_OUT ;
  assign blueDMA_m_pcie_rd_reqGen_incomingBuffer$ENQ =
	     blueDMA_mclk_m_pcie_put_req_rd_ff$dEMPTY_N &&
	     blueDMA_m_pcie_rd_reqGen_incomingBuffer$FULL_N ;
  assign blueDMA_m_pcie_rd_reqGen_incomingBuffer$DEQ =
	     blueDMA_m_pcie_rd_reqGen_incomingBuffer$EMPTY_N &&
	     blueDMA_m_pcie_rd_reqGen_intermediateBuffer$FULL_N ;
  assign blueDMA_m_pcie_rd_reqGen_incomingBuffer$CLR = 1'b0 ;

  // submodule blueDMA_m_pcie_rd_reqGen_intermediateBuffer
  assign blueDMA_m_pcie_rd_reqGen_intermediateBuffer$D_IN =
	     { x__h11179[4:0],
	       blueDMA_m_pcie_rd_reqGen_incomingBufferD_OUT__ETC__q8[4:0],
	       blueDMA_m_pcie_rd_reqGen_incomingBuffer$D_OUT } ;
  assign blueDMA_m_pcie_rd_reqGen_intermediateBuffer$ENQ =
	     blueDMA_m_pcie_rd_reqGen_incomingBuffer$EMPTY_N &&
	     blueDMA_m_pcie_rd_reqGen_intermediateBuffer$FULL_N ;
  assign blueDMA_m_pcie_rd_reqGen_intermediateBuffer$DEQ =
	     blueDMA_m_pcie_rd_reqGen_intermediateBuffer$EMPTY_N &&
	     blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$FULL_N ;
  assign blueDMA_m_pcie_rd_reqGen_intermediateBuffer$CLR = 1'b0 ;

  // submodule blueDMA_m_pcie_rd_reqGen_intermediateBuffer2
  assign blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$D_IN =
	     { blueDMA_m_pcie_rd_reqGen_intermediateBuffer$D_OUT[109:100],
	       x__h11353[26:0],
	       blueDMA_m_pcie_rd_reqGen_intermediateBuffer$D_OUT[99:0] } ;
  assign blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$ENQ =
	     blueDMA_m_pcie_rd_reqGen_intermediateBuffer$EMPTY_N &&
	     blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$FULL_N ;
  assign blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$DEQ =
	     blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$EMPTY_N &&
	     blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$FULL_N ;
  assign blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$CLR = 1'b0 ;

  // submodule blueDMA_m_pcie_rd_reqGen_intermediateBuffer3
  assign blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$D_IN =
	     { blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$D_OUT,
	       requests_first__h11455 } ;
  assign blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$ENQ =
	     blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$EMPTY_N &&
	     blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$FULL_N ;
  assign blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$DEQ =
	     WILL_FIRE_RL_blueDMA_m_pcie_rd_reqGen_finishRequest ;
  assign blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$CLR = 1'b0 ;

  // submodule blueDMA_m_pcie_rd_reqGen_outgoingBuffer
  assign blueDMA_m_pcie_rd_reqGen_outgoingBuffer$D_IN =
	     { blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$D_OUT[8:0],
	       x__h11695,
	       request_data_requests_total__h11669,
	       blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$D_OUT[108:45],
	       blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$D_OUT[12:9],
	       1'd1,
	       blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$D_OUT[145:109],
	       blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$D_OUT[49:45],
	       1'd1 } ;
  assign blueDMA_m_pcie_rd_reqGen_outgoingBuffer$ENQ =
	     WILL_FIRE_RL_blueDMA_m_pcie_rd_reqGen_finishRequest ;
  assign blueDMA_m_pcie_rd_reqGen_outgoingBuffer$DEQ =
	     WILL_FIRE_RL_blueDMA_m_pcie_rd_fillBuffer ;
  assign blueDMA_m_pcie_rd_reqGen_outgoingBuffer$CLR = 1'b0 ;

  // submodule blueDMA_m_pcie_wr_beatsPerRequestFIFO
  assign blueDMA_m_pcie_wr_beatsPerRequestFIFO$D_IN =
	     _theResult_____3__h4333 ;
  assign blueDMA_m_pcie_wr_beatsPerRequestFIFO$ENQ =
	     WILL_FIRE_RL_blueDMA_m_pcie_wr_placeRequest ;
  assign blueDMA_m_pcie_wr_beatsPerRequestFIFO$DEQ =
	     WILL_FIRE_RL_blueDMA_m_pcie_wr_forwardData &&
	     blueDMA_m_pcie_wr_beatsThisRequestCntr_94_EQ_b_ETC___d196 ;
  assign blueDMA_m_pcie_wr_beatsPerRequestFIFO$CLR = 1'b0 ;

  // submodule blueDMA_m_pcie_wr_incomingBuffer
  always@(blueDMA_readConverter_wordInCntr or blueDMA_readConverter_buffer)
  begin
    case (blueDMA_readConverter_wordInCntr)
      1'd0:
	  blueDMA_m_pcie_wr_incomingBuffer$D_IN =
	      blueDMA_readConverter_buffer[255:0];
      1'd1:
	  blueDMA_m_pcie_wr_incomingBuffer$D_IN =
	      blueDMA_readConverter_buffer[511:256];
    endcase
  end
  assign blueDMA_m_pcie_wr_incomingBuffer$ENQ =
	     WILL_FIRE_RL_blueDMA_2_mkConnectionGetPut ;
  assign blueDMA_m_pcie_wr_incomingBuffer$DEQ =
	     WILL_FIRE_RL_blueDMA_m_pcie_wr_forwardData ;
  assign blueDMA_m_pcie_wr_incomingBuffer$CLR = 1'b0 ;

  // submodule blueDMA_m_pcie_wr_master_wr_in_addr
  assign blueDMA_m_pcie_wr_master_wr_in_addr$D_IN =
	     { 1'd0,
	       blueDMA_m_pcie_wr_task_data_requests_reg[68:5],
	       _theResult_____3__h4333,
	       17'd86400,
	       blueDMA_m_pcie_wr_task_data_requests_reg[4:1],
	       1'd0 } ;
  assign blueDMA_m_pcie_wr_master_wr_in_addr$ENQ =
	     WILL_FIRE_RL_blueDMA_m_pcie_wr_placeRequest ;
  assign blueDMA_m_pcie_wr_master_wr_in_addr$DEQ =
	     blueDMA_m_pcie_wr_master_wr_in_addr$EMPTY_N && m64_axi_awready ;
  assign blueDMA_m_pcie_wr_master_wr_in_addr$CLR = 1'b0 ;

  // submodule blueDMA_m_pcie_wr_master_wr_in_data
  assign blueDMA_m_pcie_wr_master_wr_in_data$D_IN =
	     { blueDMA_m_pcie_wr_incomingBuffer$D_OUT,
	       x_strb__h4831,
	       blueDMA_m_pcie_wr_beatsThisRequestCntr_94_EQ_b_ETC___d196,
	       1'd0 } ;
  assign blueDMA_m_pcie_wr_master_wr_in_data$ENQ =
	     WILL_FIRE_RL_blueDMA_m_pcie_wr_forwardData ;
  assign blueDMA_m_pcie_wr_master_wr_in_data$DEQ =
	     blueDMA_m_pcie_wr_master_wr_in_data$EMPTY_N && m64_axi_wready ;
  assign blueDMA_m_pcie_wr_master_wr_in_data$CLR = 1'b0 ;

  // submodule blueDMA_m_pcie_wr_master_wr_out
  assign blueDMA_m_pcie_wr_master_wr_out$D_IN =
	     blueDMA_m_pcie_wr_master_wr_rinpkg$wget ;
  assign blueDMA_m_pcie_wr_master_wr_out$ENQ =
	     blueDMA_m_pcie_wr_master_wr_out$FULL_N && m64_axi_bvalid ;
  assign blueDMA_m_pcie_wr_master_wr_out$DEQ =
	     blueDMA_m_pcie_wr_master_wr_out$EMPTY_N ;
  assign blueDMA_m_pcie_wr_master_wr_out$CLR = 1'b0 ;

  // submodule blueDMA_m_pcie_wr_reqGen_incomingBuffer
  assign blueDMA_m_pcie_wr_reqGen_incomingBuffer$D_IN =
	     blueDMA_mclk_m_pcie_put_req_wr_ff$dD_OUT ;
  assign blueDMA_m_pcie_wr_reqGen_incomingBuffer$ENQ =
	     blueDMA_mclk_m_pcie_put_req_wr_ff$dEMPTY_N &&
	     blueDMA_m_pcie_wr_reqGen_incomingBuffer$FULL_N ;
  assign blueDMA_m_pcie_wr_reqGen_incomingBuffer$DEQ =
	     blueDMA_m_pcie_wr_reqGen_incomingBuffer$EMPTY_N &&
	     blueDMA_m_pcie_wr_reqGen_intermediateBuffer$FULL_N ;
  assign blueDMA_m_pcie_wr_reqGen_incomingBuffer$CLR = 1'b0 ;

  // submodule blueDMA_m_pcie_wr_reqGen_intermediateBuffer
  assign blueDMA_m_pcie_wr_reqGen_intermediateBuffer$D_IN =
	     { x__h951[4:0],
	       blueDMA_m_pcie_wr_reqGen_incomingBufferD_OUT__ETC__q9[4:0],
	       blueDMA_m_pcie_wr_reqGen_incomingBuffer$D_OUT } ;
  assign blueDMA_m_pcie_wr_reqGen_intermediateBuffer$ENQ =
	     blueDMA_m_pcie_wr_reqGen_incomingBuffer$EMPTY_N &&
	     blueDMA_m_pcie_wr_reqGen_intermediateBuffer$FULL_N ;
  assign blueDMA_m_pcie_wr_reqGen_intermediateBuffer$DEQ =
	     blueDMA_m_pcie_wr_reqGen_intermediateBuffer$EMPTY_N &&
	     blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$FULL_N ;
  assign blueDMA_m_pcie_wr_reqGen_intermediateBuffer$CLR = 1'b0 ;

  // submodule blueDMA_m_pcie_wr_reqGen_intermediateBuffer2
  assign blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$D_IN =
	     { blueDMA_m_pcie_wr_reqGen_intermediateBuffer$D_OUT[109:100],
	       x__h1125[26:0],
	       blueDMA_m_pcie_wr_reqGen_intermediateBuffer$D_OUT[99:0] } ;
  assign blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$ENQ =
	     blueDMA_m_pcie_wr_reqGen_intermediateBuffer$EMPTY_N &&
	     blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$FULL_N ;
  assign blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$DEQ =
	     blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$EMPTY_N &&
	     blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$FULL_N ;
  assign blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$CLR = 1'b0 ;

  // submodule blueDMA_m_pcie_wr_reqGen_intermediateBuffer3
  assign blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$D_IN =
	     { blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$D_OUT,
	       requests_first__h1227 } ;
  assign blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$ENQ =
	     blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$EMPTY_N &&
	     blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$FULL_N ;
  assign blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$DEQ =
	     WILL_FIRE_RL_blueDMA_m_pcie_wr_reqGen_finishRequest ;
  assign blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$CLR = 1'b0 ;

  // submodule blueDMA_m_pcie_wr_reqGen_outgoingBuffer
  assign blueDMA_m_pcie_wr_reqGen_outgoingBuffer$D_IN =
	     { blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$D_OUT[8:0],
	       x__h1467,
	       request_data_requests_total__h1441,
	       blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$D_OUT[108:45],
	       blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$D_OUT[12:9],
	       1'd1,
	       blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$D_OUT[145:109],
	       blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$D_OUT[49:45],
	       1'd1 } ;
  assign blueDMA_m_pcie_wr_reqGen_outgoingBuffer$ENQ =
	     WILL_FIRE_RL_blueDMA_m_pcie_wr_reqGen_finishRequest ;
  assign blueDMA_m_pcie_wr_reqGen_outgoingBuffer$DEQ =
	     WILL_FIRE_RL_blueDMA_m_pcie_wr_fillBuffer ;
  assign blueDMA_m_pcie_wr_reqGen_outgoingBuffer$CLR = 1'b0 ;

  // submodule blueDMA_mclk_m_fpga_put_req_rd_ff
  assign blueDMA_mclk_m_fpga_put_req_rd_ff$sD_IN =
	     { blueDMA_readIn_rv[95:0], 4'd0 } ;
  assign blueDMA_mclk_m_fpga_put_req_rd_ff$sENQ =
	     WILL_FIRE_RL_blueDMA_handleRead ;
  assign blueDMA_mclk_m_fpga_put_req_rd_ff$dDEQ =
	     blueDMA_mclk_m_fpga_put_req_rd_ff$dEMPTY_N &&
	     blueDMA_m_fpga_rd_reqGen_incomingBuffer$FULL_N ;

  // submodule blueDMA_mclk_m_fpga_put_req_wr_ff
  assign blueDMA_mclk_m_fpga_put_req_wr_ff$sD_IN =
	     { blueDMA_writeIn_rv[95:0], 4'd0 } ;
  assign blueDMA_mclk_m_fpga_put_req_wr_ff$sENQ =
	     WILL_FIRE_RL_blueDMA_handleWrite ;
  assign blueDMA_mclk_m_fpga_put_req_wr_ff$dDEQ =
	     blueDMA_mclk_m_fpga_put_req_wr_ff$dEMPTY_N &&
	     blueDMA_m_fpga_wr_reqGen_incomingBuffer$FULL_N ;

  // submodule blueDMA_mclk_m_pcie_put_req_rd_ff
  assign blueDMA_mclk_m_pcie_put_req_rd_ff$sD_IN =
	     { blueDMA_writeIn_rv[159:96], blueDMA_writeIn_rv[31:0], 4'd0 } ;
  assign blueDMA_mclk_m_pcie_put_req_rd_ff$sENQ =
	     WILL_FIRE_RL_blueDMA_handleWrite ;
  assign blueDMA_mclk_m_pcie_put_req_rd_ff$dDEQ =
	     blueDMA_mclk_m_pcie_put_req_rd_ff$dEMPTY_N &&
	     blueDMA_m_pcie_rd_reqGen_incomingBuffer$FULL_N ;

  // submodule blueDMA_mclk_m_pcie_put_req_wr_ff
  assign blueDMA_mclk_m_pcie_put_req_wr_ff$sD_IN =
	     { blueDMA_readIn_rv[159:96], blueDMA_readIn_rv[31:0], 4'd0 } ;
  assign blueDMA_mclk_m_pcie_put_req_wr_ff$sENQ =
	     WILL_FIRE_RL_blueDMA_handleRead ;
  assign blueDMA_mclk_m_pcie_put_req_wr_ff$dDEQ =
	     blueDMA_mclk_m_pcie_put_req_wr_ff$dEMPTY_N &&
	     blueDMA_m_pcie_wr_reqGen_incomingBuffer$FULL_N ;

  // submodule blueDMA_pcieDone
  assign blueDMA_pcieDone$sD_IN = 1'd1 ;
  assign blueDMA_pcieDone$sENQ =
	     blueDMA_pcieDone$sFULL_N &&
	     blueDMA_pcieLastCycle_812_AND_blueDMA_m_pcie_r_ETC___d1814 ;
  assign blueDMA_pcieDone$dDEQ = WILL_FIRE_RL_blueDMA_setInterrupt ;

  // submodule blueDMA_readConvBTT_ff
  assign blueDMA_readConvBTT_ff$sD_IN =
	     { btt__h98960, blueDMA_readIn_rv[37] } ;
  assign blueDMA_readConvBTT_ff$sENQ = WILL_FIRE_RL_blueDMA_handleRead ;
  assign blueDMA_readConvBTT_ff$dDEQ = blueDMA_readConvBTT_ff$dEMPTY_N ;

  // submodule blueDMA_s_config_readSlave_in
  assign blueDMA_s_config_readSlave_in$D_IN = { S_AXI_araddr, S_AXI_arprot } ;
  assign blueDMA_s_config_readSlave_in$ENQ =
	     blueDMA_s_config_readSlave_in$FULL_N && S_AXI_arvalid ;
  assign blueDMA_s_config_readSlave_in$DEQ =
	     WILL_FIRE_RL_blueDMA_s_config_axiReadFallback ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_4 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_3 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_2 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_1 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial ;
  assign blueDMA_s_config_readSlave_in$CLR = 1'b0 ;

  // submodule blueDMA_s_config_readSlave_out
  always@(WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial or
	  MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_1 or
	  WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_1 or
	  MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_2 or
	  WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_2 or
	  MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_3 or
	  WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_3 or
	  MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_4 or
	  WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_4 or
	  MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_5 or
	  WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5 or
	  MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_6 or
	  WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6 or
	  MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_7 or
	  WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 or
	  MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_8 or
	  WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 or
	  MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_9 or
	  WILL_FIRE_RL_blueDMA_s_config_axiReadFallback)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial:
	  blueDMA_s_config_readSlave_out$D_IN =
	      MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_1;
      WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_1:
	  blueDMA_s_config_readSlave_out$D_IN =
	      MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_2;
      WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_2:
	  blueDMA_s_config_readSlave_out$D_IN =
	      MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_3;
      WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_3:
	  blueDMA_s_config_readSlave_out$D_IN =
	      MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_4;
      WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_4:
	  blueDMA_s_config_readSlave_out$D_IN =
	      MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_5;
      WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5:
	  blueDMA_s_config_readSlave_out$D_IN =
	      MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_6;
      WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6:
	  blueDMA_s_config_readSlave_out$D_IN =
	      MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_7;
      WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7:
	  blueDMA_s_config_readSlave_out$D_IN =
	      MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_8;
      WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8:
	  blueDMA_s_config_readSlave_out$D_IN =
	      MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_9;
      WILL_FIRE_RL_blueDMA_s_config_axiReadFallback:
	  blueDMA_s_config_readSlave_out$D_IN = 66'd0;
      default: blueDMA_s_config_readSlave_out$D_IN =
		   66'h2AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign blueDMA_s_config_readSlave_out$ENQ =
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_1 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_2 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_3 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_4 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadFallback ;
  assign blueDMA_s_config_readSlave_out$DEQ =
	     blueDMA_s_config_readSlave_out$EMPTY_N && S_AXI_rready ;
  assign blueDMA_s_config_readSlave_out$CLR = 1'b0 ;

  // submodule blueDMA_s_config_writeSlave_in
  assign blueDMA_s_config_writeSlave_in$D_IN =
	     { blueDMA_s_config_writeSlave_addrIn_rv$port1__read[66:3],
	       blueDMA_s_config_writeSlave_dataIn_rv$port1__read[71:0],
	       blueDMA_s_config_writeSlave_addrIn_rv$port1__read[2:0] } ;
  assign blueDMA_s_config_writeSlave_in$ENQ =
	     blueDMA_s_config_writeSlave_addrIn_rv$port1__read[67] &&
	     blueDMA_s_config_writeSlave_dataIn_rv$port1__read[72] &&
	     blueDMA_s_config_writeSlave_in$FULL_N ;
  assign blueDMA_s_config_writeSlave_in$DEQ =
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2 ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1 ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteFallback ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial ;
  assign blueDMA_s_config_writeSlave_in$CLR = 1'b0 ;

  // submodule blueDMA_s_config_writeSlave_out
  assign blueDMA_s_config_writeSlave_out$D_IN = 2'd0 ;
  assign blueDMA_s_config_writeSlave_out$ENQ =
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2 ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1 ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteFallback ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial ;
  assign blueDMA_s_config_writeSlave_out$DEQ =
	     blueDMA_s_config_writeSlave_out$EMPTY_N && S_AXI_bready ;
  assign blueDMA_s_config_writeSlave_out$CLR = 1'b0 ;

  // submodule blueDMA_writeConvBTT_ff
  assign blueDMA_writeConvBTT_ff$sD_IN =
	     { btt__h142114, blueDMA_writeIn_rv[37] } ;
  assign blueDMA_writeConvBTT_ff$sENQ = WILL_FIRE_RL_blueDMA_handleWrite ;
  assign blueDMA_writeConvBTT_ff$dDEQ = blueDMA_writeConvBTT_ff$dEMPTY_N ;

  // submodule blueDMA_writeConverter_dataSync
  assign blueDMA_writeConverter_dataSync$D_IN =
	     { (blueDMA_writeConverter_wordInCntr == 2'd1) ?
		 blueDMA_m_pcie_rd_outgoingBuffer$D_OUT :
		 256'd0,
	       (blueDMA_writeConverter_wordInCntr == 2'd0) ?
		 blueDMA_m_pcie_rd_outgoingBuffer$D_OUT :
		 blueDMA_writeConverter_buffer_0 } ;
  assign blueDMA_writeConverter_dataSync$ENQ =
	     WILL_FIRE_RL_blueDMA_3_mkConnectionGetPut &&
	     (blueDMA_writeConverter_wordInCntr == 2'd1 ||
	      blueDMA_writeConverter_wordOutCntr == 27'd1) ;
  assign blueDMA_writeConverter_dataSync$DEQ =
	     blueDMA_fpga_request_converter_fifo$sFULL_N &&
	     blueDMA_writeConverter_dataSync$EMPTY_N ;
  assign blueDMA_writeConverter_dataSync$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_0_CONCAT_blueDMA_readConverter_wordInCntr_E_ETC__q1 =
	     ({ 1'd0, blueDMA_readConverter_wordInCntr } == 2'd1 ||
	      blueDMA_readConverter_byteCntr <= 32'd32) ?
	       2'd0 :
	       { 1'd0, blueDMA_readConverter_wordInCntr } + 2'd1 ;
  assign IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 =
	     (blueDMA_m_fpga_wr_task_data_output_reg[0] &&
	      blueDMA_m_fpga_wr_task_data_output_reg[44:39] != 6'd0) ?
	       endByte___1__h22005 :
	       ((blueDMA_m_fpga_wr_task_data_output_reg[32:7] == 26'd1) ?
		  ((blueDMA_m_fpga_wr_task_data_output_reg[38:33] == 6'd0) ?
		     7'd64 :
		     endByte___1__h22031) :
		  7'd64) ;
  assign IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 =
	     (blueDMA_m_pcie_wr_task_data_output_reg[0] &&
	      blueDMA_m_pcie_wr_task_data_output_reg[42:38] != 5'd0) ?
	       endByte___1__h6332 :
	       ((blueDMA_m_pcie_wr_task_data_output_reg[32:6] == 27'd1) ?
		  ((blueDMA_m_pcie_wr_task_data_output_reg[37:33] == 5'd0) ?
		     6'd32 :
		     endByte___1__h6358) :
		  6'd32) ;
  assign _theResult_____2__h13870 =
	     (blueDMA_m_pcie_rd_task_data_requests_reg[95:69] == 27'd1 &&
	      blueDMA_m_pcie_rd_task_data_requests_reg[104:96] != 9'd0) ?
	       x__h13922[7:0] :
	       ((blueDMA_m_pcie_rd_task_data_requests_reg[0] &&
		 blueDMA_m_pcie_rd_task_data_requests_reg[113:105] != 9'd0) ?
		  x__h13932[7:0] :
		  8'd127) ;
  assign _theResult_____2__h33540 =
	     (blueDMA_m_fpga_rd_task_data_requests_reg[94:69] == 26'd1 &&
	      blueDMA_m_fpga_rd_task_data_requests_reg[103:95] != 9'd0) ?
	       x__h33592[7:0] :
	       ((blueDMA_m_fpga_rd_task_data_requests_reg[0] &&
		 blueDMA_m_fpga_rd_task_data_requests_reg[112:104] != 9'd0) ?
		  x__h33602[7:0] :
		  8'd63) ;
  assign _theResult_____3__h18598 =
	     (blueDMA_m_fpga_wr_task_data_requests_reg[94:69] == 26'd1 &&
	      blueDMA_m_fpga_wr_task_data_requests_reg[103:95] != 9'd0) ?
	       x__h18650[7:0] :
	       ((blueDMA_m_fpga_wr_task_data_requests_reg[0] &&
		 blueDMA_m_fpga_wr_task_data_requests_reg[112:104] != 9'd0) ?
		  x__h18660[7:0] :
		  8'd63) ;
  assign _theResult_____3__h4333 =
	     (blueDMA_m_pcie_wr_task_data_requests_reg[95:69] == 27'd1 &&
	      blueDMA_m_pcie_wr_task_data_requests_reg[104:96] != 9'd0) ?
	       x__h4385[7:0] :
	       ((blueDMA_m_pcie_wr_task_data_requests_reg[0] &&
		 blueDMA_m_pcie_wr_task_data_requests_reg[113:105] != 9'd0) ?
		  x__h4395[7:0] :
		  8'd127) ;
  assign _theResult____h11174 =
	     (blueDMA_m_pcie_rd_reqGen_incomingBuffer$D_OUT[40:36] == 5'd0) ?
	       bytes_first__h11173 :
	       bytes_first___1__h11205 ;
  assign _theResult____h1123 =
	     (blueDMA_m_pcie_wr_reqGen_intermediateBuffer$D_OUT[109:105] ==
	      5'd0) ?
	       transfers_total__h1122 :
	       transfers_total___1__h1131 ;
  assign _theResult____h11351 =
	     (blueDMA_m_pcie_rd_reqGen_intermediateBuffer$D_OUT[109:105] ==
	      5'd0) ?
	       transfers_total__h11350 :
	       transfers_total___1__h11359 ;
  assign _theResult____h11702 =
	     (blueDMA_m_pcie_rd_reqGen_intermediateBuffer3_f_ETC___d445[6:0] ==
	      7'd0) ?
	       requests_total__h11622 :
	       requests_total___1__h11709 ;
  assign _theResult____h1474 =
	     (blueDMA_m_pcie_wr_reqGen_intermediateBuffer3_f_ETC___d73[6:0] ==
	      7'd0) ?
	       requests_total__h1394 :
	       requests_total___1__h1481 ;
  assign _theResult____h15236 =
	     (blueDMA_m_fpga_wr_reqGen_incomingBuffer$D_OUT[41:36] == 6'd0) ?
	       bytes_first__h15235 :
	       bytes_first___1__h15267 ;
  assign _theResult____h15413 =
	     (blueDMA_m_fpga_wr_reqGen_intermediateBuffer$D_OUT[111:106] ==
	      6'd0) ?
	       transfers_total__h15412 :
	       transfers_total___1__h15421 ;
  assign _theResult____h15764 =
	     (blueDMA_m_fpga_wr_reqGen_intermediateBuffer3_f_ETC___d640[5:0] ==
	      6'd0) ?
	       requests_total__h15684 :
	       requests_total___1__h15771 ;
  assign _theResult____h30847 =
	     (blueDMA_m_fpga_rd_reqGen_incomingBuffer$D_OUT[41:36] == 6'd0) ?
	       bytes_first__h30846 :
	       bytes_first___1__h30878 ;
  assign _theResult____h31024 =
	     (blueDMA_m_fpga_rd_reqGen_intermediateBuffer$D_OUT[111:106] ==
	      6'd0) ?
	       transfers_total__h31023 :
	       transfers_total___1__h31032 ;
  assign _theResult____h31375 =
	     (blueDMA_m_fpga_rd_reqGen_intermediateBuffer3_f_ETC___d1156[5:0] ==
	      6'd0) ?
	       requests_total__h31295 :
	       requests_total___1__h31382 ;
  assign _theResult____h946 =
	     (blueDMA_m_pcie_wr_reqGen_incomingBuffer$D_OUT[40:36] == 5'd0) ?
	       bytes_first__h945 :
	       bytes_first___1__h977 ;
  assign addr_last__h11526 =
	     blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$D_OUT[47:36] +
	     y__h11547 ;
  assign addr_last__h11527 = addr_last__h11526 - 12'd1 ;
  assign addr_last__h1298 =
	     blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$D_OUT[47:36] +
	     y__h1319 ;
  assign addr_last__h1299 = addr_last__h1298 - 12'd1 ;
  assign addr_last__h15588 =
	     blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$D_OUT[47:36] +
	     y__h15609 ;
  assign addr_last__h15589 = addr_last__h15588 - 12'd1 ;
  assign addr_last__h31199 =
	     blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$D_OUT[47:36] +
	     y__h31220 ;
  assign addr_last__h31200 = addr_last__h31199 - 12'd1 ;
  assign b__h112387 =
	     blueDMA_byteAlignerWriter_bytes_left_in_buffer$EN_port0__write ?
	       blueDMA_byteAlignerWriter_bytes_left_in_buffer$port0__write_1 :
	       blueDMA_byteAlignerWriter_bytes_left_in_buffer ;
  assign b__h69154 =
	     blueDMA_byteAlignerReader_bytes_left_in_buffer$EN_port0__write ?
	       blueDMA_byteAlignerReader_bytes_left_in_buffer$port0__write_1 :
	       blueDMA_byteAlignerReader_bytes_left_in_buffer ;
  assign barrier_transfers__h11570 = x__h11580[11:0] >> 5 ;
  assign barrier_transfers__h1342 = x__h1352[11:0] >> 5 ;
  assign barrier_transfers__h15632 = x__h15642[11:0] >> 6 ;
  assign barrier_transfers__h31243 = x__h31253[11:0] >> 6 ;
  assign beatsThisRequestCntrT__h18982 =
	     blueDMA_m_fpga_wr_beatsThisRequestCntr + 8'd1 ;
  assign beatsThisRequestCntrT__h4717 =
	     blueDMA_m_pcie_wr_beatsThisRequestCntr + 8'd1 ;
  assign blueDMA_byteAlignerReader_bytes_in_583_ULT_blu_ETC___d1585 =
	     blueDMA_byteAlignerReader_bytes_in <
	     blueDMA_byteAlignerReader_bytes_total ;
  assign blueDMA_byteAlignerReader_bytes_left_in_buffer_ETC___d1600 =
	     blueDMA_byteAlignerReader_bytes_left_in_buffer <
	     blueDMA_byteAlignerReader_bytes_out_needed ;
  assign blueDMA_byteAlignerWriter_bytes_in_709_ULT_blu_ETC___d1711 =
	     blueDMA_byteAlignerWriter_bytes_in <
	     blueDMA_byteAlignerWriter_bytes_total ;
  assign blueDMA_byteAlignerWriter_bytes_left_in_buffer_ETC___d1726 =
	     blueDMA_byteAlignerWriter_bytes_left_in_buffer <
	     blueDMA_byteAlignerWriter_bytes_out_needed ;
  assign blueDMA_fpgaLastCycle_819_AND_blueDMA_m_fpga_r_ETC___d1821 =
	     blueDMA_fpgaLastCycle &&
	     blueDMA_m_fpga_rd_task_data_output_reg[32:7] == 26'd0 &&
	     blueDMA_m_fpga_rd_task_data_requests_reg[94:69] == 26'd0 &&
	     blueDMA_m_fpga_wr_task_data_output_reg[32:7] == 26'd0 &&
	     blueDMA_m_fpga_wr_task_data_requests_reg[94:69] == 26'd0 ;
  assign blueDMA_m_fpga_rd_reqGen_incomingBufferD_OUT__ETC__q6 =
	     blueDMA_m_fpga_rd_reqGen_incomingBuffer$D_OUT[35:4] - y__h30919 ;
  assign blueDMA_m_fpga_rd_reqGen_intermediateBuffer3_f_ETC___d1156 =
	     blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$D_OUT[134:109] -
	     { 17'd0,
	       blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$D_OUT[8:0] } ;
  assign blueDMA_m_fpga_wr_beatsThisRequestCntr_61_EQ_b_ETC___d763 =
	     blueDMA_m_fpga_wr_beatsThisRequestCntr ==
	     blueDMA_m_fpga_wr_beatsPerRequestFIFO$D_OUT ;
  assign blueDMA_m_fpga_wr_reqGen_incomingBufferD_OUT__ETC__q7 =
	     blueDMA_m_fpga_wr_reqGen_incomingBuffer$D_OUT[35:4] - y__h15308 ;
  assign blueDMA_m_fpga_wr_reqGen_intermediateBuffer3_f_ETC___d640 =
	     blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$D_OUT[134:109] -
	     { 17'd0,
	       blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$D_OUT[8:0] } ;
  assign blueDMA_m_pcie_rd_reqGen_incomingBufferD_OUT__ETC__q8 =
	     blueDMA_m_pcie_rd_reqGen_incomingBuffer$D_OUT[35:4] - y__h11246 ;
  assign blueDMA_m_pcie_rd_reqGen_intermediateBuffer3_f_ETC___d445 =
	     blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$D_OUT[135:109] -
	     { 18'd0,
	       blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$D_OUT[8:0] } ;
  assign blueDMA_m_pcie_wr_beatsThisRequestCntr_94_EQ_b_ETC___d196 =
	     blueDMA_m_pcie_wr_beatsThisRequestCntr ==
	     blueDMA_m_pcie_wr_beatsPerRequestFIFO$D_OUT ;
  assign blueDMA_m_pcie_wr_reqGen_incomingBufferD_OUT__ETC__q9 =
	     blueDMA_m_pcie_wr_reqGen_incomingBuffer$D_OUT[35:4] - y__h1018 ;
  assign blueDMA_m_pcie_wr_reqGen_intermediateBuffer3_f_ETC___d73 =
	     blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$D_OUT[135:109] -
	     { 18'd0,
	       blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$D_OUT[8:0] } ;
  assign blueDMA_pc_reqCntr_644_EQ_blueDMA_cycles_betwe_ETC___d1830 =
	     blueDMA_pc_reqCntr == blueDMA_cycles_between_set[11:0] ;
  assign blueDMA_pcieLastCycle_812_AND_blueDMA_m_pcie_r_ETC___d1814 =
	     blueDMA_pcieLastCycle &&
	     blueDMA_m_pcie_rd_task_data_output_reg[32:6] == 27'd0 &&
	     blueDMA_m_pcie_rd_task_data_requests_reg[95:69] == 27'd0 &&
	     blueDMA_m_pcie_wr_task_data_output_reg[32:6] == 27'd0 &&
	     blueDMA_m_pcie_wr_task_data_requests_reg[95:69] == 27'd0 ;
  assign btt__h142114 =
	     blueDMA_writeIn_rv[31:0] + { 27'd0, blueDMA_writeIn_rv[36:32] } ;
  assign btt__h98960 =
	     blueDMA_readIn_rv[31:0] + { 27'd0, blueDMA_readIn_rv[36:32] } ;
  assign burst_length__h11524 =
	     (blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$D_OUT[126:100] <
	      27'd128) ?
	       blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$D_OUT[108:100] :
	       9'd128 ;
  assign burst_length__h1296 =
	     (blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$D_OUT[126:100] <
	      27'd128) ?
	       blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$D_OUT[108:100] :
	       9'd128 ;
  assign burst_length__h15586 =
	     (blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$D_OUT[125:100] <
	      26'd64) ?
	       blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$D_OUT[108:100] :
	       9'd64 ;
  assign burst_length__h31197 =
	     (blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$D_OUT[125:100] <
	      26'd64) ?
	       blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$D_OUT[108:100] :
	       9'd64 ;
  assign bytes_first___1__h11205 = 64'd32 - bytes_first__h11173 ;
  assign bytes_first___1__h15267 = 64'd64 - bytes_first__h15235 ;
  assign bytes_first___1__h30878 = 64'd64 - bytes_first__h30846 ;
  assign bytes_first___1__h977 = 64'd32 - bytes_first__h945 ;
  assign bytes_first__h11173 =
	     { 59'd0, blueDMA_m_pcie_rd_reqGen_incomingBuffer$D_OUT[40:36] } ;
  assign bytes_first__h15235 =
	     { 58'd0, blueDMA_m_fpga_wr_reqGen_incomingBuffer$D_OUT[41:36] } ;
  assign bytes_first__h30846 =
	     { 58'd0, blueDMA_m_fpga_rd_reqGen_incomingBuffer$D_OUT[41:36] } ;
  assign bytes_first__h945 =
	     { 59'd0, blueDMA_m_pcie_wr_reqGen_incomingBuffer$D_OUT[40:36] } ;
  assign endByte___1__h22005 =
	     startByte___1__h22004 +
	     { 1'd0, blueDMA_m_fpga_wr_task_data_output_reg[44:39] } ;
  assign endByte___1__h22031 =
	     { 1'd0, blueDMA_m_fpga_wr_task_data_output_reg[38:33] } ;
  assign endByte___1__h6332 =
	     startByte___1__h6331 +
	     { 1'd0, blueDMA_m_pcie_wr_task_data_output_reg[42:38] } ;
  assign endByte___1__h6358 =
	     { 1'd0, blueDMA_m_pcie_wr_task_data_output_reg[37:33] } ;
  assign request_data_requests_total__h11669 =
	     (blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$D_OUT[8:0] ==
	      9'd0) ?
	       _theResult____h11702 :
	       requests_total__h11706 ;
  assign request_data_requests_total__h1441 =
	     (blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$D_OUT[8:0] ==
	      9'd0) ?
	       _theResult____h1474 :
	       requests_total__h1478 ;
  assign request_data_requests_total__h15731 =
	     (blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$D_OUT[8:0] ==
	      9'd0) ?
	       _theResult____h15764 :
	       requests_total__h15768 ;
  assign request_data_requests_total__h31342 =
	     (blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$D_OUT[8:0] ==
	      9'd0) ?
	       _theResult____h31375 :
	       requests_total__h31379 ;
  assign requests_first__h11455 =
	     (addr_last__h11527 <=
	      blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$D_OUT[47:36]) ?
	       barrier_transfers__h11570[8:0] :
	       9'd0 ;
  assign requests_first__h1227 =
	     (addr_last__h1299 <=
	      blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$D_OUT[47:36]) ?
	       barrier_transfers__h1342[8:0] :
	       9'd0 ;
  assign requests_first__h15517 =
	     (addr_last__h15589 <=
	      blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$D_OUT[47:36]) ?
	       barrier_transfers__h15632[8:0] :
	       9'd0 ;
  assign requests_first__h31128 =
	     (addr_last__h31200 <=
	      blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$D_OUT[47:36]) ?
	       barrier_transfers__h31243[8:0] :
	       9'd0 ;
  assign requests_total___1__h11709 = requests_total__h11622 + 27'd1 ;
  assign requests_total___1__h1481 = requests_total__h1394 + 27'd1 ;
  assign requests_total___1__h15771 = requests_total__h15684 + 26'd1 ;
  assign requests_total___1__h31382 = requests_total__h31295 + 26'd1 ;
  assign requests_total__h11622 =
	     blueDMA_m_pcie_rd_reqGen_intermediateBuffer3_f_ETC___d445 >> 7 ;
  assign requests_total__h11706 = _theResult____h11702 + 27'd1 ;
  assign requests_total__h1394 =
	     blueDMA_m_pcie_wr_reqGen_intermediateBuffer3_f_ETC___d73 >> 7 ;
  assign requests_total__h1478 = _theResult____h1474 + 27'd1 ;
  assign requests_total__h15684 =
	     blueDMA_m_fpga_wr_reqGen_intermediateBuffer3_f_ETC___d640 >> 6 ;
  assign requests_total__h15768 = _theResult____h15764 + 26'd1 ;
  assign requests_total__h31295 =
	     blueDMA_m_fpga_rd_reqGen_intermediateBuffer3_f_ETC___d1156 >> 6 ;
  assign requests_total__h31379 = _theResult____h31375 + 26'd1 ;
  assign startByte___1__h22004 =
	     { 1'd0, blueDMA_m_fpga_wr_task_data_output_reg[6:1] } ;
  assign startByte___1__h6331 =
	     { 1'd0, blueDMA_m_pcie_wr_task_data_output_reg[5:1] } ;
  assign transfers_total___1__h1131 = transfers_total__h1122 + 32'd1 ;
  assign transfers_total___1__h11359 = transfers_total__h11350 + 32'd1 ;
  assign transfers_total___1__h15421 = transfers_total__h15412 + 32'd1 ;
  assign transfers_total___1__h31032 = transfers_total__h31023 + 32'd1 ;
  assign transfers_total__h1122 = (x__h1151 - y__h1152) >> 5 ;
  assign transfers_total__h1128 = _theResult____h1123 + 32'd1 ;
  assign transfers_total__h11350 = (x__h11379 - y__h11380) >> 5 ;
  assign transfers_total__h11356 = _theResult____h11351 + 32'd1 ;
  assign transfers_total__h15412 = (x__h15441 - y__h15442) >> 6 ;
  assign transfers_total__h15418 = _theResult____h15413 + 32'd1 ;
  assign transfers_total__h31023 = (x__h31052 - y__h31053) >> 6 ;
  assign transfers_total__h31029 = _theResult____h31024 + 32'd1 ;
  assign x__h11179 =
	     ({ 32'd0, blueDMA_m_pcie_rd_reqGen_incomingBuffer$D_OUT[35:4] } <
	      _theResult____h11174 ||
	      _theResult____h11174 == 64'd0 &&
	      blueDMA_m_pcie_rd_reqGen_incomingBuffer$D_OUT[35:4] < 32'd32) ?
	       { 32'd0,
		 blueDMA_m_pcie_rd_reqGen_incomingBuffer$D_OUT[35:4] } :
	       _theResult____h11174 ;
  assign x__h1125 =
	     (blueDMA_m_pcie_wr_reqGen_intermediateBuffer$D_OUT[104:100] ==
	      5'd0) ?
	       _theResult____h1123 :
	       transfers_total__h1128 ;
  assign x__h11353 =
	     (blueDMA_m_pcie_rd_reqGen_intermediateBuffer$D_OUT[104:100] ==
	      5'd0) ?
	       _theResult____h11351 :
	       transfers_total__h11356 ;
  assign x__h11379 =
	     blueDMA_m_pcie_rd_reqGen_intermediateBuffer$D_OUT[35:4] -
	     y__h11382 ;
  assign x__h1151 =
	     blueDMA_m_pcie_wr_reqGen_intermediateBuffer$D_OUT[35:4] -
	     y__h1154 ;
  assign x__h11580 =
	     13'd4096 -
	     { 1'd0,
	       blueDMA_m_pcie_rd_reqGen_intermediateBuffer2$D_OUT[47:36] } ;
  assign x__h11695 =
	     { 2'd0,
	       blueDMA_m_pcie_rd_reqGen_intermediateBuffer3_f_ETC___d445[6:0] } ;
  assign x__h1352 =
	     13'd4096 -
	     { 1'd0,
	       blueDMA_m_pcie_wr_reqGen_intermediateBuffer2$D_OUT[47:36] } ;
  assign x__h13922 = blueDMA_m_pcie_rd_task_data_requests_reg[104:96] - 9'd1 ;
  assign x__h13932 =
	     blueDMA_m_pcie_rd_task_data_requests_reg[113:105] - 9'd1 ;
  assign x__h1467 =
	     { 2'd0,
	       blueDMA_m_pcie_wr_reqGen_intermediateBuffer3_f_ETC___d73[6:0] } ;
  assign x__h15241 =
	     ({ 32'd0, blueDMA_m_fpga_wr_reqGen_incomingBuffer$D_OUT[35:4] } <
	      _theResult____h15236 ||
	      _theResult____h15236 == 64'd0 &&
	      blueDMA_m_fpga_wr_reqGen_incomingBuffer$D_OUT[35:4] < 32'd64) ?
	       { 32'd0,
		 blueDMA_m_fpga_wr_reqGen_incomingBuffer$D_OUT[35:4] } :
	       _theResult____h15236 ;
  assign x__h15415 =
	     (blueDMA_m_fpga_wr_reqGen_intermediateBuffer$D_OUT[105:100] ==
	      6'd0) ?
	       _theResult____h15413 :
	       transfers_total__h15418 ;
  assign x__h15441 =
	     blueDMA_m_fpga_wr_reqGen_intermediateBuffer$D_OUT[35:4] -
	     y__h15444 ;
  assign x__h15642 =
	     13'd4096 -
	     { 1'd0,
	       blueDMA_m_fpga_wr_reqGen_intermediateBuffer2$D_OUT[47:36] } ;
  assign x__h15757 =
	     { 3'd0,
	       blueDMA_m_fpga_wr_reqGen_intermediateBuffer3_f_ETC___d640[5:0] } ;
  assign x__h18650 = blueDMA_m_fpga_wr_task_data_requests_reg[103:95] - 9'd1 ;
  assign x__h18660 =
	     blueDMA_m_fpga_wr_task_data_requests_reg[112:104] - 9'd1 ;
  assign x__h21991 =
	     (blueDMA_m_fpga_wr_task_data_output_reg[0] &&
	      blueDMA_m_fpga_wr_task_data_output_reg[44:39] != 6'd0) ?
	       startByte___1__h22004 :
	       7'd0 ;
  assign x__h30852 =
	     ({ 32'd0, blueDMA_m_fpga_rd_reqGen_incomingBuffer$D_OUT[35:4] } <
	      _theResult____h30847 ||
	      _theResult____h30847 == 64'd0 &&
	      blueDMA_m_fpga_rd_reqGen_incomingBuffer$D_OUT[35:4] < 32'd64) ?
	       { 32'd0,
		 blueDMA_m_fpga_rd_reqGen_incomingBuffer$D_OUT[35:4] } :
	       _theResult____h30847 ;
  assign x__h31026 =
	     (blueDMA_m_fpga_rd_reqGen_intermediateBuffer$D_OUT[105:100] ==
	      6'd0) ?
	       _theResult____h31024 :
	       transfers_total__h31029 ;
  assign x__h31052 =
	     blueDMA_m_fpga_rd_reqGen_intermediateBuffer$D_OUT[35:4] -
	     y__h31055 ;
  assign x__h31253 =
	     13'd4096 -
	     { 1'd0,
	       blueDMA_m_fpga_rd_reqGen_intermediateBuffer2$D_OUT[47:36] } ;
  assign x__h31368 =
	     { 3'd0,
	       blueDMA_m_fpga_rd_reqGen_intermediateBuffer3_f_ETC___d1156[5:0] } ;
  assign x__h33592 = blueDMA_m_fpga_rd_task_data_requests_reg[103:95] - 9'd1 ;
  assign x__h33602 =
	     blueDMA_m_fpga_rd_task_data_requests_reg[112:104] - 9'd1 ;
  assign x__h4385 = blueDMA_m_pcie_wr_task_data_requests_reg[104:96] - 9'd1 ;
  assign x__h4395 = blueDMA_m_pcie_wr_task_data_requests_reg[113:105] - 9'd1 ;
  assign x__h6318 =
	     (blueDMA_m_pcie_wr_task_data_output_reg[0] &&
	      blueDMA_m_pcie_wr_task_data_output_reg[42:38] != 5'd0) ?
	       startByte___1__h6331 :
	       6'd0 ;
  assign x__h951 =
	     ({ 32'd0, blueDMA_m_pcie_wr_reqGen_incomingBuffer$D_OUT[35:4] } <
	      _theResult____h946 ||
	      _theResult____h946 == 64'd0 &&
	      blueDMA_m_pcie_wr_reqGen_incomingBuffer$D_OUT[35:4] < 32'd32) ?
	       { 32'd0,
		 blueDMA_m_pcie_wr_reqGen_incomingBuffer$D_OUT[35:4] } :
	       _theResult____h946 ;
  assign x_address_dynamic__h14008 =
	     blueDMA_m_pcie_rd_task_data_requests_reg[37:17] + 21'd1 ;
  assign x_address_dynamic__h18722 =
	     blueDMA_m_fpga_wr_task_data_requests_reg[37:17] + 21'd1 ;
  assign x_address_dynamic__h33678 =
	     blueDMA_m_fpga_rd_task_data_requests_reg[37:17] + 21'd1 ;
  assign x_address_dynamic__h4457 =
	     blueDMA_m_pcie_wr_task_data_requests_reg[37:17] + 21'd1 ;
  assign x_requests_total__h14006 =
	     blueDMA_m_pcie_rd_task_data_requests_reg[95:69] - 27'd1 ;
  assign x_requests_total__h18720 =
	     blueDMA_m_fpga_wr_task_data_requests_reg[94:69] - 26'd1 ;
  assign x_requests_total__h33676 =
	     blueDMA_m_fpga_rd_task_data_requests_reg[94:69] - 26'd1 ;
  assign x_requests_total__h4455 =
	     blueDMA_m_pcie_wr_task_data_requests_reg[95:69] - 27'd1 ;
  assign x_strb__h19096 =
	     { x__h21991 <= 7'd63 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd63,
	       x__h21991 <= 7'd62 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd62,
	       x__h21991 <= 7'd61 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd61,
	       x__h21991 <= 7'd60 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd60,
	       x__h21991 <= 7'd59 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd59,
	       x__h21991 <= 7'd58 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd58,
	       x__h21991 <= 7'd57 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd57,
	       x__h21991 <= 7'd56 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd56,
	       x__h21991 <= 7'd55 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd55,
	       x__h21991 <= 7'd54 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd54,
	       x__h21991 <= 7'd53 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd53,
	       x__h21991 <= 7'd52 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd52,
	       x__h21991 <= 7'd51 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd51,
	       x__h21991 <= 7'd50 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd50,
	       x__h21991 <= 7'd49 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd49,
	       x__h21991 <= 7'd48 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd48,
	       x__h21991 <= 7'd47 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd47,
	       x__h21991 <= 7'd46 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd46,
	       x__h21991 <= 7'd45 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd45,
	       x__h21991 <= 7'd44 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd44,
	       x__h21991 <= 7'd43 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd43,
	       x__h21991 <= 7'd42 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd42,
	       x__h21991 <= 7'd41 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd41,
	       x__h21991 <= 7'd40 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd40,
	       x__h21991 <= 7'd39 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd39,
	       x__h21991 <= 7'd38 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd38,
	       x__h21991 <= 7'd37 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd37,
	       x__h21991 <= 7'd36 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd36,
	       x__h21991 <= 7'd35 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd35,
	       x__h21991 <= 7'd34 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd34,
	       x__h21991 <= 7'd33 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd33,
	       x__h21991 <= 7'd32 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd32,
	       x__h21991 <= 7'd31 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd31,
	       x__h21991 <= 7'd30 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd30,
	       x__h21991 <= 7'd29 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd29,
	       x__h21991 <= 7'd28 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd28,
	       x__h21991 <= 7'd27 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd27,
	       x__h21991 <= 7'd26 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd26,
	       x__h21991 <= 7'd25 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd25,
	       x__h21991 <= 7'd24 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd24,
	       x__h21991 <= 7'd23 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd23,
	       x__h21991 <= 7'd22 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd22,
	       x__h21991 <= 7'd21 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd21,
	       x__h21991 <= 7'd20 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd20,
	       x__h21991 <= 7'd19 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd19,
	       x__h21991 <= 7'd18 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd18,
	       x__h21991 <= 7'd17 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd17,
	       x__h21991 <= 7'd16 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd16,
	       x__h21991 <= 7'd15 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd15,
	       x__h21991 <= 7'd14 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd14,
	       x__h21991 <= 7'd13 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd13,
	       x__h21991 <= 7'd12 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd12,
	       x__h21991 <= 7'd11 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd11,
	       x__h21991 <= 7'd10 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd10,
	       x__h21991 <= 7'd9 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd9,
	       x__h21991 <= 7'd8 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd8,
	       x__h21991 <= 7'd7 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd7,
	       x__h21991 <= 7'd6 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd6,
	       x__h21991 <= 7'd5 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd5,
	       x__h21991 <= 7'd4 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd4,
	       x__h21991 <= 7'd3 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd3,
	       x__h21991 <= 7'd2 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd2,
	       x__h21991 <= 7'd1 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 >
	       7'd1,
	       x__h21991 == 7'd0 &&
	       IF_blueDMA_m_fpga_wr_task_data_output_reg_56_B_ETC___d784 !=
	       7'd0 } ;
  assign x_strb__h4831 =
	     { x__h6318 <= 6'd31 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd31,
	       x__h6318 <= 6'd30 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd30,
	       x__h6318 <= 6'd29 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd29,
	       x__h6318 <= 6'd28 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd28,
	       x__h6318 <= 6'd27 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd27,
	       x__h6318 <= 6'd26 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd26,
	       x__h6318 <= 6'd25 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd25,
	       x__h6318 <= 6'd24 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd24,
	       x__h6318 <= 6'd23 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd23,
	       x__h6318 <= 6'd22 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd22,
	       x__h6318 <= 6'd21 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd21,
	       x__h6318 <= 6'd20 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd20,
	       x__h6318 <= 6'd19 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd19,
	       x__h6318 <= 6'd18 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd18,
	       x__h6318 <= 6'd17 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd17,
	       x__h6318 <= 6'd16 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd16,
	       x__h6318 <= 6'd15 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd15,
	       x__h6318 <= 6'd14 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd14,
	       x__h6318 <= 6'd13 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd13,
	       x__h6318 <= 6'd12 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd12,
	       x__h6318 <= 6'd11 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd11,
	       x__h6318 <= 6'd10 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd10,
	       x__h6318 <= 6'd9 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd9,
	       x__h6318 <= 6'd8 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd8,
	       x__h6318 <= 6'd7 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd7,
	       x__h6318 <= 6'd6 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd6,
	       x__h6318 <= 6'd5 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd5,
	       x__h6318 <= 6'd4 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd4,
	       x__h6318 <= 6'd3 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd3,
	       x__h6318 <= 6'd2 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd2,
	       x__h6318 <= 6'd1 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 >
	       6'd1,
	       x__h6318 == 6'd0 &&
	       IF_blueDMA_m_pcie_wr_task_data_output_reg_89_B_ETC___d217 !=
	       6'd0 } ;
  assign x_transfers_total__h10341 =
	     blueDMA_m_pcie_wr_task_data_output_reg[32:6] - 27'd1 ;
  assign x_transfers_total__h14341 =
	     blueDMA_m_pcie_rd_task_data_output_reg[32:6] - 27'd1 ;
  assign x_transfers_total__h30014 =
	     blueDMA_m_fpga_wr_task_data_output_reg[32:7] - 26'd1 ;
  assign x_transfers_total__h34011 =
	     blueDMA_m_fpga_rd_task_data_output_reg[32:7] - 26'd1 ;
  assign y__h1018 = { 27'd0, x__h951[4:0] } ;
  assign y__h11246 = { 27'd0, x__h11179[4:0] } ;
  assign y__h11380 =
	     { 27'd0,
	       blueDMA_m_pcie_rd_reqGen_intermediateBuffer$D_OUT[104:100] } ;
  assign y__h11382 =
	     { 27'd0,
	       blueDMA_m_pcie_rd_reqGen_intermediateBuffer$D_OUT[109:105] } ;
  assign y__h1152 =
	     { 27'd0,
	       blueDMA_m_pcie_wr_reqGen_intermediateBuffer$D_OUT[104:100] } ;
  assign y__h1154 =
	     { 27'd0,
	       blueDMA_m_pcie_wr_reqGen_intermediateBuffer$D_OUT[109:105] } ;
  assign y__h11547 = { burst_length__h11524[6:0], 5'd0 } ;
  assign y__h1319 = { burst_length__h1296[6:0], 5'd0 } ;
  assign y__h15308 = { 26'd0, x__h15241[5:0] } ;
  assign y__h15442 =
	     { 26'd0,
	       blueDMA_m_fpga_wr_reqGen_intermediateBuffer$D_OUT[105:100] } ;
  assign y__h15444 =
	     { 26'd0,
	       blueDMA_m_fpga_wr_reqGen_intermediateBuffer$D_OUT[111:106] } ;
  assign y__h15609 = { burst_length__h15586[5:0], 6'd0 } ;
  assign y__h30919 = { 26'd0, x__h30852[5:0] } ;
  assign y__h31053 =
	     { 26'd0,
	       blueDMA_m_fpga_rd_reqGen_intermediateBuffer$D_OUT[105:100] } ;
  assign y__h31055 =
	     { 26'd0,
	       blueDMA_m_fpga_rd_reqGen_intermediateBuffer$D_OUT[111:106] } ;
  assign y__h31220 = { burst_length__h31197[5:0], 6'd0 } ;
  always@(blueDMA_m_pcie_wr_master_wr_wawcache$wget)
  begin
    case (blueDMA_m_pcie_wr_master_wr_wawcache$wget)
      4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  CASE_blueDMA_m_pcie_wr_master_wr_wawcachewget_ETC__q2 =
	      blueDMA_m_pcie_wr_master_wr_wawcache$wget;
      default: CASE_blueDMA_m_pcie_wr_master_wr_wawcachewget_ETC__q2 = 4'd15;
    endcase
  end
  always@(blueDMA_m_pcie_rd_master_rd_warcache$wget)
  begin
    case (blueDMA_m_pcie_rd_master_rd_warcache$wget)
      4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  CASE_blueDMA_m_pcie_rd_master_rd_warcachewget_ETC__q3 =
	      blueDMA_m_pcie_rd_master_rd_warcache$wget;
      default: CASE_blueDMA_m_pcie_rd_master_rd_warcachewget_ETC__q3 = 4'd11;
    endcase
  end
  always@(blueDMA_m_fpga_wr_master_wr_wawcache$wget)
  begin
    case (blueDMA_m_fpga_wr_master_wr_wawcache$wget)
      4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  CASE_blueDMA_m_fpga_wr_master_wr_wawcachewget_ETC__q4 =
	      blueDMA_m_fpga_wr_master_wr_wawcache$wget;
      default: CASE_blueDMA_m_fpga_wr_master_wr_wawcachewget_ETC__q4 = 4'd15;
    endcase
  end
  always@(blueDMA_m_fpga_rd_master_rd_warcache$wget)
  begin
    case (blueDMA_m_fpga_rd_master_rd_warcache$wget)
      4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  CASE_blueDMA_m_fpga_rd_master_rd_warcachewget_ETC__q5 =
	      blueDMA_m_fpga_rd_master_rd_warcache$wget;
      default: CASE_blueDMA_m_fpga_rd_master_rd_warcachewget_ETC__q5 = 4'd11;
    endcase
  end

  // handling of inlined registers

  always@(posedge m32_axi_aclk)
  begin
    if (m32_axi_aresetn == `BSV_RESET_VALUE)
      begin
        blueDMA_fpgaLastCycle <= `BSV_ASSIGNMENT_DELAY 1'd0;
	blueDMA_m_fpga_rd_task_data_output_reg <= `BSV_ASSIGNMENT_DELAY 45'd0;
	blueDMA_m_fpga_rd_task_data_requests_reg <= `BSV_ASSIGNMENT_DELAY
	    113'd0;
	blueDMA_m_fpga_wr_beatsThisRequestCntr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	blueDMA_m_fpga_wr_task_data_output_reg <= `BSV_ASSIGNMENT_DELAY 45'd0;
	blueDMA_m_fpga_wr_task_data_requests_reg <= `BSV_ASSIGNMENT_DELAY
	    113'd0;
      end
    else
      begin
        if (blueDMA_fpgaLastCycle$EN)
	  blueDMA_fpgaLastCycle <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_fpgaLastCycle$D_IN;
	if (blueDMA_m_fpga_rd_task_data_output_reg$EN)
	  blueDMA_m_fpga_rd_task_data_output_reg <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_m_fpga_rd_task_data_output_reg$D_IN;
	if (blueDMA_m_fpga_rd_task_data_requests_reg$EN)
	  blueDMA_m_fpga_rd_task_data_requests_reg <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_m_fpga_rd_task_data_requests_reg$D_IN;
	if (blueDMA_m_fpga_wr_beatsThisRequestCntr$EN)
	  blueDMA_m_fpga_wr_beatsThisRequestCntr <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_m_fpga_wr_beatsThisRequestCntr$D_IN;
	if (blueDMA_m_fpga_wr_task_data_output_reg$EN)
	  blueDMA_m_fpga_wr_task_data_output_reg <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_m_fpga_wr_task_data_output_reg$D_IN;
	if (blueDMA_m_fpga_wr_task_data_requests_reg$EN)
	  blueDMA_m_fpga_wr_task_data_requests_reg <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_m_fpga_wr_task_data_requests_reg$D_IN;
      end
  end

  always@(posedge m64_axi_aclk)
  begin
    if (m64_axi_aresetn == `BSV_RESET_VALUE)
      begin
        blueDMA_byteAlignerReader_fetchedDatum <= `BSV_ASSIGNMENT_DELAY 1'd0;
	blueDMA_byteAlignerWriter_fetchedDatum <= `BSV_ASSIGNMENT_DELAY 1'd0;
	blueDMA_m_pcie_rd_task_data_output_reg <= `BSV_ASSIGNMENT_DELAY 43'd0;
	blueDMA_m_pcie_rd_task_data_requests_reg <= `BSV_ASSIGNMENT_DELAY
	    114'd0;
	blueDMA_m_pcie_wr_beatsThisRequestCntr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	blueDMA_m_pcie_wr_task_data_output_reg <= `BSV_ASSIGNMENT_DELAY 43'd0;
	blueDMA_m_pcie_wr_task_data_requests_reg <= `BSV_ASSIGNMENT_DELAY
	    114'd0;
	blueDMA_pcieLastCycle <= `BSV_ASSIGNMENT_DELAY 1'd0;
	blueDMA_readConverter_bufferEmpty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	blueDMA_readConverter_byteCntr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	blueDMA_readConverter_wordInCntr <= `BSV_ASSIGNMENT_DELAY 1'd0;
	blueDMA_writeConverter_buffer_0 <= `BSV_ASSIGNMENT_DELAY 256'd0;
	blueDMA_writeConverter_wordInCntr <= `BSV_ASSIGNMENT_DELAY 2'd0;
	blueDMA_writeConverter_wordOutCntr <= `BSV_ASSIGNMENT_DELAY 27'd0;
      end
    else
      begin
        if (blueDMA_byteAlignerReader_fetchedDatum$EN)
	  blueDMA_byteAlignerReader_fetchedDatum <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_byteAlignerReader_fetchedDatum$D_IN;
	if (blueDMA_byteAlignerWriter_fetchedDatum$EN)
	  blueDMA_byteAlignerWriter_fetchedDatum <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_byteAlignerWriter_fetchedDatum$D_IN;
	if (blueDMA_m_pcie_rd_task_data_output_reg$EN)
	  blueDMA_m_pcie_rd_task_data_output_reg <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_m_pcie_rd_task_data_output_reg$D_IN;
	if (blueDMA_m_pcie_rd_task_data_requests_reg$EN)
	  blueDMA_m_pcie_rd_task_data_requests_reg <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_m_pcie_rd_task_data_requests_reg$D_IN;
	if (blueDMA_m_pcie_wr_beatsThisRequestCntr$EN)
	  blueDMA_m_pcie_wr_beatsThisRequestCntr <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_m_pcie_wr_beatsThisRequestCntr$D_IN;
	if (blueDMA_m_pcie_wr_task_data_output_reg$EN)
	  blueDMA_m_pcie_wr_task_data_output_reg <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_m_pcie_wr_task_data_output_reg$D_IN;
	if (blueDMA_m_pcie_wr_task_data_requests_reg$EN)
	  blueDMA_m_pcie_wr_task_data_requests_reg <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_m_pcie_wr_task_data_requests_reg$D_IN;
	if (blueDMA_pcieLastCycle$EN)
	  blueDMA_pcieLastCycle <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_pcieLastCycle$D_IN;
	if (blueDMA_readConverter_bufferEmpty$EN)
	  blueDMA_readConverter_bufferEmpty <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_readConverter_bufferEmpty$D_IN;
	if (blueDMA_readConverter_byteCntr$EN)
	  blueDMA_readConverter_byteCntr <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_readConverter_byteCntr$D_IN;
	if (blueDMA_readConverter_wordInCntr$EN)
	  blueDMA_readConverter_wordInCntr <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_readConverter_wordInCntr$D_IN;
	if (blueDMA_writeConverter_buffer_0$EN)
	  blueDMA_writeConverter_buffer_0 <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_writeConverter_buffer_0$D_IN;
	if (blueDMA_writeConverter_wordInCntr$EN)
	  blueDMA_writeConverter_wordInCntr <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_writeConverter_wordInCntr$D_IN;
	if (blueDMA_writeConverter_wordOutCntr$EN)
	  blueDMA_writeConverter_wordOutCntr <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_writeConverter_wordOutCntr$D_IN;
      end
    if (blueDMA_byteAlignerReader_buffer$EN)
      blueDMA_byteAlignerReader_buffer <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_byteAlignerReader_buffer$D_IN;
    if (blueDMA_byteAlignerReader_bytes_in$EN)
      blueDMA_byteAlignerReader_bytes_in <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_byteAlignerReader_bytes_in$D_IN;
    if (blueDMA_byteAlignerReader_bytes_left_in_buffer$EN)
      blueDMA_byteAlignerReader_bytes_left_in_buffer <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_byteAlignerReader_bytes_left_in_buffer$D_IN;
    if (blueDMA_byteAlignerReader_bytes_out$EN)
      blueDMA_byteAlignerReader_bytes_out <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_byteAlignerReader_bytes_out$D_IN;
    if (blueDMA_byteAlignerReader_bytes_out_needed$EN)
      blueDMA_byteAlignerReader_bytes_out_needed <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_byteAlignerReader_bytes_out_needed$D_IN;
    if (blueDMA_byteAlignerReader_bytes_total$EN)
      blueDMA_byteAlignerReader_bytes_total <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_byteAlignerReader_bytes_total$D_IN;
    if (blueDMA_byteAlignerWriter_buffer$EN)
      blueDMA_byteAlignerWriter_buffer <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_byteAlignerWriter_buffer$D_IN;
    if (blueDMA_byteAlignerWriter_bytes_in$EN)
      blueDMA_byteAlignerWriter_bytes_in <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_byteAlignerWriter_bytes_in$D_IN;
    if (blueDMA_byteAlignerWriter_bytes_left_in_buffer$EN)
      blueDMA_byteAlignerWriter_bytes_left_in_buffer <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_byteAlignerWriter_bytes_left_in_buffer$D_IN;
    if (blueDMA_byteAlignerWriter_bytes_out$EN)
      blueDMA_byteAlignerWriter_bytes_out <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_byteAlignerWriter_bytes_out$D_IN;
    if (blueDMA_byteAlignerWriter_bytes_out_needed$EN)
      blueDMA_byteAlignerWriter_bytes_out_needed <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_byteAlignerWriter_bytes_out_needed$D_IN;
    if (blueDMA_byteAlignerWriter_bytes_total$EN)
      blueDMA_byteAlignerWriter_bytes_total <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_byteAlignerWriter_bytes_total$D_IN;
    if (blueDMA_readConverter_buffer$EN)
      blueDMA_readConverter_buffer <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_readConverter_buffer$D_IN;
  end

  always@(posedge s_axi_aclk)
  begin
    if (s_axi_aresetn == `BSV_RESET_VALUE)
      begin
        blueDMA_clkCntr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	blueDMA_cycles_between <= `BSV_ASSIGNMENT_DELAY 64'd0;
	blueDMA_cycles_between_set <= `BSV_ASSIGNMENT_DELAY 64'd0;
	blueDMA_cycles_last_request <= `BSV_ASSIGNMENT_DELAY 64'd0;
	blueDMA_doneInterruptReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	blueDMA_fpga_addr <= `BSV_ASSIGNMENT_DELAY 64'd0;
	blueDMA_host_addr <= `BSV_ASSIGNMENT_DELAY 64'd0;
	blueDMA_id <= `BSV_ASSIGNMENT_DELAY 64'h002040800E5A0023;
	blueDMA_isWriteActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	blueDMA_opInProgress <= `BSV_ASSIGNMENT_DELAY 1'd0;
	blueDMA_pc_reqCntr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	blueDMA_readIn_rv <= `BSV_ASSIGNMENT_DELAY
	    161'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	blueDMA_read_requests <= `BSV_ASSIGNMENT_DELAY 64'd0;
	blueDMA_s_config_readBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	blueDMA_s_config_writeSlave_addrIn_rv <= `BSV_ASSIGNMENT_DELAY
	    68'h2AAAAAAAAAAAAAAAA;
	blueDMA_s_config_writeSlave_dataIn_rv <= `BSV_ASSIGNMENT_DELAY
	    73'h0AAAAAAAAAAAAAAAAAA;
	blueDMA_transfer_length <= `BSV_ASSIGNMENT_DELAY 64'd0;
	blueDMA_writeIn_rv <= `BSV_ASSIGNMENT_DELAY
	    161'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	blueDMA_write_requests <= `BSV_ASSIGNMENT_DELAY 64'd0;
      end
    else
      begin
        if (blueDMA_clkCntr$EN)
	  blueDMA_clkCntr <= `BSV_ASSIGNMENT_DELAY blueDMA_clkCntr$D_IN;
	if (blueDMA_cycles_between$EN)
	  blueDMA_cycles_between <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_cycles_between$D_IN;
	if (blueDMA_cycles_between_set$EN)
	  blueDMA_cycles_between_set <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_cycles_between_set$D_IN;
	if (blueDMA_cycles_last_request$EN)
	  blueDMA_cycles_last_request <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_cycles_last_request$D_IN;
	if (blueDMA_doneInterruptReg$EN)
	  blueDMA_doneInterruptReg <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_doneInterruptReg$D_IN;
	if (blueDMA_fpga_addr$EN)
	  blueDMA_fpga_addr <= `BSV_ASSIGNMENT_DELAY blueDMA_fpga_addr$D_IN;
	if (blueDMA_host_addr$EN)
	  blueDMA_host_addr <= `BSV_ASSIGNMENT_DELAY blueDMA_host_addr$D_IN;
	if (blueDMA_id$EN)
	  blueDMA_id <= `BSV_ASSIGNMENT_DELAY blueDMA_id$D_IN;
	if (blueDMA_isWriteActive$EN)
	  blueDMA_isWriteActive <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_isWriteActive$D_IN;
	if (blueDMA_opInProgress$EN)
	  blueDMA_opInProgress <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_opInProgress$D_IN;
	if (blueDMA_pc_reqCntr$EN)
	  blueDMA_pc_reqCntr <= `BSV_ASSIGNMENT_DELAY blueDMA_pc_reqCntr$D_IN;
	if (blueDMA_readIn_rv$EN)
	  blueDMA_readIn_rv <= `BSV_ASSIGNMENT_DELAY blueDMA_readIn_rv$D_IN;
	if (blueDMA_read_requests$EN)
	  blueDMA_read_requests <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_read_requests$D_IN;
	if (blueDMA_s_config_readBusy$EN)
	  blueDMA_s_config_readBusy <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_s_config_readBusy$D_IN;
	if (blueDMA_s_config_writeSlave_addrIn_rv$EN)
	  blueDMA_s_config_writeSlave_addrIn_rv <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_s_config_writeSlave_addrIn_rv$D_IN;
	if (blueDMA_s_config_writeSlave_dataIn_rv$EN)
	  blueDMA_s_config_writeSlave_dataIn_rv <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_s_config_writeSlave_dataIn_rv$D_IN;
	if (blueDMA_transfer_length$EN)
	  blueDMA_transfer_length <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_transfer_length$D_IN;
	if (blueDMA_writeIn_rv$EN)
	  blueDMA_writeIn_rv <= `BSV_ASSIGNMENT_DELAY blueDMA_writeIn_rv$D_IN;
	if (blueDMA_write_requests$EN)
	  blueDMA_write_requests <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_write_requests$D_IN;
      end
    if (blueDMA_pc_betweenStart$EN)
      blueDMA_pc_betweenStart <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_pc_betweenStart$D_IN;
    if (blueDMA_pc_start$EN)
      blueDMA_pc_start <= `BSV_ASSIGNMENT_DELAY blueDMA_pc_start$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    blueDMA_byteAlignerReader_buffer =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    blueDMA_byteAlignerReader_bytes_in = 32'hAAAAAAAA;
    blueDMA_byteAlignerReader_bytes_left_in_buffer = 6'h2A;
    blueDMA_byteAlignerReader_bytes_out = 32'hAAAAAAAA;
    blueDMA_byteAlignerReader_bytes_out_needed = 6'h2A;
    blueDMA_byteAlignerReader_bytes_total = 32'hAAAAAAAA;
    blueDMA_byteAlignerReader_fetchedDatum = 1'h0;
    blueDMA_byteAlignerWriter_buffer =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    blueDMA_byteAlignerWriter_bytes_in = 32'hAAAAAAAA;
    blueDMA_byteAlignerWriter_bytes_left_in_buffer = 6'h2A;
    blueDMA_byteAlignerWriter_bytes_out = 32'hAAAAAAAA;
    blueDMA_byteAlignerWriter_bytes_out_needed = 6'h2A;
    blueDMA_byteAlignerWriter_bytes_total = 32'hAAAAAAAA;
    blueDMA_byteAlignerWriter_fetchedDatum = 1'h0;
    blueDMA_clkCntr = 32'hAAAAAAAA;
    blueDMA_cycles_between = 64'hAAAAAAAAAAAAAAAA;
    blueDMA_cycles_between_set = 64'hAAAAAAAAAAAAAAAA;
    blueDMA_cycles_last_request = 64'hAAAAAAAAAAAAAAAA;
    blueDMA_doneInterruptReg = 1'h0;
    blueDMA_fpgaLastCycle = 1'h0;
    blueDMA_fpga_addr = 64'hAAAAAAAAAAAAAAAA;
    blueDMA_host_addr = 64'hAAAAAAAAAAAAAAAA;
    blueDMA_id = 64'hAAAAAAAAAAAAAAAA;
    blueDMA_isWriteActive = 1'h0;
    blueDMA_m_fpga_rd_task_data_output_reg = 45'h0AAAAAAAAAAA;
    blueDMA_m_fpga_rd_task_data_requests_reg =
	113'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    blueDMA_m_fpga_wr_beatsThisRequestCntr = 8'hAA;
    blueDMA_m_fpga_wr_task_data_output_reg = 45'h0AAAAAAAAAAA;
    blueDMA_m_fpga_wr_task_data_requests_reg =
	113'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    blueDMA_m_pcie_rd_task_data_output_reg = 43'h2AAAAAAAAAA;
    blueDMA_m_pcie_rd_task_data_requests_reg =
	114'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    blueDMA_m_pcie_wr_beatsThisRequestCntr = 8'hAA;
    blueDMA_m_pcie_wr_task_data_output_reg = 43'h2AAAAAAAAAA;
    blueDMA_m_pcie_wr_task_data_requests_reg =
	114'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    blueDMA_opInProgress = 1'h0;
    blueDMA_pc_betweenStart = 32'hAAAAAAAA;
    blueDMA_pc_reqCntr = 12'hAAA;
    blueDMA_pc_start = 32'hAAAAAAAA;
    blueDMA_pcieLastCycle = 1'h0;
    blueDMA_readConverter_buffer =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    blueDMA_readConverter_bufferEmpty = 1'h0;
    blueDMA_readConverter_byteCntr = 32'hAAAAAAAA;
    blueDMA_readConverter_wordInCntr = 1'h0;
    blueDMA_readIn_rv = 161'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    blueDMA_read_requests = 64'hAAAAAAAAAAAAAAAA;
    blueDMA_s_config_readBusy = 1'h0;
    blueDMA_s_config_writeSlave_addrIn_rv = 68'hAAAAAAAAAAAAAAAAA;
    blueDMA_s_config_writeSlave_dataIn_rv = 73'h0AAAAAAAAAAAAAAAAAA;
    blueDMA_transfer_length = 64'hAAAAAAAAAAAAAAAA;
    blueDMA_writeConverter_buffer_0 =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    blueDMA_writeConverter_wordInCntr = 2'h2;
    blueDMA_writeConverter_wordOutCntr = 27'h2AAAAAA;
    blueDMA_writeIn_rv = 161'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    blueDMA_write_requests = 64'hAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge s_axi_aclk)
  begin
    #0;
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_handleRead)
	$display("btt org %d, btt after %d",
		 blueDMA_readIn_rv[31:0],
		 btt__h98960);
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_7) &&
	  (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_8))
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 119, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_s_config_axiReadSpecial_7,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_7] and\n  [RL_blueDMA_s_config_axiReadSpecial_8,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_8] ) fired in the same clock\n  cycle.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_1 and\n  RL_blueDMA_s_config_1_axiWriteSpecialIsHandled called conflicting methods\n  wset and wset of module instance blueDMA_s_config_writeIsHandled.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_1 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_1 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods deq and deq\n  of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_1 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods enq and enq\n  of module instance blueDMA_s_config_writeSlave_out.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_1 &&
	  WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_2 and\n  RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_1 called conflicting methods\n  wset and wset of module instance blueDMA_s_config_writeIsHandled.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_1 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_2 and\n  RL_blueDMA_s_config_1_axiWriteSpecialIsHandled called conflicting methods\n  wset and wset of module instance blueDMA_s_config_writeIsHandled.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_2 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_1 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_2 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_1 called conflicting methods deq and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_2 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_1 called conflicting methods enq and\n  enq of module instance blueDMA_s_config_writeSlave_out.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_2 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_2 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods deq and deq\n  of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_2 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods enq and enq\n  of module instance blueDMA_s_config_writeSlave_out.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_1)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_2 called conflicting methods\n  wset and wset of module instance blueDMA_s_config_writeIsHandled.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_1 called conflicting methods\n  wset and wset of module instance blueDMA_s_config_writeIsHandled.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecialIsHandled called conflicting methods\n  wset and wset of module instance blueDMA_s_config_writeIsHandled.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_2 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_2 called conflicting methods deq and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_2 called conflicting methods enq and\n  enq of module instance blueDMA_s_config_writeSlave_out.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_1 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_1 called conflicting methods deq and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_1 called conflicting methods enq and\n  enq of module instance blueDMA_s_config_writeSlave_out.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods deq and deq\n  of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods enq and enq\n  of module instance blueDMA_s_config_writeSlave_out.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6 &&
	  WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_4)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_3 called conflicting methods\n  wset and wset of module instance blueDMA_s_config_writeIsHandled.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6 &&
	  WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_1)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_2 called conflicting methods\n  wset and wset of module instance blueDMA_s_config_writeIsHandled.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6 &&
	  WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_1 called conflicting methods\n  wset and wset of module instance blueDMA_s_config_writeIsHandled.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 218, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecialIsHandled called conflicting methods\n  wset and wset of module instance blueDMA_s_config_writeIsHandled.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_1 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_1) &&
	  (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_2 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_2 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_3 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_3 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_4 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_4 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_8))
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 119, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_s_config_axiReadSpecial_1,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_1] and\n  [RL_blueDMA_s_config_axiReadSpecial_2,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_2,\n  RL_blueDMA_s_config_axiReadSpecial_3,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_3,\n  RL_blueDMA_s_config_axiReadSpecial_4,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_4,\n  RL_blueDMA_s_config_axiReadSpecial_5,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_5,\n  RL_blueDMA_s_config_axiReadSpecial_6,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_6,\n  RL_blueDMA_s_config_axiReadSpecial_7,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_7,\n  RL_blueDMA_s_config_axiReadSpecial_8,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_8] ) fired in the same clock\n  cycle.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_2 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_2) &&
	  (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_3 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_3 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_4 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_4 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_8))
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 119, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_s_config_axiReadSpecial_2,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_2] and\n  [RL_blueDMA_s_config_axiReadSpecial_3,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_3,\n  RL_blueDMA_s_config_axiReadSpecial_4,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_4,\n  RL_blueDMA_s_config_axiReadSpecial_5,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_5,\n  RL_blueDMA_s_config_axiReadSpecial_6,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_6,\n  RL_blueDMA_s_config_axiReadSpecial_7,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_7,\n  RL_blueDMA_s_config_axiReadSpecial_8,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_8] ) fired in the same clock\n  cycle.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_3 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_3) &&
	  (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_4 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_4 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_8))
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 119, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_s_config_axiReadSpecial_3,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_3] and\n  [RL_blueDMA_s_config_axiReadSpecial_4,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_4,\n  RL_blueDMA_s_config_axiReadSpecial_5,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_5,\n  RL_blueDMA_s_config_axiReadSpecial_6,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_6,\n  RL_blueDMA_s_config_axiReadSpecial_7,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_7,\n  RL_blueDMA_s_config_axiReadSpecial_8,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_8] ) fired in the same clock\n  cycle.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_4 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_4) &&
	  (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_8))
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 119, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_s_config_axiReadSpecial_4,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_4] and\n  [RL_blueDMA_s_config_axiReadSpecial_5,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_5,\n  RL_blueDMA_s_config_axiReadSpecial_6,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_6,\n  RL_blueDMA_s_config_axiReadSpecial_7,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_7,\n  RL_blueDMA_s_config_axiReadSpecial_8,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_8] ) fired in the same clock\n  cycle.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6) &&
	  (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_8))
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 119, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_s_config_axiReadSpecial_6,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_6] and\n  [RL_blueDMA_s_config_axiReadSpecial_7,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_7,\n  RL_blueDMA_s_config_axiReadSpecial_8,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_8] ) fired in the same clock\n  cycle.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_5) &&
	  (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_8))
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 119, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_s_config_axiReadSpecial_5,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_5] and\n  [RL_blueDMA_s_config_axiReadSpecial_6,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_6,\n  RL_blueDMA_s_config_axiReadSpecial_7,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_7,\n  RL_blueDMA_s_config_axiReadSpecial_8,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_8] ) fired in the same clock\n  cycle.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled) &&
	  (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_1 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_1 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_2 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_2 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_3 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_3 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_4 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_4 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_8))
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 119, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_s_config_axiReadSpecial,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled] and\n  [RL_blueDMA_s_config_axiReadSpecial_1,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_1,\n  RL_blueDMA_s_config_axiReadSpecial_2,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_2,\n  RL_blueDMA_s_config_axiReadSpecial_3,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_3,\n  RL_blueDMA_s_config_axiReadSpecial_4,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_4,\n  RL_blueDMA_s_config_axiReadSpecial_5,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_5,\n  RL_blueDMA_s_config_axiReadSpecial_6,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_6,\n  RL_blueDMA_s_config_axiReadSpecial_7,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_7,\n  RL_blueDMA_s_config_axiReadSpecial_8,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_8] ) fired in the same clock\n  cycle.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_1 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_1 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_2 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_2 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_3 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_3 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_4 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_4 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_8) &&
	  WILL_FIRE_RL_blueDMA_s_config_axiReadFallback)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 119, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_s_config_axiReadSpecial,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled,\n  RL_blueDMA_s_config_axiReadSpecial_1,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_1,\n  RL_blueDMA_s_config_axiReadSpecial_2,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_2,\n  RL_blueDMA_s_config_axiReadSpecial_3,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_3,\n  RL_blueDMA_s_config_axiReadSpecial_4,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_4,\n  RL_blueDMA_s_config_axiReadSpecial_5,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_5,\n  RL_blueDMA_s_config_axiReadSpecial_6,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_6,\n  RL_blueDMA_s_config_axiReadSpecial_7,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_7,\n  RL_blueDMA_s_config_axiReadSpecial_8,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_8] and\n  [RL_blueDMA_s_config_axiReadFallback] ) fired in the same clock cycle.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_3 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_3 called conflicting methods deq and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_3 called conflicting methods enq and\n  enq of module instance blueDMA_s_config_writeSlave_out.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_2 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_2 called conflicting methods deq and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_2 called conflicting methods enq and\n  enq of module instance blueDMA_s_config_writeSlave_out.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_1 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_1 called conflicting methods deq and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_1 called conflicting methods enq and\n  enq of module instance blueDMA_s_config_writeSlave_out.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods deq and deq\n  of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 207, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods enq and enq\n  of module instance blueDMA_s_config_writeSlave_out.\n");
  end
  // synopsys translate_on

  // synopsys translate_off
  always@(negedge m32_axi_aclk)
  begin
    #0;
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_fpga_wr_reqGen_finishRequest)
	$display("[WRITE] request:");
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_fpga_wr_reqGen_finishRequest)
	$display("[WRITE] bytes_first: %d",
		 blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$D_OUT[146:141]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_fpga_wr_reqGen_finishRequest)
	$display("[WRITE] bytes_last: %d",
		 blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$D_OUT[140:135]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_fpga_wr_reqGen_finishRequest)
	$display("[WRITE] transfers_total: %d",
		 blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$D_OUT[134:109]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_fpga_wr_reqGen_finishRequest)
	$display("[WRITE] addr_offset: %d",
		 blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$D_OUT[50:45]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_fpga_wr_reqGen_finishRequest)
	$display("[WRITE] requests_first: %d",
		 blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$D_OUT[8:0]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_fpga_wr_reqGen_finishRequest)
	$display("[WRITE] requests_last: %d", x__h15757);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_fpga_wr_reqGen_finishRequest)
	$display("[WRITE] requests_total: %d",
		 request_data_requests_total__h15731);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_fpga_wr_reqGen_finishRequest)
	$display("[WRITE] address_static: %x",
		 blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$D_OUT[108:78]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_fpga_wr_reqGen_finishRequest)
	$display("[WRITE] address_dynamic: %x",
		 blueDMA_m_fpga_wr_reqGen_intermediateBuffer3$D_OUT[77:57]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_fpga_rd_reqGen_finishRequest)
	$display("[READ] request:");
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_fpga_rd_reqGen_finishRequest)
	$display("[READ] bytes_first: %d",
		 blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$D_OUT[146:141]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_fpga_rd_reqGen_finishRequest)
	$display("[READ] bytes_last: %d",
		 blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$D_OUT[140:135]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_fpga_rd_reqGen_finishRequest)
	$display("[READ] transfers_total: %d",
		 blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$D_OUT[134:109]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_fpga_rd_reqGen_finishRequest)
	$display("[READ] addr_offset: %d",
		 blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$D_OUT[50:45]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_fpga_rd_reqGen_finishRequest)
	$display("[READ] requests_first: %d",
		 blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$D_OUT[8:0]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_fpga_rd_reqGen_finishRequest)
	$display("[READ] requests_last: %d", x__h31368);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_fpga_rd_reqGen_finishRequest)
	$display("[READ] requests_total: %d",
		 request_data_requests_total__h31342);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_fpga_rd_reqGen_finishRequest)
	$display("[READ] address_static: %x",
		 blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$D_OUT[108:78]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_fpga_rd_reqGen_finishRequest)
	$display("[READ] address_dynamic: %x",
		 blueDMA_m_fpga_rd_reqGen_intermediateBuffer3$D_OUT[77:57]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_fpga_rd_placeRequest)
	begin
	  v__h33722 = $time;
	  #0;
	end
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_fpga_rd_placeRequest)
	$display("(%0d) Processing READ request: Address: %x, beats this request %d, requests_total %d",
		 v__h33722,
		 blueDMA_m_fpga_rd_task_data_requests_reg[68:5],
		 _theResult_____2__h33540 + 8'd1,
		 blueDMA_m_fpga_rd_task_data_requests_reg[94:69]);
  end
  // synopsys translate_on

  // synopsys translate_off
  always@(negedge m64_axi_aclk)
  begin
    #0;
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_pcie_wr_reqGen_finishRequest)
	$display("[WRITE] request:");
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_pcie_wr_reqGen_finishRequest)
	$display("[WRITE] bytes_first: %d",
		 blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$D_OUT[145:141]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_pcie_wr_reqGen_finishRequest)
	$display("[WRITE] bytes_last: %d",
		 blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$D_OUT[140:136]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_pcie_wr_reqGen_finishRequest)
	$display("[WRITE] transfers_total: %d",
		 blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$D_OUT[135:109]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_pcie_wr_reqGen_finishRequest)
	$display("[WRITE] addr_offset: %d",
		 blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$D_OUT[49:45]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_pcie_wr_reqGen_finishRequest)
	$display("[WRITE] requests_first: %d",
		 blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$D_OUT[8:0]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_pcie_wr_reqGen_finishRequest)
	$display("[WRITE] requests_last: %d", x__h1467);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_pcie_wr_reqGen_finishRequest)
	$display("[WRITE] requests_total: %d",
		 request_data_requests_total__h1441);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_pcie_wr_reqGen_finishRequest)
	$display("[WRITE] address_static: %x",
		 blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$D_OUT[108:78]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_pcie_wr_reqGen_finishRequest)
	$display("[WRITE] address_dynamic: %x",
		 blueDMA_m_pcie_wr_reqGen_intermediateBuffer3$D_OUT[77:57]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_pcie_rd_reqGen_finishRequest)
	$display("[READ] request:");
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_pcie_rd_reqGen_finishRequest)
	$display("[READ] bytes_first: %d",
		 blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$D_OUT[145:141]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_pcie_rd_reqGen_finishRequest)
	$display("[READ] bytes_last: %d",
		 blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$D_OUT[140:136]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_pcie_rd_reqGen_finishRequest)
	$display("[READ] transfers_total: %d",
		 blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$D_OUT[135:109]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_pcie_rd_reqGen_finishRequest)
	$display("[READ] addr_offset: %d",
		 blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$D_OUT[49:45]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_pcie_rd_reqGen_finishRequest)
	$display("[READ] requests_first: %d",
		 blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$D_OUT[8:0]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_pcie_rd_reqGen_finishRequest)
	$display("[READ] requests_last: %d", x__h11695);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_pcie_rd_reqGen_finishRequest)
	$display("[READ] requests_total: %d",
		 request_data_requests_total__h11669);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_pcie_rd_reqGen_finishRequest)
	$display("[READ] address_static: %x",
		 blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$D_OUT[108:78]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_pcie_rd_reqGen_finishRequest)
	$display("[READ] address_dynamic: %x",
		 blueDMA_m_pcie_rd_reqGen_intermediateBuffer3$D_OUT[77:57]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_pcie_rd_placeRequest)
	begin
	  v__h14052 = $time;
	  #0;
	end
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_m_pcie_rd_placeRequest)
	$display("(%0d) Processing READ request: Address: %x, beats this request %d, requests_total %d",
		 v__h14052,
		 blueDMA_m_pcie_rd_task_data_requests_reg[68:5],
		 _theResult_____2__h13870 + 8'd1,
		 blueDMA_m_pcie_rd_task_data_requests_reg[95:69]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (blueDMA_byteAlignerReader_addr_ff$dEMPTY_N) $display("Init data:");
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (blueDMA_byteAlignerReader_addr_ff$dEMPTY_N)
	$display("Alignment_initial %d",
		 $unsigned(blueDMA_byteAlignerReader_addr_ff$dD_OUT[36:32]));
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (blueDMA_byteAlignerReader_addr_ff$dEMPTY_N)
	$display("addr_1_alignment %d",
		 $unsigned(blueDMA_byteAlignerReader_addr_ff$dD_OUT[100:96]));
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_byteAlignerReader_forwardOutput &&
	  WILL_FIRE_RL_blueDMA_byteAlignerReader_forwardOutputLast)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueDMA/src/ByteAligner.bsv\", line 119, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_byteAlignerReader_forwardOutput] and\n  [RL_blueDMA_byteAlignerReader_forwardOutputLast] ) fired in the same clock\n  cycle.\n");
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (blueDMA_byteAlignerWriter_addr_ff$dEMPTY_N) $display("Init data:");
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (blueDMA_byteAlignerWriter_addr_ff$dEMPTY_N)
	$display("Alignment_initial %d",
		 $unsigned(blueDMA_byteAlignerWriter_addr_ff$dD_OUT[36:32]));
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (blueDMA_byteAlignerWriter_addr_ff$dEMPTY_N)
	$display("addr_1_alignment %d",
		 $unsigned(blueDMA_byteAlignerWriter_addr_ff$dD_OUT[100:96]));
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_byteAlignerWriter_forwardOutput &&
	  WILL_FIRE_RL_blueDMA_byteAlignerWriter_forwardOutputLast)
	$display("Error: \"/home/jah/projects/ips/BluespecGenerics/BlueDMA/src/ByteAligner.bsv\", line 119, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_byteAlignerWriter_forwardOutput] and\n  [RL_blueDMA_byteAlignerWriter_forwardOutputLast] ) fired in the same clock\n  cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkBlueDMAVivado

