//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Thu Aug 16 16:01:05 CEST 2018
//
//
// Ports:
// Name                         I/O  size props
// S_AXI_arready                  O     1 reg
// S_AXI_rvalid                   O     1 reg
// S_AXI_rid                      O     3
// S_AXI_rdata                    O   256
// S_AXI_rresp                    O     2
// S_AXI_rlast                    O     1
// S_AXI_ruser                    O     1
// S_AXI_awready                  O     1 reg
// S_AXI_wready                   O     1 reg
// S_AXI_bvalid                   O     1 reg
// S_AXI_bresp                    O     2
// S_AXI_bid                      O     3
// S_AXI_buser                    O     1
// M_AXI_arvalid                  O     1 reg
// M_AXI_araddr                   O    64
// M_AXI_arprot                   O     3
// M_AXI_rready                   O     1 reg
// M_AXI_awvalid                  O     1
// M_AXI_awaddr                   O    64
// M_AXI_awprot                   O     3
// M_AXI_wvalid                   O     1
// M_AXI_wdata                    O    64
// M_AXI_wstrb                    O     8
// M_AXI_bready                   O     1 reg
// S_AXI_ACLK                     I     1 clock
// S_AXI_ARESETN                  I     1 reset
// S_AXI_arvalid                  I     1
// S_AXI_arid                     I     3
// S_AXI_araddr                   I    64
// S_AXI_arlen                    I     8
// S_AXI_arsize                   I     3
// S_AXI_arburst                  I     2
// S_AXI_arlock                   I     1
// S_AXI_arcache                  I     4
// S_AXI_arprot                   I     3
// S_AXI_arqos                    I     4
// S_AXI_arregion                 I     4
// S_AXI_aruser                   I     1
// S_AXI_rready                   I     1
// S_AXI_awvalid                  I     1
// S_AXI_awid                     I     3
// S_AXI_awaddr                   I    64
// S_AXI_awlen                    I     8
// S_AXI_awsize                   I     3
// S_AXI_awburst                  I     2
// S_AXI_awlock                   I     1
// S_AXI_awcache                  I     4
// S_AXI_awprot                   I     3
// S_AXI_awqos                    I     4
// S_AXI_awregion                 I     4
// S_AXI_awuser                   I     1
// S_AXI_wvalid                   I     1
// S_AXI_wdata                    I   256 reg
// S_AXI_wstrb                    I    32 reg
// S_AXI_wlast                    I     1 reg
// S_AXI_wuser                    I     1 reg
// S_AXI_bready                   I     1
// M_AXI_arready                  I     1
// M_AXI_rvalid                   I     1
// M_AXI_rdata                    I    64 reg
// M_AXI_rresp                    I     2 reg
// M_AXI_awready                  I     1
// M_AXI_wready                   I     1
// M_AXI_bvalid                   I     1
// M_AXI_bresp                    I     2 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPCIeBridgeToLite(S_AXI_ACLK,
			  S_AXI_ARESETN,

			  S_AXI_arvalid,

			  S_AXI_arready,

			  S_AXI_arid,
			  S_AXI_araddr,
			  S_AXI_arlen,
			  S_AXI_arsize,
			  S_AXI_arburst,
			  S_AXI_arlock,
			  S_AXI_arcache,
			  S_AXI_arprot,
			  S_AXI_arqos,
			  S_AXI_arregion,
			  S_AXI_aruser,

			  S_AXI_rready,

			  S_AXI_rvalid,

			  S_AXI_rid,

			  S_AXI_rdata,

			  S_AXI_rresp,

			  S_AXI_rlast,

			  S_AXI_ruser,

			  S_AXI_awready,

			  S_AXI_awvalid,

			  S_AXI_awid,
			  S_AXI_awaddr,
			  S_AXI_awlen,
			  S_AXI_awsize,
			  S_AXI_awburst,
			  S_AXI_awlock,
			  S_AXI_awcache,
			  S_AXI_awprot,
			  S_AXI_awqos,
			  S_AXI_awregion,
			  S_AXI_awuser,

			  S_AXI_wready,

			  S_AXI_wvalid,

			  S_AXI_wdata,
			  S_AXI_wstrb,
			  S_AXI_wlast,
			  S_AXI_wuser,

			  S_AXI_bready,

			  S_AXI_bvalid,

			  S_AXI_bresp,

			  S_AXI_bid,

			  S_AXI_buser,

			  M_AXI_arvalid,

			  M_AXI_arready,

			  M_AXI_araddr,

			  M_AXI_arprot,

			  M_AXI_rready,

			  M_AXI_rvalid,

			  M_AXI_rdata,

			  M_AXI_rresp,

			  M_AXI_awready,

			  M_AXI_awvalid,

			  M_AXI_awaddr,

			  M_AXI_awprot,

			  M_AXI_wready,

			  M_AXI_wvalid,

			  M_AXI_wdata,

			  M_AXI_wstrb,

			  M_AXI_bvalid,

			  M_AXI_bready,

			  M_AXI_bresp);
  input  S_AXI_ACLK;
  input  S_AXI_ARESETN;

  // action method s_rd_parvalid
  input  S_AXI_arvalid;

  // value method s_rd_arready
  output S_AXI_arready;

  // action method s_rd_parchannel
  input  [2 : 0] S_AXI_arid;
  input  [63 : 0] S_AXI_araddr;
  input  [7 : 0] S_AXI_arlen;
  input  [2 : 0] S_AXI_arsize;
  input  [1 : 0] S_AXI_arburst;
  input  S_AXI_arlock;
  input  [3 : 0] S_AXI_arcache;
  input  [2 : 0] S_AXI_arprot;
  input  [3 : 0] S_AXI_arqos;
  input  [3 : 0] S_AXI_arregion;
  input  S_AXI_aruser;

  // action method s_rd_prready
  input  S_AXI_rready;

  // value method s_rd_rvalid
  output S_AXI_rvalid;

  // value method s_rd_rid
  output [2 : 0] S_AXI_rid;

  // value method s_rd_rdata
  output [255 : 0] S_AXI_rdata;

  // value method s_rd_rresp
  output [1 : 0] S_AXI_rresp;

  // value method s_rd_rlast
  output S_AXI_rlast;

  // value method s_rd_ruser
  output S_AXI_ruser;

  // value method s_wr_awready
  output S_AXI_awready;

  // action method s_wr_pawvalid
  input  S_AXI_awvalid;

  // action method s_wr_pawchannel
  input  [2 : 0] S_AXI_awid;
  input  [63 : 0] S_AXI_awaddr;
  input  [7 : 0] S_AXI_awlen;
  input  [2 : 0] S_AXI_awsize;
  input  [1 : 0] S_AXI_awburst;
  input  S_AXI_awlock;
  input  [3 : 0] S_AXI_awcache;
  input  [2 : 0] S_AXI_awprot;
  input  [3 : 0] S_AXI_awqos;
  input  [3 : 0] S_AXI_awregion;
  input  S_AXI_awuser;

  // value method s_wr_wready
  output S_AXI_wready;

  // action method s_wr_pwvalid
  input  S_AXI_wvalid;

  // action method s_wr_pwchannel
  input  [255 : 0] S_AXI_wdata;
  input  [31 : 0] S_AXI_wstrb;
  input  S_AXI_wlast;
  input  S_AXI_wuser;

  // action method s_wr_pbready
  input  S_AXI_bready;

  // value method s_wr_bvalid
  output S_AXI_bvalid;

  // value method s_wr_bresp
  output [1 : 0] S_AXI_bresp;

  // value method s_wr_bid
  output [2 : 0] S_AXI_bid;

  // value method s_wr_buser
  output S_AXI_buser;

  // value method m_rd_arvalid
  output M_AXI_arvalid;

  // action method m_rd_parready
  input  M_AXI_arready;

  // value method m_rd_araddr
  output [63 : 0] M_AXI_araddr;

  // value method m_rd_arprot
  output [2 : 0] M_AXI_arprot;

  // value method m_rd_rready
  output M_AXI_rready;

  // action method m_rd_prvalid
  input  M_AXI_rvalid;

  // action method m_rd_prdata
  input  [63 : 0] M_AXI_rdata;

  // action method m_rd_prresp
  input  [1 : 0] M_AXI_rresp;

  // action method m_wr_pawready
  input  M_AXI_awready;

  // value method m_wr_awvalid
  output M_AXI_awvalid;

  // value method m_wr_awaddr
  output [63 : 0] M_AXI_awaddr;

  // value method m_wr_awprot
  output [2 : 0] M_AXI_awprot;

  // action method m_wr_pwready
  input  M_AXI_wready;

  // value method m_wr_wvalid
  output M_AXI_wvalid;

  // value method m_wr_wdata
  output [63 : 0] M_AXI_wdata;

  // value method m_wr_wstrb
  output [7 : 0] M_AXI_wstrb;

  // action method m_wr_pbvalid
  input  M_AXI_bvalid;

  // value method m_wr_bready
  output M_AXI_bready;

  // action method m_wr_pbresp
  input  [1 : 0] M_AXI_bresp;

  // signals for module outputs
  wire [255 : 0] S_AXI_rdata;
  wire [63 : 0] M_AXI_araddr, M_AXI_awaddr, M_AXI_wdata;
  wire [7 : 0] M_AXI_wstrb;
  wire [2 : 0] M_AXI_arprot, M_AXI_awprot, S_AXI_bid, S_AXI_rid;
  wire [1 : 0] S_AXI_bresp, S_AXI_rresp;
  wire M_AXI_arvalid,
       M_AXI_awvalid,
       M_AXI_bready,
       M_AXI_rready,
       M_AXI_wvalid,
       S_AXI_arready,
       S_AXI_awready,
       S_AXI_buser,
       S_AXI_bvalid,
       S_AXI_rlast,
       S_AXI_ruser,
       S_AXI_rvalid,
       S_AXI_wready;

  // inlined wires
  wire [289 : 0] writeSlave_arinpkg_data$wget;
  wire [96 : 0] readSlave_arinpkg$wget, writeSlave_arinpkg_addr$wget;
  wire [72 : 0] writeMaster_dataOut_rv$port0__write_1,
		writeMaster_dataOut_rv$port1__read,
		writeMaster_dataOut_rv$port2__read;
  wire [67 : 0] writeMaster_addrOut_rv$port0__write_1,
		writeMaster_addrOut_rv$port1__read,
		writeMaster_addrOut_rv$port2__read;
  wire writeMaster_addrOut_rv$EN_port0__write,
       writeMaster_addrOut_rv$EN_port1__write,
       writeMaster_dataOut_rv$EN_port0__write,
       writeMaster_dataOut_rv$EN_port1__write;

  // register writeMaster_addrOut_rv
  reg [67 : 0] writeMaster_addrOut_rv;
  wire [67 : 0] writeMaster_addrOut_rv$D_IN;
  wire writeMaster_addrOut_rv$EN;

  // register writeMaster_dataOut_rv
  reg [72 : 0] writeMaster_dataOut_rv;
  wire [72 : 0] writeMaster_dataOut_rv$D_IN;
  wire writeMaster_dataOut_rv$EN;

  // ports of submodule addr
  wire [4 : 0] addr$D_IN, addr$D_OUT;
  wire addr$CLR, addr$DEQ, addr$EMPTY_N, addr$ENQ, addr$FULL_N;

  // ports of submodule readMaster_in
  wire [66 : 0] readMaster_in$D_IN, readMaster_in$D_OUT;
  wire readMaster_in$CLR,
       readMaster_in$DEQ,
       readMaster_in$EMPTY_N,
       readMaster_in$ENQ,
       readMaster_in$FULL_N;

  // ports of submodule readMaster_out
  wire [65 : 0] readMaster_out$D_IN, readMaster_out$D_OUT;
  wire readMaster_out$CLR,
       readMaster_out$DEQ,
       readMaster_out$EMPTY_N,
       readMaster_out$ENQ,
       readMaster_out$FULL_N;

  // ports of submodule readSlave_in
  wire [96 : 0] readSlave_in$D_IN, readSlave_in$D_OUT;
  wire readSlave_in$CLR,
       readSlave_in$DEQ,
       readSlave_in$EMPTY_N,
       readSlave_in$ENQ,
       readSlave_in$FULL_N;

  // ports of submodule readSlave_out
  wire [262 : 0] readSlave_out$D_IN, readSlave_out$D_OUT;
  wire readSlave_out$CLR,
       readSlave_out$DEQ,
       readSlave_out$EMPTY_N,
       readSlave_out$ENQ,
       readSlave_out$FULL_N;

  // ports of submodule writeMaster_in
  wire [138 : 0] writeMaster_in$D_IN, writeMaster_in$D_OUT;
  wire writeMaster_in$CLR,
       writeMaster_in$DEQ,
       writeMaster_in$EMPTY_N,
       writeMaster_in$ENQ,
       writeMaster_in$FULL_N;

  // ports of submodule writeMaster_out
  wire [1 : 0] writeMaster_out$D_IN, writeMaster_out$D_OUT;
  wire writeMaster_out$CLR,
       writeMaster_out$DEQ,
       writeMaster_out$EMPTY_N,
       writeMaster_out$ENQ,
       writeMaster_out$FULL_N;

  // ports of submodule writeSlave_in_addr
  wire [96 : 0] writeSlave_in_addr$D_IN, writeSlave_in_addr$D_OUT;
  wire writeSlave_in_addr$CLR,
       writeSlave_in_addr$DEQ,
       writeSlave_in_addr$EMPTY_N,
       writeSlave_in_addr$ENQ,
       writeSlave_in_addr$FULL_N;

  // ports of submodule writeSlave_in_data
  wire [289 : 0] writeSlave_in_data$D_IN, writeSlave_in_data$D_OUT;
  wire writeSlave_in_data$CLR,
       writeSlave_in_data$DEQ,
       writeSlave_in_data$EMPTY_N,
       writeSlave_in_data$ENQ,
       writeSlave_in_data$FULL_N;

  // ports of submodule writeSlave_out
  wire [5 : 0] writeSlave_out$D_IN, writeSlave_out$D_OUT;
  wire writeSlave_out$CLR,
       writeSlave_out$DEQ,
       writeSlave_out$EMPTY_N,
       writeSlave_out$ENQ,
       writeSlave_out$FULL_N;

  // remaining internal signals
  reg [3 : 0] CASE_S_AXI_arcache_0_S_AXI_arcache_1_S_AXI_arc_ETC__q1,
	      CASE_S_AXI_awcache_0_S_AXI_awcache_1_S_AXI_awc_ETC__q2,
	      CASE_readSlave_arinpkgwget_BITS_15_TO_12_0_re_ETC__q3,
	      CASE_writeSlave_arinpkg_addrwget_BITS_15_TO_1_ETC__q4;
  wire [255 : 0] x_data__h5774;
  wire [63 : 0] addr_t__h5532, x_data__h4770;
  wire [15 : 0] IF_S_AXI_arcache_EQ_0_04_OR_S_AXI_arcache_EQ_1_ETC___d219,
		IF_S_AXI_awcache_EQ_0_33_OR_S_AXI_awcache_EQ_1_ETC___d248;
  wire [7 : 0] offset__h5685, x_strb__h4771;

  // value method s_rd_arready
  assign S_AXI_arready = readSlave_in$FULL_N ;

  // value method s_rd_rvalid
  assign S_AXI_rvalid = readSlave_out$EMPTY_N ;

  // value method s_rd_rid
  assign S_AXI_rid =
	     readSlave_out$EMPTY_N ? readSlave_out$D_OUT[262:260] : 3'd0 ;

  // value method s_rd_rdata
  assign S_AXI_rdata =
	     readSlave_out$EMPTY_N ? readSlave_out$D_OUT[259:4] : 256'd0 ;

  // value method s_rd_rresp
  assign S_AXI_rresp =
	     readSlave_out$EMPTY_N ? readSlave_out$D_OUT[3:2] : 2'd0 ;

  // value method s_rd_rlast
  assign S_AXI_rlast = readSlave_out$EMPTY_N && readSlave_out$D_OUT[1] ;

  // value method s_rd_ruser
  assign S_AXI_ruser = readSlave_out$EMPTY_N && readSlave_out$D_OUT[0] ;

  // value method s_wr_awready
  assign S_AXI_awready = writeSlave_in_addr$FULL_N ;

  // value method s_wr_wready
  assign S_AXI_wready = writeSlave_in_data$FULL_N ;

  // value method s_wr_bvalid
  assign S_AXI_bvalid = writeSlave_out$EMPTY_N ;

  // value method s_wr_bresp
  assign S_AXI_bresp =
	     writeSlave_out$EMPTY_N ? writeSlave_out$D_OUT[2:1] : 2'd0 ;

  // value method s_wr_bid
  assign S_AXI_bid =
	     writeSlave_out$EMPTY_N ? writeSlave_out$D_OUT[5:3] : 3'd0 ;

  // value method s_wr_buser
  assign S_AXI_buser = writeSlave_out$EMPTY_N && writeSlave_out$D_OUT[0] ;

  // value method m_rd_arvalid
  assign M_AXI_arvalid = readMaster_in$EMPTY_N ;

  // value method m_rd_araddr
  assign M_AXI_araddr =
	     readMaster_in$EMPTY_N ? readMaster_in$D_OUT[66:3] : 64'd0 ;

  // value method m_rd_arprot
  assign M_AXI_arprot =
	     readMaster_in$EMPTY_N ? readMaster_in$D_OUT[2:0] : 3'd0 ;

  // value method m_rd_rready
  assign M_AXI_rready = readMaster_out$FULL_N ;

  // value method m_wr_awvalid
  assign M_AXI_awvalid = writeMaster_addrOut_rv$port1__read[67] ;

  // value method m_wr_awaddr
  assign M_AXI_awaddr =
	     writeMaster_addrOut_rv$port1__read[67] ?
	       writeMaster_addrOut_rv$port1__read[66:3] :
	       64'd0 ;

  // value method m_wr_awprot
  assign M_AXI_awprot =
	     writeMaster_addrOut_rv$port1__read[67] ?
	       writeMaster_addrOut_rv$port1__read[2:0] :
	       3'd0 ;

  // value method m_wr_wvalid
  assign M_AXI_wvalid = writeMaster_dataOut_rv$port1__read[72] ;

  // value method m_wr_wdata
  assign M_AXI_wdata =
	     writeMaster_dataOut_rv$port1__read[72] ?
	       writeMaster_dataOut_rv$port1__read[71:8] :
	       64'd0 ;

  // value method m_wr_wstrb
  assign M_AXI_wstrb =
	     writeMaster_dataOut_rv$port1__read[72] ?
	       writeMaster_dataOut_rv$port1__read[7:0] :
	       8'd0 ;

  // value method m_wr_bready
  assign M_AXI_bready = writeMaster_out$FULL_N ;

  // submodule addr
  FIFO2 #(.width(32'd5), .guarded(32'd1)) addr(.RST(S_AXI_ARESETN),
					       .CLK(S_AXI_ACLK),
					       .D_IN(addr$D_IN),
					       .ENQ(addr$ENQ),
					       .DEQ(addr$DEQ),
					       .CLR(addr$CLR),
					       .D_OUT(addr$D_OUT),
					       .FULL_N(addr$FULL_N),
					       .EMPTY_N(addr$EMPTY_N));

  // submodule readMaster_in
  FIFO1 #(.width(32'd67), .guarded(32'd1)) readMaster_in(.RST(S_AXI_ARESETN),
							 .CLK(S_AXI_ACLK),
							 .D_IN(readMaster_in$D_IN),
							 .ENQ(readMaster_in$ENQ),
							 .DEQ(readMaster_in$DEQ),
							 .CLR(readMaster_in$CLR),
							 .D_OUT(readMaster_in$D_OUT),
							 .FULL_N(readMaster_in$FULL_N),
							 .EMPTY_N(readMaster_in$EMPTY_N));

  // submodule readMaster_out
  FIFO1 #(.width(32'd66), .guarded(32'd1)) readMaster_out(.RST(S_AXI_ARESETN),
							  .CLK(S_AXI_ACLK),
							  .D_IN(readMaster_out$D_IN),
							  .ENQ(readMaster_out$ENQ),
							  .DEQ(readMaster_out$DEQ),
							  .CLR(readMaster_out$CLR),
							  .D_OUT(readMaster_out$D_OUT),
							  .FULL_N(readMaster_out$FULL_N),
							  .EMPTY_N(readMaster_out$EMPTY_N));

  // submodule readSlave_in
  FIFO1 #(.width(32'd97), .guarded(32'd1)) readSlave_in(.RST(S_AXI_ARESETN),
							.CLK(S_AXI_ACLK),
							.D_IN(readSlave_in$D_IN),
							.ENQ(readSlave_in$ENQ),
							.DEQ(readSlave_in$DEQ),
							.CLR(readSlave_in$CLR),
							.D_OUT(readSlave_in$D_OUT),
							.FULL_N(readSlave_in$FULL_N),
							.EMPTY_N(readSlave_in$EMPTY_N));

  // submodule readSlave_out
  FIFO1 #(.width(32'd263), .guarded(32'd1)) readSlave_out(.RST(S_AXI_ARESETN),
							  .CLK(S_AXI_ACLK),
							  .D_IN(readSlave_out$D_IN),
							  .ENQ(readSlave_out$ENQ),
							  .DEQ(readSlave_out$DEQ),
							  .CLR(readSlave_out$CLR),
							  .D_OUT(readSlave_out$D_OUT),
							  .FULL_N(readSlave_out$FULL_N),
							  .EMPTY_N(readSlave_out$EMPTY_N));

  // submodule writeMaster_in
  FIFO1 #(.width(32'd139),
	  .guarded(32'd1)) writeMaster_in(.RST(S_AXI_ARESETN),
					  .CLK(S_AXI_ACLK),
					  .D_IN(writeMaster_in$D_IN),
					  .ENQ(writeMaster_in$ENQ),
					  .DEQ(writeMaster_in$DEQ),
					  .CLR(writeMaster_in$CLR),
					  .D_OUT(writeMaster_in$D_OUT),
					  .FULL_N(writeMaster_in$FULL_N),
					  .EMPTY_N(writeMaster_in$EMPTY_N));

  // submodule writeMaster_out
  FIFO1 #(.width(32'd2), .guarded(32'd1)) writeMaster_out(.RST(S_AXI_ARESETN),
							  .CLK(S_AXI_ACLK),
							  .D_IN(writeMaster_out$D_IN),
							  .ENQ(writeMaster_out$ENQ),
							  .DEQ(writeMaster_out$DEQ),
							  .CLR(writeMaster_out$CLR),
							  .D_OUT(writeMaster_out$D_OUT),
							  .FULL_N(writeMaster_out$FULL_N),
							  .EMPTY_N(writeMaster_out$EMPTY_N));

  // submodule writeSlave_in_addr
  FIFO1 #(.width(32'd97),
	  .guarded(32'd1)) writeSlave_in_addr(.RST(S_AXI_ARESETN),
					      .CLK(S_AXI_ACLK),
					      .D_IN(writeSlave_in_addr$D_IN),
					      .ENQ(writeSlave_in_addr$ENQ),
					      .DEQ(writeSlave_in_addr$DEQ),
					      .CLR(writeSlave_in_addr$CLR),
					      .D_OUT(writeSlave_in_addr$D_OUT),
					      .FULL_N(writeSlave_in_addr$FULL_N),
					      .EMPTY_N(writeSlave_in_addr$EMPTY_N));

  // submodule writeSlave_in_data
  FIFO1 #(.width(32'd290),
	  .guarded(32'd1)) writeSlave_in_data(.RST(S_AXI_ARESETN),
					      .CLK(S_AXI_ACLK),
					      .D_IN(writeSlave_in_data$D_IN),
					      .ENQ(writeSlave_in_data$ENQ),
					      .DEQ(writeSlave_in_data$DEQ),
					      .CLR(writeSlave_in_data$CLR),
					      .D_OUT(writeSlave_in_data$D_OUT),
					      .FULL_N(writeSlave_in_data$FULL_N),
					      .EMPTY_N(writeSlave_in_data$EMPTY_N));

  // submodule writeSlave_out
  FIFO1 #(.width(32'd6), .guarded(32'd1)) writeSlave_out(.RST(S_AXI_ARESETN),
							 .CLK(S_AXI_ACLK),
							 .D_IN(writeSlave_out$D_IN),
							 .ENQ(writeSlave_out$ENQ),
							 .DEQ(writeSlave_out$DEQ),
							 .CLR(writeSlave_out$CLR),
							 .D_OUT(writeSlave_out$D_OUT),
							 .FULL_N(writeSlave_out$FULL_N),
							 .EMPTY_N(writeSlave_out$EMPTY_N));

  // inlined wires
  assign writeSlave_arinpkg_addr$wget =
	     { S_AXI_awid,
	       S_AXI_awaddr,
	       S_AXI_awlen,
	       S_AXI_awsize,
	       S_AXI_awburst,
	       S_AXI_awlock,
	       IF_S_AXI_awcache_EQ_0_33_OR_S_AXI_awcache_EQ_1_ETC___d248 } ;
  assign writeSlave_arinpkg_data$wget =
	     { S_AXI_wdata, S_AXI_wstrb, S_AXI_wlast, S_AXI_wuser } ;
  assign readSlave_arinpkg$wget =
	     { S_AXI_arid,
	       S_AXI_araddr,
	       S_AXI_arlen,
	       S_AXI_arsize,
	       S_AXI_arburst,
	       S_AXI_arlock,
	       IF_S_AXI_arcache_EQ_0_04_OR_S_AXI_arcache_EQ_1_ETC___d219 } ;
  assign writeMaster_addrOut_rv$EN_port0__write =
	     writeMaster_in$EMPTY_N && !writeMaster_addrOut_rv[67] &&
	     !writeMaster_dataOut_rv[72] ;
  assign writeMaster_addrOut_rv$port0__write_1 =
	     { 1'd1,
	       writeMaster_in$D_OUT[138:75],
	       writeMaster_in$D_OUT[2:0] } ;
  assign writeMaster_addrOut_rv$port1__read =
	     writeMaster_addrOut_rv$EN_port0__write ?
	       writeMaster_addrOut_rv$port0__write_1 :
	       writeMaster_addrOut_rv ;
  assign writeMaster_addrOut_rv$EN_port1__write =
	     writeMaster_addrOut_rv$port1__read[67] && M_AXI_awready ;
  assign writeMaster_addrOut_rv$port2__read =
	     writeMaster_addrOut_rv$EN_port1__write ?
	       68'h2AAAAAAAAAAAAAAAA :
	       writeMaster_addrOut_rv$port1__read ;
  assign writeMaster_dataOut_rv$EN_port0__write =
	     writeMaster_in$EMPTY_N && !writeMaster_addrOut_rv[67] &&
	     !writeMaster_dataOut_rv[72] ;
  assign writeMaster_dataOut_rv$port0__write_1 =
	     { 1'd1, writeMaster_in$D_OUT[74:3] } ;
  assign writeMaster_dataOut_rv$port1__read =
	     writeMaster_dataOut_rv$EN_port0__write ?
	       writeMaster_dataOut_rv$port0__write_1 :
	       writeMaster_dataOut_rv ;
  assign writeMaster_dataOut_rv$EN_port1__write =
	     writeMaster_dataOut_rv$port1__read[72] && M_AXI_wready ;
  assign writeMaster_dataOut_rv$port2__read =
	     writeMaster_dataOut_rv$EN_port1__write ?
	       73'h0AAAAAAAAAAAAAAAAAA :
	       writeMaster_dataOut_rv$port1__read ;

  // register writeMaster_addrOut_rv
  assign writeMaster_addrOut_rv$D_IN = writeMaster_addrOut_rv$port2__read ;
  assign writeMaster_addrOut_rv$EN = 1'b1 ;

  // register writeMaster_dataOut_rv
  assign writeMaster_dataOut_rv$D_IN = writeMaster_dataOut_rv$port2__read ;
  assign writeMaster_dataOut_rv$EN = 1'b1 ;

  // submodule addr
  assign addr$D_IN = { readSlave_in$D_OUT[34:33], 3'd0 } ;
  assign addr$ENQ =
	     readSlave_in$EMPTY_N && readMaster_in$FULL_N && addr$FULL_N ;
  assign addr$DEQ =
	     readMaster_out$EMPTY_N && addr$EMPTY_N && readSlave_out$FULL_N ;
  assign addr$CLR = 1'b0 ;

  // submodule readMaster_in
  assign readMaster_in$D_IN = { addr_t__h5532, 3'd0 } ;
  assign readMaster_in$ENQ =
	     readSlave_in$EMPTY_N && readMaster_in$FULL_N && addr$FULL_N ;
  assign readMaster_in$DEQ = readMaster_in$EMPTY_N && M_AXI_arready ;
  assign readMaster_in$CLR = 1'b0 ;

  // submodule readMaster_out
  assign readMaster_out$D_IN = { M_AXI_rdata, M_AXI_rresp } ;
  assign readMaster_out$ENQ = readMaster_out$FULL_N && M_AXI_rvalid ;
  assign readMaster_out$DEQ =
	     readMaster_out$EMPTY_N && addr$EMPTY_N && readSlave_out$FULL_N ;
  assign readMaster_out$CLR = 1'b0 ;

  // submodule readSlave_in
  assign readSlave_in$D_IN =
	     { readSlave_arinpkg$wget[96:16],
	       CASE_readSlave_arinpkgwget_BITS_15_TO_12_0_re_ETC__q3,
	       readSlave_arinpkg$wget[11:0] } ;
  assign readSlave_in$ENQ = readSlave_in$FULL_N && S_AXI_arvalid ;
  assign readSlave_in$DEQ =
	     readSlave_in$EMPTY_N && readMaster_in$FULL_N && addr$FULL_N ;
  assign readSlave_in$CLR = 1'b0 ;

  // submodule readSlave_out
  assign readSlave_out$D_IN =
	     { 3'd0, x_data__h5774, readMaster_out$D_OUT[1:0], 2'd2 } ;
  assign readSlave_out$ENQ =
	     readMaster_out$EMPTY_N && addr$EMPTY_N && readSlave_out$FULL_N ;
  assign readSlave_out$DEQ = readSlave_out$EMPTY_N && S_AXI_rready ;
  assign readSlave_out$CLR = 1'b0 ;

  // submodule writeMaster_in
  assign writeMaster_in$D_IN =
	     { writeSlave_in_addr$D_OUT[93:30],
	       x_data__h4770,
	       x_strb__h4771,
	       3'd0 } ;
  assign writeMaster_in$ENQ =
	     writeSlave_in_addr$EMPTY_N && writeSlave_in_data$EMPTY_N &&
	     writeMaster_in$FULL_N ;
  assign writeMaster_in$DEQ =
	     writeMaster_in$EMPTY_N && !writeMaster_addrOut_rv[67] &&
	     !writeMaster_dataOut_rv[72] ;
  assign writeMaster_in$CLR = 1'b0 ;

  // submodule writeMaster_out
  assign writeMaster_out$D_IN = M_AXI_bresp ;
  assign writeMaster_out$ENQ = writeMaster_out$FULL_N && M_AXI_bvalid ;
  assign writeMaster_out$DEQ =
	     writeMaster_out$EMPTY_N && writeSlave_out$FULL_N ;
  assign writeMaster_out$CLR = 1'b0 ;

  // submodule writeSlave_in_addr
  assign writeSlave_in_addr$D_IN =
	     { writeSlave_arinpkg_addr$wget[96:16],
	       CASE_writeSlave_arinpkg_addrwget_BITS_15_TO_1_ETC__q4,
	       writeSlave_arinpkg_addr$wget[11:0] } ;
  assign writeSlave_in_addr$ENQ = writeSlave_in_addr$FULL_N && S_AXI_awvalid ;
  assign writeSlave_in_addr$DEQ =
	     writeSlave_in_addr$EMPTY_N && writeSlave_in_data$EMPTY_N &&
	     writeMaster_in$FULL_N ;
  assign writeSlave_in_addr$CLR = 1'b0 ;

  // submodule writeSlave_in_data
  assign writeSlave_in_data$D_IN = writeSlave_arinpkg_data$wget ;
  assign writeSlave_in_data$ENQ = writeSlave_in_data$FULL_N && S_AXI_wvalid ;
  assign writeSlave_in_data$DEQ =
	     writeSlave_in_addr$EMPTY_N && writeSlave_in_data$EMPTY_N &&
	     writeMaster_in$FULL_N ;
  assign writeSlave_in_data$CLR = 1'b0 ;

  // submodule writeSlave_out
  assign writeSlave_out$D_IN = { 3'd0, writeMaster_out$D_OUT, 1'd0 } ;
  assign writeSlave_out$ENQ =
	     writeMaster_out$EMPTY_N && writeSlave_out$FULL_N ;
  assign writeSlave_out$DEQ = writeSlave_out$EMPTY_N && S_AXI_bready ;
  assign writeSlave_out$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_S_AXI_arcache_EQ_0_04_OR_S_AXI_arcache_EQ_1_ETC___d219 =
	     { CASE_S_AXI_arcache_0_S_AXI_arcache_1_S_AXI_arc_ETC__q1,
	       S_AXI_arprot,
	       S_AXI_arqos,
	       S_AXI_arregion,
	       S_AXI_aruser } ;
  assign IF_S_AXI_awcache_EQ_0_33_OR_S_AXI_awcache_EQ_1_ETC___d248 =
	     { CASE_S_AXI_awcache_0_S_AXI_awcache_1_S_AXI_awc_ETC__q2,
	       S_AXI_awprot,
	       S_AXI_awqos,
	       S_AXI_awregion,
	       S_AXI_awuser } ;
  assign addr_t__h5532 = { readSlave_in$D_OUT[93:33], 3'd0 } ;
  assign offset__h5685 = { 6'd0, addr$D_OUT[4:3] } ;
  assign x_data__h4770 =
	     (writeSlave_in_data$D_OUT[29:26] == 4'hF ||
	      writeSlave_in_data$D_OUT[33:30] == 4'hF) ?
	       writeSlave_in_data$D_OUT[289:226] :
	       ((writeSlave_in_data$D_OUT[21:18] == 4'hF ||
		 writeSlave_in_data$D_OUT[25:22] == 4'hF) ?
		  writeSlave_in_data$D_OUT[225:162] :
		  ((writeSlave_in_data$D_OUT[13:10] == 4'hF ||
		    writeSlave_in_data$D_OUT[17:14] == 4'hF) ?
		     writeSlave_in_data$D_OUT[161:98] :
		     ((writeSlave_in_data$D_OUT[5:2] == 4'hF ||
		       writeSlave_in_data$D_OUT[9:6] == 4'hF) ?
			writeSlave_in_data$D_OUT[97:34] :
			64'd0))) ;
  assign x_data__h5774 =
	     { 192'd0, readMaster_out$D_OUT[65:2] } <<
	     { addr$D_OUT[4:3], 6'd0 } ;
  assign x_strb__h4771 =
	     (writeSlave_in_data$D_OUT[29:26] == 4'hF ||
	      writeSlave_in_data$D_OUT[33:30] == 4'hF) ?
	       writeSlave_in_data$D_OUT[33:26] :
	       ((writeSlave_in_data$D_OUT[21:18] == 4'hF ||
		 writeSlave_in_data$D_OUT[25:22] == 4'hF) ?
		  writeSlave_in_data$D_OUT[25:18] :
		  ((writeSlave_in_data$D_OUT[13:10] == 4'hF ||
		    writeSlave_in_data$D_OUT[17:14] == 4'hF) ?
		     writeSlave_in_data$D_OUT[17:10] :
		     ((writeSlave_in_data$D_OUT[5:2] == 4'hF ||
		       writeSlave_in_data$D_OUT[9:6] == 4'hF) ?
			writeSlave_in_data$D_OUT[9:2] :
			8'd0))) ;
  always@(S_AXI_arcache)
  begin
    case (S_AXI_arcache)
      4'd0, 4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  CASE_S_AXI_arcache_0_S_AXI_arcache_1_S_AXI_arc_ETC__q1 =
	      S_AXI_arcache;
      default: CASE_S_AXI_arcache_0_S_AXI_arcache_1_S_AXI_arc_ETC__q1 = 4'd11;
    endcase
  end
  always@(S_AXI_awcache)
  begin
    case (S_AXI_awcache)
      4'd0, 4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  CASE_S_AXI_awcache_0_S_AXI_awcache_1_S_AXI_awc_ETC__q2 =
	      S_AXI_awcache;
      default: CASE_S_AXI_awcache_0_S_AXI_awcache_1_S_AXI_awc_ETC__q2 = 4'd15;
    endcase
  end
  always@(readSlave_arinpkg$wget)
  begin
    case (readSlave_arinpkg$wget[15:12])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  CASE_readSlave_arinpkgwget_BITS_15_TO_12_0_re_ETC__q3 =
	      readSlave_arinpkg$wget[15:12];
      default: CASE_readSlave_arinpkgwget_BITS_15_TO_12_0_re_ETC__q3 = 4'd11;
    endcase
  end
  always@(writeSlave_arinpkg_addr$wget)
  begin
    case (writeSlave_arinpkg_addr$wget[15:12])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  CASE_writeSlave_arinpkg_addrwget_BITS_15_TO_1_ETC__q4 =
	      writeSlave_arinpkg_addr$wget[15:12];
      default: CASE_writeSlave_arinpkg_addrwget_BITS_15_TO_1_ETC__q4 = 4'd15;
    endcase
  end

  // handling of inlined registers

  always@(posedge S_AXI_ACLK)
  begin
    if (S_AXI_ARESETN == `BSV_RESET_VALUE)
      begin
        writeMaster_addrOut_rv <= `BSV_ASSIGNMENT_DELAY 68'h2AAAAAAAAAAAAAAAA;
	writeMaster_dataOut_rv <= `BSV_ASSIGNMENT_DELAY
	    73'h0AAAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (writeMaster_addrOut_rv$EN)
	  writeMaster_addrOut_rv <= `BSV_ASSIGNMENT_DELAY
	      writeMaster_addrOut_rv$D_IN;
	if (writeMaster_dataOut_rv$EN)
	  writeMaster_dataOut_rv <= `BSV_ASSIGNMENT_DELAY
	      writeMaster_dataOut_rv$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    writeMaster_addrOut_rv = 68'hAAAAAAAAAAAAAAAAA;
    writeMaster_dataOut_rv = 73'h0AAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge S_AXI_ACLK)
  begin
    #0;
    if (S_AXI_ARESETN != `BSV_RESET_VALUE)
      if (readSlave_in$EMPTY_N && readMaster_in$FULL_N && addr$FULL_N)
	$display("%d", addr_t__h5532);
    if (S_AXI_ARESETN != `BSV_RESET_VALUE)
      if (readMaster_out$EMPTY_N && addr$EMPTY_N && readSlave_out$FULL_N)
	$display("%d", offset__h5685);
  end
  // synopsys translate_on
endmodule  // mkPCIeBridgeToLite

