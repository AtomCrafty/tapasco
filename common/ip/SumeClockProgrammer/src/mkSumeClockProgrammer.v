//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Thu Aug 30 13:04:17 CEST 2018
//
//
// Ports:
// Name                         I/O  size props
// resetSwitch                    O     1 reg
// resetClock                     O     1 reg
// scl_debug                      O     1
// sda_debug                      O     1
// ident                          O    16 reg
// step                           O     8 reg
// led                            O     1 reg
// CLK_gt_clk                     I     1 clock
// RST_N_gt_rst_n                 I     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// SDA                           IO     1 inout
// SCL                           IO     1 inout
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSumeClockProgrammer(CLK_gt_clk,
			     RST_N_gt_rst_n,
			     CLK,
			     RST_N,

			     .SDA(i2c_tSDA$IO),
			     .SCL(i2c_tSCL$IO),

			     resetSwitch,

			     resetClock,

			     scl_debug,

			     sda_debug,

			     ident,

			     step,

			     led);
  input  CLK_gt_clk;
  input  RST_N_gt_rst_n;
  input  CLK;
  input  RST_N;

  inout  i2c_tSDA$IO;
  inout  i2c_tSCL$IO;

  // value method resetSwitch
  output resetSwitch;

  // value method resetClock
  output resetClock;

  // value method scl_debug
  output scl_debug;

  // value method sda_debug
  output sda_debug;

  // value method ident
  output [15 : 0] ident;

  // value method step
  output [7 : 0] step;

  // value method led
  output led;

  // signals for module outputs
  wire [15 : 0] ident;
  wire [7 : 0] step;
  wire led, resetClock, resetSwitch, scl_debug, sda_debug;

  // inlined wires
  wire programFSM_start_wire$whas, programFSM_state_set_pw$whas;

  // register clk_cntr
  reg [31 : 0] clk_cntr;
  wire [31 : 0] clk_cntr$D_IN;
  wire clk_cntr$EN;

  // register clockResetW
  reg clockResetW;
  wire clockResetW$D_IN, clockResetW$EN;

  // register i2c_rAddress
  reg [7 : 0] i2c_rAddress;
  wire [7 : 0] i2c_rAddress$D_IN;
  wire i2c_rAddress$EN;

  // register i2c_rOutEn
  reg i2c_rOutEn;
  wire i2c_rOutEn$D_IN, i2c_rOutEn$EN;

  // register i2c_rSCL
  reg i2c_rSCL;
  wire i2c_rSCL$D_IN, i2c_rSCL$EN;

  // register i2c_rSDA
  reg i2c_rSDA;
  wire i2c_rSDA$D_IN, i2c_rSDA$EN;

  // register i2c_rSlaveAddr
  reg [6 : 0] i2c_rSlaveAddr;
  wire [6 : 0] i2c_rSlaveAddr$D_IN;
  wire i2c_rSlaveAddr$EN;

  // register i2c_rState
  reg i2c_rState;
  wire i2c_rState$D_IN, i2c_rState$EN;

  // register i2c_rWrite
  reg i2c_rWrite;
  wire i2c_rWrite$D_IN, i2c_rWrite$EN;

  // register i2c_rWriteData
  reg [7 : 0] i2c_rWriteData;
  wire [7 : 0] i2c_rWriteData$D_IN;
  wire i2c_rWriteData$EN;

  // register i2c_vrReadData_0
  reg i2c_vrReadData_0;
  wire i2c_vrReadData_0$D_IN, i2c_vrReadData_0$EN;

  // register i2c_vrReadData_1
  reg i2c_vrReadData_1;
  wire i2c_vrReadData_1$D_IN, i2c_vrReadData_1$EN;

  // register i2c_vrReadData_2
  reg i2c_vrReadData_2;
  wire i2c_vrReadData_2$D_IN, i2c_vrReadData_2$EN;

  // register i2c_vrReadData_3
  reg i2c_vrReadData_3;
  wire i2c_vrReadData_3$D_IN, i2c_vrReadData_3$EN;

  // register i2c_vrReadData_4
  reg i2c_vrReadData_4;
  wire i2c_vrReadData_4$D_IN, i2c_vrReadData_4$EN;

  // register i2c_vrReadData_5
  reg i2c_vrReadData_5;
  wire i2c_vrReadData_5$D_IN, i2c_vrReadData_5$EN;

  // register i2c_vrReadData_6
  reg i2c_vrReadData_6;
  wire i2c_vrReadData_6$D_IN, i2c_vrReadData_6$EN;

  // register i2c_vrReadData_7
  reg i2c_vrReadData_7;
  wire i2c_vrReadData_7$D_IN, i2c_vrReadData_7$EN;

  // register ident_reg
  reg [15 : 0] ident_reg;
  wire [15 : 0] ident_reg$D_IN;
  wire ident_reg$EN;

  // register init
  reg init;
  wire init$D_IN, init$EN;

  // register led_out
  reg led_out;
  wire led_out$D_IN, led_out$EN;

  // register programCntr
  reg [7 : 0] programCntr;
  wire [7 : 0] programCntr$D_IN;
  wire programCntr$EN;

  // register programFSM_jj_1_delay_count
  reg [20 : 0] programFSM_jj_1_delay_count;
  wire [20 : 0] programFSM_jj_1_delay_count$D_IN;
  wire programFSM_jj_1_delay_count$EN;

  // register programFSM_jj_2_delay_count
  reg [16 : 0] programFSM_jj_2_delay_count;
  wire [16 : 0] programFSM_jj_2_delay_count$D_IN;
  wire programFSM_jj_2_delay_count$EN;

  // register programFSM_jj_3_delay_count
  reg [16 : 0] programFSM_jj_3_delay_count;
  wire [16 : 0] programFSM_jj_3_delay_count$D_IN;
  wire programFSM_jj_3_delay_count$EN;

  // register programFSM_jj_4_delay_count
  reg [16 : 0] programFSM_jj_4_delay_count;
  wire [16 : 0] programFSM_jj_4_delay_count$D_IN;
  wire programFSM_jj_4_delay_count$EN;

  // register programFSM_jj_delay_count
  reg [20 : 0] programFSM_jj_delay_count;
  wire [20 : 0] programFSM_jj_delay_count$D_IN;
  wire programFSM_jj_delay_count$EN;

  // register programFSM_start_reg
  reg programFSM_start_reg;
  wire programFSM_start_reg$D_IN, programFSM_start_reg$EN;

  // register programFSM_start_reg_1
  reg programFSM_start_reg_1;
  wire programFSM_start_reg_1$D_IN, programFSM_start_reg_1$EN;

  // register programFSM_state_can_overlap
  reg programFSM_state_can_overlap;
  wire programFSM_state_can_overlap$D_IN, programFSM_state_can_overlap$EN;

  // register programFSM_state_fired
  reg programFSM_state_fired;
  wire programFSM_state_fired$D_IN, programFSM_state_fired$EN;

  // register programFSM_state_mkFSMstate
  reg [4 : 0] programFSM_state_mkFSMstate;
  reg [4 : 0] programFSM_state_mkFSMstate$D_IN;
  wire programFSM_state_mkFSMstate$EN;

  // register returnValue
  reg [7 : 0] returnValue;
  wire [7 : 0] returnValue$D_IN;
  wire returnValue$EN;

  // register step_reg
  reg [7 : 0] step_reg;
  wire [7 : 0] step_reg$D_IN;
  wire step_reg$EN;

  // register switchResetW
  reg switchResetW;
  wire switchResetW$D_IN, switchResetW$EN;

  // ports of submodule i2c_fRequest
  reg [23 : 0] i2c_fRequest$D_IN;
  wire [23 : 0] i2c_fRequest$D_OUT;
  wire i2c_fRequest$CLR,
       i2c_fRequest$DEQ,
       i2c_fRequest$EMPTY_N,
       i2c_fRequest$ENQ,
       i2c_fRequest$FULL_N;

  // ports of submodule i2c_fResponse
  wire [7 : 0] i2c_fResponse$D_IN, i2c_fResponse$D_OUT;
  wire i2c_fResponse$CLR,
       i2c_fResponse$DEQ,
       i2c_fResponse$EMPTY_N,
       i2c_fResponse$ENQ,
       i2c_fResponse$FULL_N;

  // ports of submodule i2c_rPlayIndex
  wire [9 : 0] i2c_rPlayIndex$DATA_A,
	       i2c_rPlayIndex$DATA_B,
	       i2c_rPlayIndex$DATA_C,
	       i2c_rPlayIndex$DATA_F,
	       i2c_rPlayIndex$Q_OUT;
  wire i2c_rPlayIndex$ADDA,
       i2c_rPlayIndex$ADDB,
       i2c_rPlayIndex$SETC,
       i2c_rPlayIndex$SETF;

  // ports of submodule i2c_rPrescaler
  wire [31 : 0] i2c_rPrescaler$DATA_A,
		i2c_rPrescaler$DATA_B,
		i2c_rPrescaler$DATA_C,
		i2c_rPrescaler$DATA_F,
		i2c_rPrescaler$Q_OUT;
  wire i2c_rPrescaler$ADDA,
       i2c_rPrescaler$ADDB,
       i2c_rPrescaler$SETC,
       i2c_rPrescaler$SETF;

  // ports of submodule i2c_tSCL
  wire i2c_tSCL$IO, i2c_tSCL$O;

  // ports of submodule i2c_tSDA
  wire i2c_tSDA$IO, i2c_tSDA$O;

  // rule scheduling signals
  wire WILL_FIRE_RL_i2c_done_read,
       WILL_FIRE_RL_i2c_done_write,
       WILL_FIRE_RL_i2c_running_read,
       WILL_FIRE_RL_i2c_running_write,
       WILL_FIRE_RL_programFSM_action_f_init_l145c13,
       WILL_FIRE_RL_programFSM_action_l111c16,
       WILL_FIRE_RL_programFSM_action_l111c16_1,
       WILL_FIRE_RL_programFSM_action_l117c13,
       WILL_FIRE_RL_programFSM_action_l117c13_1,
       WILL_FIRE_RL_programFSM_action_l132c13,
       WILL_FIRE_RL_programFSM_action_l138c13,
       WILL_FIRE_RL_programFSM_action_l147c26,
       WILL_FIRE_RL_programFSM_action_l151c13,
       WILL_FIRE_RL_programFSM_action_l157c13,
       WILL_FIRE_RL_programFSM_action_l93c16,
       WILL_FIRE_RL_programFSM_action_l99c13,
       WILL_FIRE_RL_programFSM_action_np,
       WILL_FIRE_RL_programFSM_action_np_1,
       WILL_FIRE_RL_programFSM_action_np_2,
       WILL_FIRE_RL_programFSM_action_np_3,
       WILL_FIRE_RL_programFSM_action_np_4,
       WILL_FIRE_RL_programFSM_fsm_start,
       WILL_FIRE_RL_programFSM_idle_l131c9;

  // inputs to muxes for submodule ports
  wire [23 : 0] MUX_i2c_fRequest$enq_1__VAL_1;
  wire [20 : 0] MUX_programFSM_jj_1_delay_count$write_1__VAL_1,
		MUX_programFSM_jj_delay_count$write_1__VAL_1;
  wire [16 : 0] MUX_programFSM_jj_2_delay_count$write_1__VAL_1,
		MUX_programFSM_jj_3_delay_count$write_1__VAL_1,
		MUX_programFSM_jj_4_delay_count$write_1__VAL_1;
  wire [15 : 0] MUX_ident_reg$write_1__VAL_1, MUX_ident_reg$write_1__VAL_2;
  wire [7 : 0] MUX_i2c_fResponse$enq_1__VAL_1, MUX_programCntr$write_1__VAL_1;
  wire MUX_i2c_rOutEn$write_1__SEL_1,
       MUX_i2c_rOutEn$write_1__VAL_1,
       MUX_i2c_rOutEn$write_1__VAL_2,
       MUX_i2c_rSCL$write_1__VAL_1,
       MUX_i2c_rSCL$write_1__VAL_2,
       MUX_i2c_rSDA$write_1__VAL_1,
       MUX_i2c_rSDA$write_1__VAL_2,
       MUX_i2c_rState$write_1__SEL_1,
       MUX_i2c_rState$write_1__SEL_2,
       MUX_programFSM_start_reg$write_1__SEL_2;

  // remaining internal signals
  reg [7 : 0] x__h48216, x__h48526;
  reg [6 : 0] x_slaveaddr__h95803;
  wire [119 : 0] _1044393425259576759155060135206397075__q5,
		 _1329227987119335533342540869413109767__q3,
		 _306783360__q1,
		 wRdData__h1319;
  wire [86 : 0] _121583396715528419856163987__q4,
		_154742503901866210315206599__q2,
		wWrData__h1323;
  wire [2 : 0] a0__h1308,
	       a1__h1307,
	       a2__h1306,
	       a3__h1305,
	       a4__h1304,
	       a5__h1303,
	       a6__h1302,
	       a7__h1301,
	       d0__h1317,
	       d1__h1316,
	       d2__h1315,
	       d3__h1314,
	       d4__h1313,
	       d5__h1312,
	       d6__h1311,
	       d7__h1310,
	       s0__h1299,
	       s1__h1298,
	       s2__h1297,
	       s3__h1296,
	       s4__h1295,
	       s5__h1294,
	       s6__h1293;
  wire _306783360_BIT_i2c_rPlayIndex_value__8_BITS_6_T_ETC___d108,
       programFSM_abort_whas__36_AND_programFSM_abort_ETC___d291;

  // value method resetSwitch
  assign resetSwitch = switchResetW ;

  // value method resetClock
  assign resetClock = clockResetW ;

  // value method scl_debug
  assign scl_debug = i2c_tSCL$O ;

  // value method sda_debug
  assign sda_debug = i2c_tSDA$O ;

  // value method ident
  assign ident = ident_reg ;

  // value method step
  assign step = step_reg ;

  // value method led
  assign led = led_out ;

  // submodule i2c_fRequest
  SizedFIFO #(.p1width(32'd24),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) i2c_fRequest(.RST(RST_N),
					    .CLK(CLK),
					    .D_IN(i2c_fRequest$D_IN),
					    .ENQ(i2c_fRequest$ENQ),
					    .DEQ(i2c_fRequest$DEQ),
					    .CLR(i2c_fRequest$CLR),
					    .D_OUT(i2c_fRequest$D_OUT),
					    .FULL_N(i2c_fRequest$FULL_N),
					    .EMPTY_N(i2c_fRequest$EMPTY_N));

  // submodule i2c_fResponse
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) i2c_fResponse(.RST(RST_N),
					     .CLK(CLK),
					     .D_IN(i2c_fResponse$D_IN),
					     .ENQ(i2c_fResponse$ENQ),
					     .DEQ(i2c_fResponse$DEQ),
					     .CLR(i2c_fResponse$CLR),
					     .D_OUT(i2c_fResponse$D_OUT),
					     .FULL_N(i2c_fResponse$FULL_N),
					     .EMPTY_N(i2c_fResponse$EMPTY_N));

  // submodule i2c_rPlayIndex
  Counter #(.width(32'd10), .init(10'd0)) i2c_rPlayIndex(.CLK(CLK),
							 .RST(RST_N),
							 .DATA_A(i2c_rPlayIndex$DATA_A),
							 .DATA_B(i2c_rPlayIndex$DATA_B),
							 .DATA_C(i2c_rPlayIndex$DATA_C),
							 .DATA_F(i2c_rPlayIndex$DATA_F),
							 .ADDA(i2c_rPlayIndex$ADDA),
							 .ADDB(i2c_rPlayIndex$ADDB),
							 .SETC(i2c_rPlayIndex$SETC),
							 .SETF(i2c_rPlayIndex$SETF),
							 .Q_OUT(i2c_rPlayIndex$Q_OUT));

  // submodule i2c_rPrescaler
  Counter #(.width(32'd32), .init(32'd5000)) i2c_rPrescaler(.CLK(CLK),
							    .RST(RST_N),
							    .DATA_A(i2c_rPrescaler$DATA_A),
							    .DATA_B(i2c_rPrescaler$DATA_B),
							    .DATA_C(i2c_rPrescaler$DATA_C),
							    .DATA_F(i2c_rPrescaler$DATA_F),
							    .ADDA(i2c_rPrescaler$ADDA),
							    .ADDB(i2c_rPrescaler$ADDB),
							    .SETC(i2c_rPrescaler$SETC),
							    .SETF(i2c_rPrescaler$SETF),
							    .Q_OUT(i2c_rPrescaler$Q_OUT));

  // submodule i2c_tSCL
  TriState #(.width(32'd1)) i2c_tSCL(.I(i2c_rSCL),
				     .OE(1'd1),
				     .O(i2c_tSCL$O),
				     .IO(i2c_tSCL$IO));

  // submodule i2c_tSDA
  TriState #(.width(32'd1)) i2c_tSDA(.I(i2c_rSDA),
				     .OE(i2c_rOutEn),
				     .O(i2c_tSDA$O),
				     .IO(i2c_tSDA$IO));

  // rule RL_i2c_running_write
  assign WILL_FIRE_RL_i2c_running_write =
	     i2c_rState && i2c_rWrite && i2c_rPrescaler$Q_OUT == 32'd0 &&
	     i2c_rPlayIndex$Q_OUT != 10'd0 ;

  // rule RL_i2c_running_read
  assign WILL_FIRE_RL_i2c_running_read =
	     i2c_rState && !i2c_rWrite && i2c_rPrescaler$Q_OUT == 32'd0 &&
	     i2c_rPlayIndex$Q_OUT != 10'd0 ;

  // rule RL_i2c_done_write
  assign WILL_FIRE_RL_i2c_done_write =
	     i2c_fResponse$FULL_N && i2c_rState && i2c_rWrite &&
	     i2c_rPrescaler$Q_OUT == 32'd0 &&
	     i2c_rPlayIndex$Q_OUT == 10'd0 ;

  // rule RL_i2c_done_read
  assign WILL_FIRE_RL_i2c_done_read =
	     i2c_fResponse$FULL_N && i2c_rState && !i2c_rWrite &&
	     i2c_rPrescaler$Q_OUT == 32'd0 &&
	     i2c_rPlayIndex$Q_OUT == 10'd0 ;

  // rule RL_programFSM_action_np
  assign WILL_FIRE_RL_programFSM_action_np =
	     programFSM_jj_delay_count != 21'd1999999 &&
	     (programFSM_state_mkFSMstate == 5'd3 ||
	      programFSM_state_mkFSMstate == 5'd4) ;

  // rule RL_programFSM_action_l138c13
  assign WILL_FIRE_RL_programFSM_action_l138c13 =
	     programFSM_jj_delay_count == 21'd1999999 &&
	     (programFSM_state_mkFSMstate == 5'd3 ||
	      programFSM_state_mkFSMstate == 5'd4) ;

  // rule RL_programFSM_action_np_1
  assign WILL_FIRE_RL_programFSM_action_np_1 =
	     programFSM_jj_1_delay_count != 21'd1999999 &&
	     (programFSM_state_mkFSMstate == 5'd7 ||
	      programFSM_state_mkFSMstate == 5'd8) ;

  // rule RL_programFSM_action_f_init_l145c13
  assign WILL_FIRE_RL_programFSM_action_f_init_l145c13 =
	     programFSM_jj_1_delay_count == 21'd1999999 &&
	     (programFSM_state_mkFSMstate == 5'd7 ||
	      programFSM_state_mkFSMstate == 5'd8) ;

  // rule RL_programFSM_action_l93c16
  assign WILL_FIRE_RL_programFSM_action_l93c16 =
	     i2c_fRequest$FULL_N &&
	     (x_slaveaddr__h95803 != 7'd0 || x__h48216 != 8'd0 ||
	      x__h48526 != 8'd0) &&
	     (programFSM_state_mkFSMstate == 5'd9 ||
	      programFSM_state_mkFSMstate == 5'd15) ;

  // rule RL_programFSM_action_l99c13
  assign WILL_FIRE_RL_programFSM_action_l99c13 =
	     i2c_fResponse$EMPTY_N && programFSM_state_mkFSMstate == 5'd10 ;

  // rule RL_programFSM_action_np_2
  assign WILL_FIRE_RL_programFSM_action_np_2 =
	     programFSM_jj_2_delay_count != 17'd99999 &&
	     (programFSM_state_mkFSMstate == 5'd12 ||
	      programFSM_state_mkFSMstate == 5'd13) ;

  // rule RL_programFSM_action_l147c26
  assign WILL_FIRE_RL_programFSM_action_l147c26 =
	     programFSM_jj_2_delay_count == 17'd99999 &&
	     (programFSM_state_mkFSMstate == 5'd12 ||
	      programFSM_state_mkFSMstate == 5'd13) ;

  // rule RL_programFSM_action_l111c16
  assign WILL_FIRE_RL_programFSM_action_l111c16 =
	     i2c_fRequest$FULL_N && x_slaveaddr__h95803 == 7'd0 &&
	     x__h48216 == 8'd0 &&
	     x__h48526 == 8'd0 &&
	     (programFSM_state_mkFSMstate == 5'd9 ||
	      programFSM_state_mkFSMstate == 5'd15) ;

  // rule RL_programFSM_action_l117c13
  assign WILL_FIRE_RL_programFSM_action_l117c13 =
	     i2c_fResponse$EMPTY_N && programFSM_state_mkFSMstate == 5'd16 ;

  // rule RL_programFSM_action_np_3
  assign WILL_FIRE_RL_programFSM_action_np_3 =
	     programFSM_jj_3_delay_count != 17'd99999 &&
	     (programFSM_state_mkFSMstate == 5'd18 ||
	      programFSM_state_mkFSMstate == 5'd19) ;

  // rule RL_programFSM_action_l151c13
  assign WILL_FIRE_RL_programFSM_action_l151c13 =
	     programFSM_jj_3_delay_count == 17'd99999 &&
	     (programFSM_state_mkFSMstate == 5'd18 ||
	      programFSM_state_mkFSMstate == 5'd19) ;

  // rule RL_programFSM_action_l111c16_1
  assign WILL_FIRE_RL_programFSM_action_l111c16_1 =
	     i2c_fRequest$FULL_N && programFSM_state_mkFSMstate == 5'd21 ;

  // rule RL_programFSM_action_l117c13_1
  assign WILL_FIRE_RL_programFSM_action_l117c13_1 =
	     i2c_fResponse$EMPTY_N && programFSM_state_mkFSMstate == 5'd22 ;

  // rule RL_programFSM_action_np_4
  assign WILL_FIRE_RL_programFSM_action_np_4 =
	     programFSM_jj_4_delay_count != 17'd99999 &&
	     (programFSM_state_mkFSMstate == 5'd24 ||
	      programFSM_state_mkFSMstate == 5'd25) ;

  // rule RL_programFSM_action_l157c13
  assign WILL_FIRE_RL_programFSM_action_l157c13 =
	     programFSM_jj_4_delay_count == 17'd99999 &&
	     (programFSM_state_mkFSMstate == 5'd24 ||
	      programFSM_state_mkFSMstate == 5'd25) ;

  // rule RL_programFSM_fsm_start
  assign WILL_FIRE_RL_programFSM_fsm_start =
	     programFSM_abort_whas__36_AND_programFSM_abort_ETC___d291 &&
	     programFSM_start_reg ;

  // rule RL_programFSM_action_l132c13
  assign WILL_FIRE_RL_programFSM_action_l132c13 =
	     programFSM_start_wire$whas &&
	     (programFSM_state_mkFSMstate == 5'd0 ||
	      programFSM_state_mkFSMstate == 5'd26) ;

  // rule RL_programFSM_idle_l131c9
  assign WILL_FIRE_RL_programFSM_idle_l131c9 =
	     !programFSM_start_wire$whas &&
	     programFSM_state_mkFSMstate == 5'd26 ;

  // inputs to muxes for submodule ports
  assign MUX_i2c_rOutEn$write_1__SEL_1 =
	     WILL_FIRE_RL_i2c_done_write || WILL_FIRE_RL_i2c_running_write ;
  assign MUX_i2c_rState$write_1__SEL_1 =
	     WILL_FIRE_RL_i2c_done_read || WILL_FIRE_RL_i2c_done_write ;
  assign MUX_i2c_rState$write_1__SEL_2 = i2c_fRequest$EMPTY_N && !i2c_rState ;
  assign MUX_programFSM_start_reg$write_1__SEL_2 =
	     programFSM_abort_whas__36_AND_programFSM_abort_ETC___d291 &&
	     !programFSM_start_reg &&
	     !init ;
  assign MUX_i2c_fRequest$enq_1__VAL_1 =
	     { 1'd1, x_slaveaddr__h95803, x__h48216, x__h48526 } ;
  assign MUX_i2c_fResponse$enq_1__VAL_1 =
	     { i2c_vrReadData_7,
	       i2c_vrReadData_6,
	       i2c_vrReadData_5,
	       i2c_vrReadData_4,
	       i2c_vrReadData_3,
	       i2c_vrReadData_2,
	       i2c_vrReadData_1,
	       i2c_vrReadData_0 } ;
  assign MUX_i2c_rOutEn$write_1__VAL_1 =
	     _154742503901866210315206599__q2[i2c_rPlayIndex$Q_OUT[6:0]] ;
  assign MUX_i2c_rOutEn$write_1__VAL_2 =
	     _1329227987119335533342540869413109767__q3[i2c_rPlayIndex$Q_OUT[6:0]] ;
  assign MUX_i2c_rSCL$write_1__VAL_1 =
	     _121583396715528419856163987__q4[i2c_rPlayIndex$Q_OUT[6:0]] ;
  assign MUX_i2c_rSCL$write_1__VAL_2 =
	     _1044393425259576759155060135206397075__q5[i2c_rPlayIndex$Q_OUT[6:0]] ;
  assign MUX_i2c_rSDA$write_1__VAL_1 =
	     wWrData__h1323[i2c_rPlayIndex$Q_OUT[6:0]] ;
  assign MUX_i2c_rSDA$write_1__VAL_2 =
	     wRdData__h1319[i2c_rPlayIndex$Q_OUT[6:0]] ;
  assign MUX_ident_reg$write_1__VAL_1 = { returnValue, 8'd0 } ;
  assign MUX_ident_reg$write_1__VAL_2 = ident_reg | { 8'd0, returnValue } ;
  assign MUX_programCntr$write_1__VAL_1 = programCntr + 8'd1 ;
  assign MUX_programFSM_jj_1_delay_count$write_1__VAL_1 =
	     programFSM_jj_1_delay_count + 21'd1 ;
  assign MUX_programFSM_jj_2_delay_count$write_1__VAL_1 =
	     programFSM_jj_2_delay_count + 17'd1 ;
  assign MUX_programFSM_jj_3_delay_count$write_1__VAL_1 =
	     programFSM_jj_3_delay_count + 17'd1 ;
  assign MUX_programFSM_jj_4_delay_count$write_1__VAL_1 =
	     programFSM_jj_4_delay_count + 17'd1 ;
  assign MUX_programFSM_jj_delay_count$write_1__VAL_1 =
	     programFSM_jj_delay_count + 21'd1 ;

  // inlined wires
  assign programFSM_start_wire$whas =
	     WILL_FIRE_RL_programFSM_fsm_start ||
	     programFSM_start_reg_1 && !programFSM_state_fired ;
  assign programFSM_state_set_pw$whas =
	     WILL_FIRE_RL_programFSM_idle_l131c9 ||
	     WILL_FIRE_RL_programFSM_action_l157c13 ||
	     WILL_FIRE_RL_programFSM_action_np_4 ||
	     programFSM_state_mkFSMstate == 5'd23 ||
	     WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	     WILL_FIRE_RL_programFSM_action_l111c16_1 ||
	     programFSM_state_mkFSMstate == 5'd20 ||
	     WILL_FIRE_RL_programFSM_action_l151c13 ||
	     WILL_FIRE_RL_programFSM_action_np_3 ||
	     programFSM_state_mkFSMstate == 5'd17 ||
	     WILL_FIRE_RL_programFSM_action_l117c13 ||
	     WILL_FIRE_RL_programFSM_action_l111c16 ||
	     programFSM_state_mkFSMstate == 5'd14 ||
	     WILL_FIRE_RL_programFSM_action_l147c26 ||
	     WILL_FIRE_RL_programFSM_action_np_2 ||
	     programFSM_state_mkFSMstate == 5'd11 ||
	     WILL_FIRE_RL_programFSM_action_l99c13 ||
	     WILL_FIRE_RL_programFSM_action_l93c16 ||
	     WILL_FIRE_RL_programFSM_action_f_init_l145c13 ||
	     WILL_FIRE_RL_programFSM_action_np_1 ||
	     programFSM_state_mkFSMstate == 5'd6 ||
	     programFSM_state_mkFSMstate == 5'd5 ||
	     WILL_FIRE_RL_programFSM_action_l138c13 ||
	     WILL_FIRE_RL_programFSM_action_np ||
	     programFSM_state_mkFSMstate == 5'd2 ||
	     programFSM_state_mkFSMstate == 5'd1 ||
	     WILL_FIRE_RL_programFSM_action_l132c13 ;

  // register clk_cntr
  assign clk_cntr$D_IN =
	     (clk_cntr == 32'd0) ? 32'd156000000 : clk_cntr - 32'd1 ;
  assign clk_cntr$EN = 1'd1 ;

  // register clockResetW
  assign clockResetW$D_IN = !WILL_FIRE_RL_programFSM_action_l138c13 ;
  assign clockResetW$EN =
	     WILL_FIRE_RL_programFSM_action_l138c13 ||
	     WILL_FIRE_RL_programFSM_action_l132c13 ;

  // register i2c_rAddress
  assign i2c_rAddress$D_IN = i2c_fRequest$D_OUT[15:8] ;
  assign i2c_rAddress$EN = MUX_i2c_rState$write_1__SEL_2 ;

  // register i2c_rOutEn
  assign i2c_rOutEn$D_IN =
	     MUX_i2c_rOutEn$write_1__SEL_1 ?
	       MUX_i2c_rOutEn$write_1__VAL_1 :
	       MUX_i2c_rOutEn$write_1__VAL_2 ;
  assign i2c_rOutEn$EN =
	     WILL_FIRE_RL_i2c_done_write || WILL_FIRE_RL_i2c_running_write ||
	     WILL_FIRE_RL_i2c_done_read ||
	     WILL_FIRE_RL_i2c_running_read ;

  // register i2c_rSCL
  assign i2c_rSCL$D_IN =
	     MUX_i2c_rOutEn$write_1__SEL_1 ?
	       MUX_i2c_rSCL$write_1__VAL_1 :
	       MUX_i2c_rSCL$write_1__VAL_2 ;
  assign i2c_rSCL$EN =
	     WILL_FIRE_RL_i2c_done_write || WILL_FIRE_RL_i2c_running_write ||
	     WILL_FIRE_RL_i2c_done_read ||
	     WILL_FIRE_RL_i2c_running_read ;

  // register i2c_rSDA
  assign i2c_rSDA$D_IN =
	     MUX_i2c_rOutEn$write_1__SEL_1 ?
	       MUX_i2c_rSDA$write_1__VAL_1 :
	       MUX_i2c_rSDA$write_1__VAL_2 ;
  assign i2c_rSDA$EN =
	     WILL_FIRE_RL_i2c_done_write || WILL_FIRE_RL_i2c_running_write ||
	     WILL_FIRE_RL_i2c_done_read ||
	     WILL_FIRE_RL_i2c_running_read ;

  // register i2c_rSlaveAddr
  assign i2c_rSlaveAddr$D_IN = i2c_fRequest$D_OUT[22:16] ;
  assign i2c_rSlaveAddr$EN = MUX_i2c_rState$write_1__SEL_2 ;

  // register i2c_rState
  assign i2c_rState$D_IN = !MUX_i2c_rState$write_1__SEL_1 ;
  assign i2c_rState$EN =
	     WILL_FIRE_RL_i2c_done_read || WILL_FIRE_RL_i2c_done_write ||
	     i2c_fRequest$EMPTY_N && !i2c_rState ;

  // register i2c_rWrite
  assign i2c_rWrite$D_IN = i2c_fRequest$D_OUT[23] ;
  assign i2c_rWrite$EN = MUX_i2c_rState$write_1__SEL_2 ;

  // register i2c_rWriteData
  assign i2c_rWriteData$D_IN = i2c_fRequest$D_OUT[7:0] ;
  assign i2c_rWriteData$EN = MUX_i2c_rState$write_1__SEL_2 ;

  // register i2c_vrReadData_0
  assign i2c_vrReadData_0$D_IN = i2c_tSDA$O ;
  assign i2c_vrReadData_0$EN =
	     WILL_FIRE_RL_i2c_running_read &&
	     _306783360_BIT_i2c_rPlayIndex_value__8_BITS_6_T_ETC___d108 ;

  // register i2c_vrReadData_1
  assign i2c_vrReadData_1$D_IN = i2c_vrReadData_0 ;
  assign i2c_vrReadData_1$EN =
	     WILL_FIRE_RL_i2c_running_read &&
	     _306783360_BIT_i2c_rPlayIndex_value__8_BITS_6_T_ETC___d108 ;

  // register i2c_vrReadData_2
  assign i2c_vrReadData_2$D_IN = i2c_vrReadData_1 ;
  assign i2c_vrReadData_2$EN =
	     WILL_FIRE_RL_i2c_running_read &&
	     _306783360_BIT_i2c_rPlayIndex_value__8_BITS_6_T_ETC___d108 ;

  // register i2c_vrReadData_3
  assign i2c_vrReadData_3$D_IN = i2c_vrReadData_2 ;
  assign i2c_vrReadData_3$EN =
	     WILL_FIRE_RL_i2c_running_read &&
	     _306783360_BIT_i2c_rPlayIndex_value__8_BITS_6_T_ETC___d108 ;

  // register i2c_vrReadData_4
  assign i2c_vrReadData_4$D_IN = i2c_vrReadData_3 ;
  assign i2c_vrReadData_4$EN =
	     WILL_FIRE_RL_i2c_running_read &&
	     _306783360_BIT_i2c_rPlayIndex_value__8_BITS_6_T_ETC___d108 ;

  // register i2c_vrReadData_5
  assign i2c_vrReadData_5$D_IN = i2c_vrReadData_4 ;
  assign i2c_vrReadData_5$EN =
	     WILL_FIRE_RL_i2c_running_read &&
	     _306783360_BIT_i2c_rPlayIndex_value__8_BITS_6_T_ETC___d108 ;

  // register i2c_vrReadData_6
  assign i2c_vrReadData_6$D_IN = i2c_vrReadData_5 ;
  assign i2c_vrReadData_6$EN =
	     WILL_FIRE_RL_i2c_running_read &&
	     _306783360_BIT_i2c_rPlayIndex_value__8_BITS_6_T_ETC___d108 ;

  // register i2c_vrReadData_7
  assign i2c_vrReadData_7$D_IN = i2c_vrReadData_6 ;
  assign i2c_vrReadData_7$EN =
	     WILL_FIRE_RL_i2c_running_read &&
	     _306783360_BIT_i2c_rPlayIndex_value__8_BITS_6_T_ETC___d108 ;

  // register ident_reg
  assign ident_reg$D_IN =
	     WILL_FIRE_RL_programFSM_action_l151c13 ?
	       MUX_ident_reg$write_1__VAL_1 :
	       MUX_ident_reg$write_1__VAL_2 ;
  assign ident_reg$EN =
	     WILL_FIRE_RL_programFSM_action_l151c13 ||
	     WILL_FIRE_RL_programFSM_action_l157c13 ;

  // register init
  assign init$D_IN = 1'd1 ;
  assign init$EN = MUX_programFSM_start_reg$write_1__SEL_2 ;

  // register led_out
  assign led_out$D_IN = !led_out ;
  assign led_out$EN = clk_cntr == 32'd0 ;

  // register programCntr
  assign programCntr$D_IN =
	     (programFSM_state_mkFSMstate == 5'd14) ?
	       MUX_programCntr$write_1__VAL_1 :
	       8'd0 ;
  assign programCntr$EN =
	     programFSM_state_mkFSMstate == 5'd14 ||
	     WILL_FIRE_RL_programFSM_action_f_init_l145c13 ;

  // register programFSM_jj_1_delay_count
  assign programFSM_jj_1_delay_count$D_IN =
	     WILL_FIRE_RL_programFSM_action_np_1 ?
	       MUX_programFSM_jj_1_delay_count$write_1__VAL_1 :
	       21'd0 ;
  assign programFSM_jj_1_delay_count$EN =
	     WILL_FIRE_RL_programFSM_action_np_1 ||
	     programFSM_state_mkFSMstate == 5'd6 ;

  // register programFSM_jj_2_delay_count
  assign programFSM_jj_2_delay_count$D_IN =
	     WILL_FIRE_RL_programFSM_action_np_2 ?
	       MUX_programFSM_jj_2_delay_count$write_1__VAL_1 :
	       17'd0 ;
  assign programFSM_jj_2_delay_count$EN =
	     WILL_FIRE_RL_programFSM_action_np_2 ||
	     programFSM_state_mkFSMstate == 5'd11 ;

  // register programFSM_jj_3_delay_count
  assign programFSM_jj_3_delay_count$D_IN =
	     WILL_FIRE_RL_programFSM_action_np_3 ?
	       MUX_programFSM_jj_3_delay_count$write_1__VAL_1 :
	       17'd0 ;
  assign programFSM_jj_3_delay_count$EN =
	     WILL_FIRE_RL_programFSM_action_np_3 ||
	     programFSM_state_mkFSMstate == 5'd17 ;

  // register programFSM_jj_4_delay_count
  assign programFSM_jj_4_delay_count$D_IN =
	     WILL_FIRE_RL_programFSM_action_np_4 ?
	       MUX_programFSM_jj_4_delay_count$write_1__VAL_1 :
	       17'd0 ;
  assign programFSM_jj_4_delay_count$EN =
	     WILL_FIRE_RL_programFSM_action_np_4 ||
	     programFSM_state_mkFSMstate == 5'd23 ;

  // register programFSM_jj_delay_count
  assign programFSM_jj_delay_count$D_IN =
	     WILL_FIRE_RL_programFSM_action_np ?
	       MUX_programFSM_jj_delay_count$write_1__VAL_1 :
	       21'd0 ;
  assign programFSM_jj_delay_count$EN =
	     WILL_FIRE_RL_programFSM_action_np ||
	     programFSM_state_mkFSMstate == 5'd2 ;

  // register programFSM_start_reg
  assign programFSM_start_reg$D_IN = !WILL_FIRE_RL_programFSM_fsm_start ;
  assign programFSM_start_reg$EN =
	     WILL_FIRE_RL_programFSM_fsm_start ||
	     programFSM_abort_whas__36_AND_programFSM_abort_ETC___d291 &&
	     !programFSM_start_reg &&
	     !init ;

  // register programFSM_start_reg_1
  assign programFSM_start_reg_1$D_IN = programFSM_start_wire$whas ;
  assign programFSM_start_reg_1$EN = 1'd1 ;

  // register programFSM_state_can_overlap
  assign programFSM_state_can_overlap$D_IN =
	     programFSM_state_set_pw$whas || programFSM_state_can_overlap ;
  assign programFSM_state_can_overlap$EN = 1'd1 ;

  // register programFSM_state_fired
  assign programFSM_state_fired$D_IN = programFSM_state_set_pw$whas ;
  assign programFSM_state_fired$EN = 1'd1 ;

  // register programFSM_state_mkFSMstate
  always@(WILL_FIRE_RL_programFSM_idle_l131c9 or
	  WILL_FIRE_RL_programFSM_action_l132c13 or
	  programFSM_state_mkFSMstate or
	  WILL_FIRE_RL_programFSM_action_np or
	  WILL_FIRE_RL_programFSM_action_l138c13 or
	  WILL_FIRE_RL_programFSM_action_np_1 or
	  WILL_FIRE_RL_programFSM_action_f_init_l145c13 or
	  WILL_FIRE_RL_programFSM_action_l93c16 or
	  WILL_FIRE_RL_programFSM_action_l99c13 or
	  WILL_FIRE_RL_programFSM_action_np_2 or
	  WILL_FIRE_RL_programFSM_action_l147c26 or
	  WILL_FIRE_RL_programFSM_action_l111c16 or
	  WILL_FIRE_RL_programFSM_action_l117c13 or
	  WILL_FIRE_RL_programFSM_action_np_3 or
	  WILL_FIRE_RL_programFSM_action_l151c13 or
	  WILL_FIRE_RL_programFSM_action_l111c16_1 or
	  WILL_FIRE_RL_programFSM_action_l117c13_1 or
	  WILL_FIRE_RL_programFSM_action_np_4 or
	  WILL_FIRE_RL_programFSM_action_l157c13)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_programFSM_idle_l131c9:
	  programFSM_state_mkFSMstate$D_IN = 5'd0;
      WILL_FIRE_RL_programFSM_action_l132c13:
	  programFSM_state_mkFSMstate$D_IN = 5'd1;
      programFSM_state_mkFSMstate == 5'd1:
	  programFSM_state_mkFSMstate$D_IN = 5'd2;
      programFSM_state_mkFSMstate == 5'd2:
	  programFSM_state_mkFSMstate$D_IN = 5'd3;
      WILL_FIRE_RL_programFSM_action_np:
	  programFSM_state_mkFSMstate$D_IN = 5'd4;
      WILL_FIRE_RL_programFSM_action_l138c13:
	  programFSM_state_mkFSMstate$D_IN = 5'd5;
      programFSM_state_mkFSMstate == 5'd5:
	  programFSM_state_mkFSMstate$D_IN = 5'd6;
      programFSM_state_mkFSMstate == 5'd6:
	  programFSM_state_mkFSMstate$D_IN = 5'd7;
      WILL_FIRE_RL_programFSM_action_np_1:
	  programFSM_state_mkFSMstate$D_IN = 5'd8;
      WILL_FIRE_RL_programFSM_action_f_init_l145c13:
	  programFSM_state_mkFSMstate$D_IN = 5'd9;
      WILL_FIRE_RL_programFSM_action_l93c16:
	  programFSM_state_mkFSMstate$D_IN = 5'd10;
      WILL_FIRE_RL_programFSM_action_l99c13:
	  programFSM_state_mkFSMstate$D_IN = 5'd11;
      programFSM_state_mkFSMstate == 5'd11:
	  programFSM_state_mkFSMstate$D_IN = 5'd12;
      WILL_FIRE_RL_programFSM_action_np_2:
	  programFSM_state_mkFSMstate$D_IN = 5'd13;
      WILL_FIRE_RL_programFSM_action_l147c26:
	  programFSM_state_mkFSMstate$D_IN = 5'd14;
      programFSM_state_mkFSMstate == 5'd14:
	  programFSM_state_mkFSMstate$D_IN = 5'd15;
      WILL_FIRE_RL_programFSM_action_l111c16:
	  programFSM_state_mkFSMstate$D_IN = 5'd16;
      WILL_FIRE_RL_programFSM_action_l117c13:
	  programFSM_state_mkFSMstate$D_IN = 5'd17;
      programFSM_state_mkFSMstate == 5'd17:
	  programFSM_state_mkFSMstate$D_IN = 5'd18;
      WILL_FIRE_RL_programFSM_action_np_3:
	  programFSM_state_mkFSMstate$D_IN = 5'd19;
      WILL_FIRE_RL_programFSM_action_l151c13:
	  programFSM_state_mkFSMstate$D_IN = 5'd20;
      programFSM_state_mkFSMstate == 5'd20:
	  programFSM_state_mkFSMstate$D_IN = 5'd21;
      WILL_FIRE_RL_programFSM_action_l111c16_1:
	  programFSM_state_mkFSMstate$D_IN = 5'd22;
      WILL_FIRE_RL_programFSM_action_l117c13_1:
	  programFSM_state_mkFSMstate$D_IN = 5'd23;
      programFSM_state_mkFSMstate == 5'd23:
	  programFSM_state_mkFSMstate$D_IN = 5'd24;
      WILL_FIRE_RL_programFSM_action_np_4:
	  programFSM_state_mkFSMstate$D_IN = 5'd25;
      WILL_FIRE_RL_programFSM_action_l157c13:
	  programFSM_state_mkFSMstate$D_IN = 5'd26;
      default: programFSM_state_mkFSMstate$D_IN =
		   5'b01010 /* unspecified value */ ;
    endcase
  end
  assign programFSM_state_mkFSMstate$EN =
	     WILL_FIRE_RL_programFSM_idle_l131c9 ||
	     WILL_FIRE_RL_programFSM_action_l132c13 ||
	     programFSM_state_mkFSMstate == 5'd1 ||
	     programFSM_state_mkFSMstate == 5'd2 ||
	     WILL_FIRE_RL_programFSM_action_np ||
	     WILL_FIRE_RL_programFSM_action_l138c13 ||
	     programFSM_state_mkFSMstate == 5'd5 ||
	     programFSM_state_mkFSMstate == 5'd6 ||
	     WILL_FIRE_RL_programFSM_action_np_1 ||
	     WILL_FIRE_RL_programFSM_action_f_init_l145c13 ||
	     WILL_FIRE_RL_programFSM_action_l93c16 ||
	     WILL_FIRE_RL_programFSM_action_l99c13 ||
	     programFSM_state_mkFSMstate == 5'd11 ||
	     WILL_FIRE_RL_programFSM_action_np_2 ||
	     WILL_FIRE_RL_programFSM_action_l147c26 ||
	     programFSM_state_mkFSMstate == 5'd14 ||
	     WILL_FIRE_RL_programFSM_action_l111c16 ||
	     WILL_FIRE_RL_programFSM_action_l117c13 ||
	     programFSM_state_mkFSMstate == 5'd17 ||
	     WILL_FIRE_RL_programFSM_action_np_3 ||
	     WILL_FIRE_RL_programFSM_action_l151c13 ||
	     programFSM_state_mkFSMstate == 5'd20 ||
	     WILL_FIRE_RL_programFSM_action_l111c16_1 ||
	     WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	     programFSM_state_mkFSMstate == 5'd23 ||
	     WILL_FIRE_RL_programFSM_action_np_4 ||
	     WILL_FIRE_RL_programFSM_action_l157c13 ;

  // register returnValue
  assign returnValue$D_IN = i2c_fResponse$D_OUT ;
  assign returnValue$EN =
	     WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	     WILL_FIRE_RL_programFSM_action_l117c13 ;

  // register step_reg
  assign step_reg$D_IN = step_reg + 8'd1 ;
  assign step_reg$EN =
	     programFSM_state_mkFSMstate == 5'd20 ||
	     WILL_FIRE_RL_programFSM_action_l147c26 ||
	     programFSM_state_mkFSMstate == 5'd5 ||
	     programFSM_state_mkFSMstate == 5'd1 ;

  // register switchResetW
  assign switchResetW$D_IN = !WILL_FIRE_RL_programFSM_action_l138c13 ;
  assign switchResetW$EN =
	     WILL_FIRE_RL_programFSM_action_l138c13 ||
	     WILL_FIRE_RL_programFSM_action_l132c13 ;

  // submodule i2c_fRequest
  always@(WILL_FIRE_RL_programFSM_action_l93c16 or
	  MUX_i2c_fRequest$enq_1__VAL_1 or
	  WILL_FIRE_RL_programFSM_action_l111c16 or
	  WILL_FIRE_RL_programFSM_action_l111c16_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_programFSM_action_l93c16:
	  i2c_fRequest$D_IN = MUX_i2c_fRequest$enq_1__VAL_1;
      WILL_FIRE_RL_programFSM_action_l111c16: i2c_fRequest$D_IN = 24'd6850048;
      WILL_FIRE_RL_programFSM_action_l111c16_1:
	  i2c_fRequest$D_IN = 24'd6850304;
      default: i2c_fRequest$D_IN =
		   24'b101010101010101010101010 /* unspecified value */ ;
    endcase
  end
  assign i2c_fRequest$ENQ =
	     WILL_FIRE_RL_programFSM_action_l93c16 ||
	     WILL_FIRE_RL_programFSM_action_l111c16 ||
	     WILL_FIRE_RL_programFSM_action_l111c16_1 ;
  assign i2c_fRequest$DEQ = MUX_i2c_rState$write_1__SEL_2 ;
  assign i2c_fRequest$CLR = 1'b0 ;

  // submodule i2c_fResponse
  assign i2c_fResponse$D_IN =
	     WILL_FIRE_RL_i2c_done_read ?
	       MUX_i2c_fResponse$enq_1__VAL_1 :
	       8'd0 ;
  assign i2c_fResponse$ENQ = MUX_i2c_rState$write_1__SEL_1 ;
  assign i2c_fResponse$DEQ =
	     WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	     WILL_FIRE_RL_programFSM_action_l117c13 ||
	     WILL_FIRE_RL_programFSM_action_l99c13 ;
  assign i2c_fResponse$CLR = 1'b0 ;

  // submodule i2c_rPlayIndex
  assign i2c_rPlayIndex$DATA_A = 10'h0 ;
  assign i2c_rPlayIndex$DATA_B = 10'd1023 ;
  assign i2c_rPlayIndex$DATA_C = 10'h0 ;
  assign i2c_rPlayIndex$DATA_F = i2c_fRequest$D_OUT[23] ? 10'd86 : 10'd119 ;
  assign i2c_rPlayIndex$ADDA = 1'b0 ;
  assign i2c_rPlayIndex$ADDB =
	     WILL_FIRE_RL_i2c_done_write || WILL_FIRE_RL_i2c_running_read ||
	     WILL_FIRE_RL_i2c_running_write ;
  assign i2c_rPlayIndex$SETC = 1'b0 ;
  assign i2c_rPlayIndex$SETF = MUX_i2c_rState$write_1__SEL_2 ;

  // submodule i2c_rPrescaler
  assign i2c_rPrescaler$DATA_A = 32'h0 ;
  assign i2c_rPrescaler$DATA_B = 32'hFFFFFFFF ;
  assign i2c_rPrescaler$DATA_C = 32'h0 ;
  assign i2c_rPrescaler$DATA_F = 32'd5000 ;
  assign i2c_rPrescaler$ADDA = 1'b0 ;
  assign i2c_rPrescaler$ADDB = i2c_rPrescaler$Q_OUT != 32'd0 ;
  assign i2c_rPrescaler$SETC = 1'b0 ;
  assign i2c_rPrescaler$SETF = i2c_rPrescaler$Q_OUT == 32'd0 ;

  // remaining internal signals
  assign _1044393425259576759155060135206397075__q5 =
	     120'hC92492492492493E92492492492493 ;
  assign _121583396715528419856163987__q4 = 87'h6492492492492492492493 ;
  assign _1329227987119335533342540869413109767__q3 =
	     120'hFFFFFFE3FFFFFC7FFFFFFE00000007 ;
  assign _154742503901866210315206599__q2 = 87'h7FFFFFF1FFFFFE3FFFFFC7 ;
  assign _306783360_BIT_i2c_rPlayIndex_value__8_BITS_6_T_ETC___d108 =
	     _306783360__q1[i2c_rPlayIndex$Q_OUT[6:0]] ;
  assign _306783360__q1 = 120'd306783360 ;
  assign a0__h1308 = {3{i2c_rAddress[0]}} ;
  assign a1__h1307 = {3{i2c_rAddress[1]}} ;
  assign a2__h1306 = {3{i2c_rAddress[2]}} ;
  assign a3__h1305 = {3{i2c_rAddress[3]}} ;
  assign a4__h1304 = {3{i2c_rAddress[4]}} ;
  assign a5__h1303 = {3{i2c_rAddress[5]}} ;
  assign a6__h1302 = {3{i2c_rAddress[6]}} ;
  assign a7__h1301 = {3{i2c_rAddress[7]}} ;
  assign d0__h1317 = {3{i2c_rWriteData[0]}} ;
  assign d1__h1316 = {3{i2c_rWriteData[1]}} ;
  assign d2__h1315 = {3{i2c_rWriteData[2]}} ;
  assign d3__h1314 = {3{i2c_rWriteData[3]}} ;
  assign d4__h1313 = {3{i2c_rWriteData[4]}} ;
  assign d5__h1312 = {3{i2c_rWriteData[5]}} ;
  assign d6__h1311 = {3{i2c_rWriteData[6]}} ;
  assign d7__h1310 = {3{i2c_rWriteData[7]}} ;
  assign programFSM_abort_whas__36_AND_programFSM_abort_ETC___d291 =
	     (programFSM_state_mkFSMstate == 5'd0 ||
	      programFSM_state_mkFSMstate == 5'd26) &&
	     (!programFSM_start_reg_1 || programFSM_state_fired) ;
  assign s0__h1299 = {3{i2c_rSlaveAddr[0]}} ;
  assign s1__h1298 = {3{i2c_rSlaveAddr[1]}} ;
  assign s2__h1297 = {3{i2c_rSlaveAddr[2]}} ;
  assign s3__h1296 = {3{i2c_rSlaveAddr[3]}} ;
  assign s4__h1295 = {3{i2c_rSlaveAddr[4]}} ;
  assign s5__h1294 = {3{i2c_rSlaveAddr[5]}} ;
  assign s6__h1293 = {3{i2c_rSlaveAddr[6]}} ;
  assign wRdData__h1319 =
	     { 3'b100,
	       s6__h1293,
	       s5__h1294,
	       s4__h1295,
	       s3__h1296,
	       s2__h1297,
	       s1__h1298,
	       s0__h1299,
	       6'd0,
	       a7__h1301,
	       a6__h1302,
	       a5__h1303,
	       a4__h1304,
	       a3__h1305,
	       a2__h1306,
	       a1__h1307,
	       a0__h1308,
	       9'd14,
	       s6__h1293,
	       s5__h1294,
	       s4__h1295,
	       s3__h1296,
	       s2__h1297,
	       s1__h1298,
	       s0__h1299,
	       36'hE00000001 } ;
  assign wWrData__h1323 =
	     { 3'b100,
	       s6__h1293,
	       s5__h1294,
	       s4__h1295,
	       s3__h1296,
	       s2__h1297,
	       s1__h1298,
	       s0__h1299,
	       6'd0,
	       a7__h1301,
	       a6__h1302,
	       a5__h1303,
	       a4__h1304,
	       a3__h1305,
	       a2__h1306,
	       a1__h1307,
	       a0__h1308,
	       3'b0,
	       d7__h1310,
	       d6__h1311,
	       d5__h1312,
	       d4__h1313,
	       d3__h1314,
	       d2__h1315,
	       d1__h1316,
	       d0__h1317,
	       6'd1 } ;
  always@(programCntr)
  begin
    case (programCntr)
      8'd0: x_slaveaddr__h95803 = 7'd116;
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd15,
      8'd16,
      8'd17,
      8'd18,
      8'd19,
      8'd20,
      8'd21:
	  x_slaveaddr__h95803 = 7'd104;
      8'd22,
      8'd23,
      8'd24,
      8'd25,
      8'd26,
      8'd27,
      8'd28,
      8'd29,
      8'd30,
      8'd31,
      8'd32,
      8'd33,
      8'd34,
      8'd35,
      8'd36,
      8'd37,
      8'd38,
      8'd39,
      8'd40,
      8'd41,
      8'd42,
      8'd43,
      8'd44,
      8'd45,
      8'd46,
      8'd47,
      8'd48,
      8'd49,
      8'd50,
      8'd51,
      8'd52,
      8'd53,
      8'd54,
      8'd55,
      8'd56,
      8'd57,
      8'd58,
      8'd59,
      8'd60,
      8'd61,
      8'd62,
      8'd63,
      8'd64,
      8'd65,
      8'd66,
      8'd67,
      8'd68,
      8'd69,
      8'd70,
      8'd71,
      8'd72,
      8'd73,
      8'd74,
      8'd75,
      8'd76,
      8'd77,
      8'd78,
      8'd79,
      8'd80,
      8'd81,
      8'd82,
      8'd83,
      8'd84,
      8'd85,
      8'd86,
      8'd87,
      8'd88,
      8'd89,
      8'd90,
      8'd91,
      8'd92,
      8'd93,
      8'd94,
      8'd95,
      8'd96,
      8'd97,
      8'd98,
      8'd99,
      8'd100,
      8'd101,
      8'd102,
      8'd103,
      8'd104,
      8'd105,
      8'd106,
      8'd107,
      8'd108,
      8'd109,
      8'd110,
      8'd111,
      8'd112,
      8'd113,
      8'd114,
      8'd115,
      8'd116,
      8'd117,
      8'd118,
      8'd119,
      8'd120,
      8'd121,
      8'd122,
      8'd123,
      8'd124,
      8'd125,
      8'd126,
      8'd127,
      8'd128,
      8'd129,
      8'd130,
      8'd131,
      8'd132,
      8'd133,
      8'd134,
      8'd135,
      8'd136,
      8'd137,
      8'd138,
      8'd139,
      8'd140,
      8'd141,
      8'd142,
      8'd143,
      8'd144,
      8'd145,
      8'd146,
      8'd147,
      8'd148,
      8'd149,
      8'd150,
      8'd151,
      8'd152,
      8'd153,
      8'd154,
      8'd155,
      8'd156,
      8'd157,
      8'd158,
      8'd159,
      8'd160,
      8'd161,
      8'd162,
      8'd163,
      8'd164,
      8'd165,
      8'd166,
      8'd167,
      8'd168,
      8'd169,
      8'd170,
      8'd171,
      8'd172,
      8'd173,
      8'd174,
      8'd175,
      8'd176,
      8'd177,
      8'd178,
      8'd179,
      8'd180,
      8'd181,
      8'd182,
      8'd183,
      8'd184,
      8'd185,
      8'd186,
      8'd187,
      8'd188,
      8'd189,
      8'd190,
      8'd191,
      8'd192,
      8'd193,
      8'd194,
      8'd195,
      8'd196,
      8'd197,
      8'd198,
      8'd199,
      8'd200,
      8'd201,
      8'd202,
      8'd203,
      8'd204,
      8'd205,
      8'd206,
      8'd207,
      8'd208,
      8'd209,
      8'd210,
      8'd211,
      8'd212,
      8'd213,
      8'd214,
      8'd215,
      8'd216,
      8'd217,
      8'd218,
      8'd219,
      8'd220,
      8'd221,
      8'd222,
      8'd223,
      8'd224,
      8'd225,
      8'd226,
      8'd227,
      8'd228,
      8'd229,
      8'd230,
      8'd231,
      8'd232,
      8'd233,
      8'd234,
      8'd235,
      8'd236,
      8'd237,
      8'd238,
      8'd239,
      8'd240,
      8'd241,
      8'd242,
      8'd243,
      8'd244,
      8'd245,
      8'd246,
      8'd247,
      8'd248,
      8'd249,
      8'd250,
      8'd251,
      8'd252,
      8'd253,
      8'd254,
      8'd255:
	  x_slaveaddr__h95803 = 7'd0;
    endcase
  end
  always@(programCntr)
  begin
    case (programCntr)
      8'd0: x__h48216 = 8'd16;
      8'd1,
      8'd22,
      8'd23,
      8'd24,
      8'd25,
      8'd26,
      8'd27,
      8'd28,
      8'd29,
      8'd30,
      8'd31,
      8'd32,
      8'd33,
      8'd34,
      8'd35,
      8'd36,
      8'd37,
      8'd38,
      8'd39,
      8'd40,
      8'd41,
      8'd42,
      8'd43,
      8'd44,
      8'd45,
      8'd46,
      8'd47,
      8'd48,
      8'd49,
      8'd50,
      8'd51,
      8'd52,
      8'd53,
      8'd54,
      8'd55,
      8'd56,
      8'd57,
      8'd58,
      8'd59,
      8'd60,
      8'd61,
      8'd62,
      8'd63,
      8'd64,
      8'd65,
      8'd66,
      8'd67,
      8'd68,
      8'd69,
      8'd70,
      8'd71,
      8'd72,
      8'd73,
      8'd74,
      8'd75,
      8'd76,
      8'd77,
      8'd78,
      8'd79,
      8'd80,
      8'd81,
      8'd82,
      8'd83,
      8'd84,
      8'd85,
      8'd86,
      8'd87,
      8'd88,
      8'd89,
      8'd90,
      8'd91,
      8'd92,
      8'd93,
      8'd94,
      8'd95,
      8'd96,
      8'd97,
      8'd98,
      8'd99,
      8'd100,
      8'd101,
      8'd102,
      8'd103,
      8'd104,
      8'd105,
      8'd106,
      8'd107,
      8'd108,
      8'd109,
      8'd110,
      8'd111,
      8'd112,
      8'd113,
      8'd114,
      8'd115,
      8'd116,
      8'd117,
      8'd118,
      8'd119,
      8'd120,
      8'd121,
      8'd122,
      8'd123,
      8'd124,
      8'd125,
      8'd126,
      8'd127,
      8'd128,
      8'd129,
      8'd130,
      8'd131,
      8'd132,
      8'd133,
      8'd134,
      8'd135,
      8'd136,
      8'd137,
      8'd138,
      8'd139,
      8'd140,
      8'd141,
      8'd142,
      8'd143,
      8'd144,
      8'd145,
      8'd146,
      8'd147,
      8'd148,
      8'd149,
      8'd150,
      8'd151,
      8'd152,
      8'd153,
      8'd154,
      8'd155,
      8'd156,
      8'd157,
      8'd158,
      8'd159,
      8'd160,
      8'd161,
      8'd162,
      8'd163,
      8'd164,
      8'd165,
      8'd166,
      8'd167,
      8'd168,
      8'd169,
      8'd170,
      8'd171,
      8'd172,
      8'd173,
      8'd174,
      8'd175,
      8'd176,
      8'd177,
      8'd178,
      8'd179,
      8'd180,
      8'd181,
      8'd182,
      8'd183,
      8'd184,
      8'd185,
      8'd186,
      8'd187,
      8'd188,
      8'd189,
      8'd190,
      8'd191,
      8'd192,
      8'd193,
      8'd194,
      8'd195,
      8'd196,
      8'd197,
      8'd198,
      8'd199,
      8'd200,
      8'd201,
      8'd202,
      8'd203,
      8'd204,
      8'd205,
      8'd206,
      8'd207,
      8'd208,
      8'd209,
      8'd210,
      8'd211,
      8'd212,
      8'd213,
      8'd214,
      8'd215,
      8'd216,
      8'd217,
      8'd218,
      8'd219,
      8'd220,
      8'd221,
      8'd222,
      8'd223,
      8'd224,
      8'd225,
      8'd226,
      8'd227,
      8'd228,
      8'd229,
      8'd230,
      8'd231,
      8'd232,
      8'd233,
      8'd234,
      8'd235,
      8'd236,
      8'd237,
      8'd238,
      8'd239,
      8'd240,
      8'd241,
      8'd242,
      8'd243,
      8'd244,
      8'd245,
      8'd246,
      8'd247,
      8'd248,
      8'd249,
      8'd250,
      8'd251,
      8'd252,
      8'd253,
      8'd254,
      8'd255:
	  x__h48216 = 8'd0;
      8'd2: x__h48216 = 8'd1;
      8'd3: x__h48216 = 8'd2;
      8'd4: x__h48216 = 8'h03;
      8'd5: x__h48216 = 8'd4;
      8'd6: x__h48216 = 8'd10;
      8'd7: x__h48216 = 8'h0B;
      8'd8: x__h48216 = 8'd25;
      8'd9: x__h48216 = 8'd31;
      8'd10: x__h48216 = 8'd32;
      8'd11: x__h48216 = 8'd33;
      8'd12: x__h48216 = 8'd40;
      8'd13: x__h48216 = 8'd41;
      8'd14: x__h48216 = 8'd42;
      8'd15: x__h48216 = 8'd43;
      8'd16: x__h48216 = 8'd44;
      8'd17: x__h48216 = 8'd45;
      8'd18: x__h48216 = 8'd46;
      8'd19: x__h48216 = 8'd47;
      8'd20: x__h48216 = 8'd48;
      8'd21: x__h48216 = 8'd136;
    endcase
  end
  always@(programCntr)
  begin
    case (programCntr)
      8'd0: x__h48526 = 8'd16;
      8'd1: x__h48526 = 8'h54;
      8'd2: x__h48526 = 8'hE4;
      8'd3: x__h48526 = 8'h12;
      8'd4: x__h48526 = 8'h15;
      8'd5: x__h48526 = 8'h92;
      8'd6: x__h48526 = 8'h08;
      8'd7, 8'd21: x__h48526 = 8'h40;
      8'd8: x__h48526 = 8'hA0;
      8'd9,
      8'd10,
      8'd15,
      8'd18,
      8'd22,
      8'd23,
      8'd24,
      8'd25,
      8'd26,
      8'd27,
      8'd28,
      8'd29,
      8'd30,
      8'd31,
      8'd32,
      8'd33,
      8'd34,
      8'd35,
      8'd36,
      8'd37,
      8'd38,
      8'd39,
      8'd40,
      8'd41,
      8'd42,
      8'd43,
      8'd44,
      8'd45,
      8'd46,
      8'd47,
      8'd48,
      8'd49,
      8'd50,
      8'd51,
      8'd52,
      8'd53,
      8'd54,
      8'd55,
      8'd56,
      8'd57,
      8'd58,
      8'd59,
      8'd60,
      8'd61,
      8'd62,
      8'd63,
      8'd64,
      8'd65,
      8'd66,
      8'd67,
      8'd68,
      8'd69,
      8'd70,
      8'd71,
      8'd72,
      8'd73,
      8'd74,
      8'd75,
      8'd76,
      8'd77,
      8'd78,
      8'd79,
      8'd80,
      8'd81,
      8'd82,
      8'd83,
      8'd84,
      8'd85,
      8'd86,
      8'd87,
      8'd88,
      8'd89,
      8'd90,
      8'd91,
      8'd92,
      8'd93,
      8'd94,
      8'd95,
      8'd96,
      8'd97,
      8'd98,
      8'd99,
      8'd100,
      8'd101,
      8'd102,
      8'd103,
      8'd104,
      8'd105,
      8'd106,
      8'd107,
      8'd108,
      8'd109,
      8'd110,
      8'd111,
      8'd112,
      8'd113,
      8'd114,
      8'd115,
      8'd116,
      8'd117,
      8'd118,
      8'd119,
      8'd120,
      8'd121,
      8'd122,
      8'd123,
      8'd124,
      8'd125,
      8'd126,
      8'd127,
      8'd128,
      8'd129,
      8'd130,
      8'd131,
      8'd132,
      8'd133,
      8'd134,
      8'd135,
      8'd136,
      8'd137,
      8'd138,
      8'd139,
      8'd140,
      8'd141,
      8'd142,
      8'd143,
      8'd144,
      8'd145,
      8'd146,
      8'd147,
      8'd148,
      8'd149,
      8'd150,
      8'd151,
      8'd152,
      8'd153,
      8'd154,
      8'd155,
      8'd156,
      8'd157,
      8'd158,
      8'd159,
      8'd160,
      8'd161,
      8'd162,
      8'd163,
      8'd164,
      8'd165,
      8'd166,
      8'd167,
      8'd168,
      8'd169,
      8'd170,
      8'd171,
      8'd172,
      8'd173,
      8'd174,
      8'd175,
      8'd176,
      8'd177,
      8'd178,
      8'd179,
      8'd180,
      8'd181,
      8'd182,
      8'd183,
      8'd184,
      8'd185,
      8'd186,
      8'd187,
      8'd188,
      8'd189,
      8'd190,
      8'd191,
      8'd192,
      8'd193,
      8'd194,
      8'd195,
      8'd196,
      8'd197,
      8'd198,
      8'd199,
      8'd200,
      8'd201,
      8'd202,
      8'd203,
      8'd204,
      8'd205,
      8'd206,
      8'd207,
      8'd208,
      8'd209,
      8'd210,
      8'd211,
      8'd212,
      8'd213,
      8'd214,
      8'd215,
      8'd216,
      8'd217,
      8'd218,
      8'd219,
      8'd220,
      8'd221,
      8'd222,
      8'd223,
      8'd224,
      8'd225,
      8'd226,
      8'd227,
      8'd228,
      8'd229,
      8'd230,
      8'd231,
      8'd232,
      8'd233,
      8'd234,
      8'd235,
      8'd236,
      8'd237,
      8'd238,
      8'd239,
      8'd240,
      8'd241,
      8'd242,
      8'd243,
      8'd244,
      8'd245,
      8'd246,
      8'd247,
      8'd248,
      8'd249,
      8'd250,
      8'd251,
      8'd252,
      8'd253,
      8'd254,
      8'd255:
	  x__h48526 = 8'd0;
      8'd11: x__h48526 = 8'h03;
      8'd12: x__h48526 = 8'hC2;
      8'd13: x__h48526 = 8'h49;
      8'd14: x__h48526 = 8'hEF;
      8'd16, 8'd19: x__h48526 = 8'h77;
      8'd17, 8'd20: x__h48526 = 8'h0B;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        clockResetW <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i2c_rOutEn <= `BSV_ASSIGNMENT_DELAY 1'd1;
	i2c_rSCL <= `BSV_ASSIGNMENT_DELAY 1'd1;
	i2c_rSDA <= `BSV_ASSIGNMENT_DELAY 1'd1;
	i2c_rState <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ident_reg <= `BSV_ASSIGNMENT_DELAY 16'hFFFF;
	init <= `BSV_ASSIGNMENT_DELAY 1'd0;
	programCntr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	programFSM_jj_1_delay_count <= `BSV_ASSIGNMENT_DELAY 21'd0;
	programFSM_jj_2_delay_count <= `BSV_ASSIGNMENT_DELAY 17'd0;
	programFSM_jj_3_delay_count <= `BSV_ASSIGNMENT_DELAY 17'd0;
	programFSM_jj_4_delay_count <= `BSV_ASSIGNMENT_DELAY 17'd0;
	programFSM_jj_delay_count <= `BSV_ASSIGNMENT_DELAY 21'd0;
	programFSM_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	programFSM_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	programFSM_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	programFSM_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	programFSM_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 5'd0;
	returnValue <= `BSV_ASSIGNMENT_DELAY 8'd0;
	step_reg <= `BSV_ASSIGNMENT_DELAY 8'd0;
	switchResetW <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (clockResetW$EN)
	  clockResetW <= `BSV_ASSIGNMENT_DELAY clockResetW$D_IN;
	if (i2c_rOutEn$EN)
	  i2c_rOutEn <= `BSV_ASSIGNMENT_DELAY i2c_rOutEn$D_IN;
	if (i2c_rSCL$EN) i2c_rSCL <= `BSV_ASSIGNMENT_DELAY i2c_rSCL$D_IN;
	if (i2c_rSDA$EN) i2c_rSDA <= `BSV_ASSIGNMENT_DELAY i2c_rSDA$D_IN;
	if (i2c_rState$EN)
	  i2c_rState <= `BSV_ASSIGNMENT_DELAY i2c_rState$D_IN;
	if (ident_reg$EN) ident_reg <= `BSV_ASSIGNMENT_DELAY ident_reg$D_IN;
	if (init$EN) init <= `BSV_ASSIGNMENT_DELAY init$D_IN;
	if (programCntr$EN)
	  programCntr <= `BSV_ASSIGNMENT_DELAY programCntr$D_IN;
	if (programFSM_jj_1_delay_count$EN)
	  programFSM_jj_1_delay_count <= `BSV_ASSIGNMENT_DELAY
	      programFSM_jj_1_delay_count$D_IN;
	if (programFSM_jj_2_delay_count$EN)
	  programFSM_jj_2_delay_count <= `BSV_ASSIGNMENT_DELAY
	      programFSM_jj_2_delay_count$D_IN;
	if (programFSM_jj_3_delay_count$EN)
	  programFSM_jj_3_delay_count <= `BSV_ASSIGNMENT_DELAY
	      programFSM_jj_3_delay_count$D_IN;
	if (programFSM_jj_4_delay_count$EN)
	  programFSM_jj_4_delay_count <= `BSV_ASSIGNMENT_DELAY
	      programFSM_jj_4_delay_count$D_IN;
	if (programFSM_jj_delay_count$EN)
	  programFSM_jj_delay_count <= `BSV_ASSIGNMENT_DELAY
	      programFSM_jj_delay_count$D_IN;
	if (programFSM_start_reg$EN)
	  programFSM_start_reg <= `BSV_ASSIGNMENT_DELAY
	      programFSM_start_reg$D_IN;
	if (programFSM_start_reg_1$EN)
	  programFSM_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      programFSM_start_reg_1$D_IN;
	if (programFSM_state_can_overlap$EN)
	  programFSM_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      programFSM_state_can_overlap$D_IN;
	if (programFSM_state_fired$EN)
	  programFSM_state_fired <= `BSV_ASSIGNMENT_DELAY
	      programFSM_state_fired$D_IN;
	if (programFSM_state_mkFSMstate$EN)
	  programFSM_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      programFSM_state_mkFSMstate$D_IN;
	if (returnValue$EN)
	  returnValue <= `BSV_ASSIGNMENT_DELAY returnValue$D_IN;
	if (step_reg$EN) step_reg <= `BSV_ASSIGNMENT_DELAY step_reg$D_IN;
	if (switchResetW$EN)
	  switchResetW <= `BSV_ASSIGNMENT_DELAY switchResetW$D_IN;
      end
    if (i2c_rAddress$EN)
      i2c_rAddress <= `BSV_ASSIGNMENT_DELAY i2c_rAddress$D_IN;
    if (i2c_rSlaveAddr$EN)
      i2c_rSlaveAddr <= `BSV_ASSIGNMENT_DELAY i2c_rSlaveAddr$D_IN;
    if (i2c_rWrite$EN) i2c_rWrite <= `BSV_ASSIGNMENT_DELAY i2c_rWrite$D_IN;
    if (i2c_rWriteData$EN)
      i2c_rWriteData <= `BSV_ASSIGNMENT_DELAY i2c_rWriteData$D_IN;
    if (i2c_vrReadData_0$EN)
      i2c_vrReadData_0 <= `BSV_ASSIGNMENT_DELAY i2c_vrReadData_0$D_IN;
    if (i2c_vrReadData_1$EN)
      i2c_vrReadData_1 <= `BSV_ASSIGNMENT_DELAY i2c_vrReadData_1$D_IN;
    if (i2c_vrReadData_2$EN)
      i2c_vrReadData_2 <= `BSV_ASSIGNMENT_DELAY i2c_vrReadData_2$D_IN;
    if (i2c_vrReadData_3$EN)
      i2c_vrReadData_3 <= `BSV_ASSIGNMENT_DELAY i2c_vrReadData_3$D_IN;
    if (i2c_vrReadData_4$EN)
      i2c_vrReadData_4 <= `BSV_ASSIGNMENT_DELAY i2c_vrReadData_4$D_IN;
    if (i2c_vrReadData_5$EN)
      i2c_vrReadData_5 <= `BSV_ASSIGNMENT_DELAY i2c_vrReadData_5$D_IN;
    if (i2c_vrReadData_6$EN)
      i2c_vrReadData_6 <= `BSV_ASSIGNMENT_DELAY i2c_vrReadData_6$D_IN;
    if (i2c_vrReadData_7$EN)
      i2c_vrReadData_7 <= `BSV_ASSIGNMENT_DELAY i2c_vrReadData_7$D_IN;
  end

  always@(posedge CLK_gt_clk)
  begin
    if (RST_N_gt_rst_n == `BSV_RESET_VALUE)
      begin
        clk_cntr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	led_out <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (clk_cntr$EN) clk_cntr <= `BSV_ASSIGNMENT_DELAY clk_cntr$D_IN;
	if (led_out$EN) led_out <= `BSV_ASSIGNMENT_DELAY led_out$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    clk_cntr = 32'hAAAAAAAA;
    clockResetW = 1'h0;
    i2c_rAddress = 8'hAA;
    i2c_rOutEn = 1'h0;
    i2c_rSCL = 1'h0;
    i2c_rSDA = 1'h0;
    i2c_rSlaveAddr = 7'h2A;
    i2c_rState = 1'h0;
    i2c_rWrite = 1'h0;
    i2c_rWriteData = 8'hAA;
    i2c_vrReadData_0 = 1'h0;
    i2c_vrReadData_1 = 1'h0;
    i2c_vrReadData_2 = 1'h0;
    i2c_vrReadData_3 = 1'h0;
    i2c_vrReadData_4 = 1'h0;
    i2c_vrReadData_5 = 1'h0;
    i2c_vrReadData_6 = 1'h0;
    i2c_vrReadData_7 = 1'h0;
    ident_reg = 16'hAAAA;
    init = 1'h0;
    led_out = 1'h0;
    programCntr = 8'hAA;
    programFSM_jj_1_delay_count = 21'h0AAAAA;
    programFSM_jj_2_delay_count = 17'h0AAAA;
    programFSM_jj_3_delay_count = 17'h0AAAA;
    programFSM_jj_4_delay_count = 17'h0AAAA;
    programFSM_jj_delay_count = 21'h0AAAAA;
    programFSM_start_reg = 1'h0;
    programFSM_start_reg_1 = 1'h0;
    programFSM_state_can_overlap = 1'h0;
    programFSM_state_fired = 1'h0;
    programFSM_state_mkFSMstate = 5'h0A;
    returnValue = 8'hAA;
    step_reg = 8'hAA;
    switchResetW = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_programFSM_action_l99c13)
	$display("Done %d", i2c_fResponse$D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (programFSM_state_mkFSMstate == 5'd1 &&
	  (programFSM_state_mkFSMstate == 5'd2 ||
	   WILL_FIRE_RL_programFSM_action_np ||
	   WILL_FIRE_RL_programFSM_action_l138c13 ||
	   programFSM_state_mkFSMstate == 5'd5 ||
	   programFSM_state_mkFSMstate == 5'd6 ||
	   WILL_FIRE_RL_programFSM_action_np_1 ||
	   WILL_FIRE_RL_programFSM_action_f_init_l145c13 ||
	   WILL_FIRE_RL_programFSM_action_l93c16 ||
	   WILL_FIRE_RL_programFSM_action_l99c13 ||
	   programFSM_state_mkFSMstate == 5'd11 ||
	   WILL_FIRE_RL_programFSM_action_np_2 ||
	   WILL_FIRE_RL_programFSM_action_l147c26 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l111c16 ||
	   WILL_FIRE_RL_programFSM_action_l117c13 ||
	   programFSM_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_programFSM_action_np_3 ||
	   WILL_FIRE_RL_programFSM_action_l151c13 ||
	   programFSM_state_mkFSMstate == 5'd20 ||
	   WILL_FIRE_RL_programFSM_action_l111c16_1 ||
	   WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	   programFSM_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_programFSM_action_np_4 ||
	   WILL_FIRE_RL_programFSM_action_l157c13))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 131, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l136c22]\n  and [RL_programFSM_action_d_init_np, RL_programFSM_action_np,\n  RL_programFSM_action_l138c13, RL_programFSM_action_l142c22,\n  RL_programFSM_action_d_init_np_1, RL_programFSM_action_np_1,\n  RL_programFSM_action_f_init_l145c13, RL_programFSM_action_l93c16,\n  RL_programFSM_action_l99c13, RL_programFSM_action_d_init_np_2,\n  RL_programFSM_action_np_2, RL_programFSM_action_l147c26,\n  RL_programFSM_action_f_update_l145c13, RL_programFSM_action_l111c16,\n  RL_programFSM_action_l117c13, RL_programFSM_action_d_init_np_3,\n  RL_programFSM_action_np_3, RL_programFSM_action_l151c13,\n  RL_programFSM_action_l154c22, RL_programFSM_action_l111c16_1,\n  RL_programFSM_action_l117c13_1, RL_programFSM_action_d_init_np_4,\n  RL_programFSM_action_np_4, RL_programFSM_action_l157c13] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (programFSM_state_mkFSMstate == 5'd2 &&
	  (WILL_FIRE_RL_programFSM_action_np ||
	   WILL_FIRE_RL_programFSM_action_l138c13 ||
	   programFSM_state_mkFSMstate == 5'd5 ||
	   programFSM_state_mkFSMstate == 5'd6 ||
	   WILL_FIRE_RL_programFSM_action_np_1 ||
	   WILL_FIRE_RL_programFSM_action_f_init_l145c13 ||
	   WILL_FIRE_RL_programFSM_action_l93c16 ||
	   WILL_FIRE_RL_programFSM_action_l99c13 ||
	   programFSM_state_mkFSMstate == 5'd11 ||
	   WILL_FIRE_RL_programFSM_action_np_2 ||
	   WILL_FIRE_RL_programFSM_action_l147c26 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l111c16 ||
	   WILL_FIRE_RL_programFSM_action_l117c13 ||
	   programFSM_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_programFSM_action_np_3 ||
	   WILL_FIRE_RL_programFSM_action_l151c13 ||
	   programFSM_state_mkFSMstate == 5'd20 ||
	   WILL_FIRE_RL_programFSM_action_l111c16_1 ||
	   WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	   programFSM_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_programFSM_action_np_4 ||
	   WILL_FIRE_RL_programFSM_action_l157c13))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 131, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_d_init_np]\n  and [RL_programFSM_action_np, RL_programFSM_action_l138c13,\n  RL_programFSM_action_l142c22, RL_programFSM_action_d_init_np_1,\n  RL_programFSM_action_np_1, RL_programFSM_action_f_init_l145c13,\n  RL_programFSM_action_l93c16, RL_programFSM_action_l99c13,\n  RL_programFSM_action_d_init_np_2, RL_programFSM_action_np_2,\n  RL_programFSM_action_l147c26, RL_programFSM_action_f_update_l145c13,\n  RL_programFSM_action_l111c16, RL_programFSM_action_l117c13,\n  RL_programFSM_action_d_init_np_3, RL_programFSM_action_np_3,\n  RL_programFSM_action_l151c13, RL_programFSM_action_l154c22,\n  RL_programFSM_action_l111c16_1, RL_programFSM_action_l117c13_1,\n  RL_programFSM_action_d_init_np_4, RL_programFSM_action_np_4,\n  RL_programFSM_action_l157c13] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_programFSM_action_np &&
	  (WILL_FIRE_RL_programFSM_action_l138c13 ||
	   programFSM_state_mkFSMstate == 5'd5 ||
	   programFSM_state_mkFSMstate == 5'd6 ||
	   WILL_FIRE_RL_programFSM_action_np_1 ||
	   WILL_FIRE_RL_programFSM_action_f_init_l145c13 ||
	   WILL_FIRE_RL_programFSM_action_l93c16 ||
	   WILL_FIRE_RL_programFSM_action_l99c13 ||
	   programFSM_state_mkFSMstate == 5'd11 ||
	   WILL_FIRE_RL_programFSM_action_np_2 ||
	   WILL_FIRE_RL_programFSM_action_l147c26 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l111c16 ||
	   WILL_FIRE_RL_programFSM_action_l117c13 ||
	   programFSM_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_programFSM_action_np_3 ||
	   WILL_FIRE_RL_programFSM_action_l151c13 ||
	   programFSM_state_mkFSMstate == 5'd20 ||
	   WILL_FIRE_RL_programFSM_action_l111c16_1 ||
	   WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	   programFSM_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_programFSM_action_np_4 ||
	   WILL_FIRE_RL_programFSM_action_l157c13))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 131, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_np] and\n  [RL_programFSM_action_l138c13, RL_programFSM_action_l142c22,\n  RL_programFSM_action_d_init_np_1, RL_programFSM_action_np_1,\n  RL_programFSM_action_f_init_l145c13, RL_programFSM_action_l93c16,\n  RL_programFSM_action_l99c13, RL_programFSM_action_d_init_np_2,\n  RL_programFSM_action_np_2, RL_programFSM_action_l147c26,\n  RL_programFSM_action_f_update_l145c13, RL_programFSM_action_l111c16,\n  RL_programFSM_action_l117c13, RL_programFSM_action_d_init_np_3,\n  RL_programFSM_action_np_3, RL_programFSM_action_l151c13,\n  RL_programFSM_action_l154c22, RL_programFSM_action_l111c16_1,\n  RL_programFSM_action_l117c13_1, RL_programFSM_action_d_init_np_4,\n  RL_programFSM_action_np_4, RL_programFSM_action_l157c13] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (programFSM_state_mkFSMstate == 5'd5 &&
	  (programFSM_state_mkFSMstate == 5'd6 ||
	   WILL_FIRE_RL_programFSM_action_np_1 ||
	   WILL_FIRE_RL_programFSM_action_f_init_l145c13 ||
	   WILL_FIRE_RL_programFSM_action_l93c16 ||
	   WILL_FIRE_RL_programFSM_action_l99c13 ||
	   programFSM_state_mkFSMstate == 5'd11 ||
	   WILL_FIRE_RL_programFSM_action_np_2 ||
	   WILL_FIRE_RL_programFSM_action_l147c26 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l111c16 ||
	   WILL_FIRE_RL_programFSM_action_l117c13 ||
	   programFSM_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_programFSM_action_np_3 ||
	   WILL_FIRE_RL_programFSM_action_l151c13 ||
	   programFSM_state_mkFSMstate == 5'd20 ||
	   WILL_FIRE_RL_programFSM_action_l111c16_1 ||
	   WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	   programFSM_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_programFSM_action_np_4 ||
	   WILL_FIRE_RL_programFSM_action_l157c13))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 131, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l142c22]\n  and [RL_programFSM_action_d_init_np_1, RL_programFSM_action_np_1,\n  RL_programFSM_action_f_init_l145c13, RL_programFSM_action_l93c16,\n  RL_programFSM_action_l99c13, RL_programFSM_action_d_init_np_2,\n  RL_programFSM_action_np_2, RL_programFSM_action_l147c26,\n  RL_programFSM_action_f_update_l145c13, RL_programFSM_action_l111c16,\n  RL_programFSM_action_l117c13, RL_programFSM_action_d_init_np_3,\n  RL_programFSM_action_np_3, RL_programFSM_action_l151c13,\n  RL_programFSM_action_l154c22, RL_programFSM_action_l111c16_1,\n  RL_programFSM_action_l117c13_1, RL_programFSM_action_d_init_np_4,\n  RL_programFSM_action_np_4, RL_programFSM_action_l157c13] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_programFSM_action_l138c13 &&
	  (programFSM_state_mkFSMstate == 5'd5 ||
	   programFSM_state_mkFSMstate == 5'd6 ||
	   WILL_FIRE_RL_programFSM_action_np_1 ||
	   WILL_FIRE_RL_programFSM_action_f_init_l145c13 ||
	   WILL_FIRE_RL_programFSM_action_l93c16 ||
	   WILL_FIRE_RL_programFSM_action_l99c13 ||
	   programFSM_state_mkFSMstate == 5'd11 ||
	   WILL_FIRE_RL_programFSM_action_np_2 ||
	   WILL_FIRE_RL_programFSM_action_l147c26 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l111c16 ||
	   WILL_FIRE_RL_programFSM_action_l117c13 ||
	   programFSM_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_programFSM_action_np_3 ||
	   WILL_FIRE_RL_programFSM_action_l151c13 ||
	   programFSM_state_mkFSMstate == 5'd20 ||
	   WILL_FIRE_RL_programFSM_action_l111c16_1 ||
	   WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	   programFSM_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_programFSM_action_np_4 ||
	   WILL_FIRE_RL_programFSM_action_l157c13))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 131, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l138c13]\n  and [RL_programFSM_action_l142c22, RL_programFSM_action_d_init_np_1,\n  RL_programFSM_action_np_1, RL_programFSM_action_f_init_l145c13,\n  RL_programFSM_action_l93c16, RL_programFSM_action_l99c13,\n  RL_programFSM_action_d_init_np_2, RL_programFSM_action_np_2,\n  RL_programFSM_action_l147c26, RL_programFSM_action_f_update_l145c13,\n  RL_programFSM_action_l111c16, RL_programFSM_action_l117c13,\n  RL_programFSM_action_d_init_np_3, RL_programFSM_action_np_3,\n  RL_programFSM_action_l151c13, RL_programFSM_action_l154c22,\n  RL_programFSM_action_l111c16_1, RL_programFSM_action_l117c13_1,\n  RL_programFSM_action_d_init_np_4, RL_programFSM_action_np_4,\n  RL_programFSM_action_l157c13] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (programFSM_state_mkFSMstate == 5'd6 &&
	  (WILL_FIRE_RL_programFSM_action_np_1 ||
	   WILL_FIRE_RL_programFSM_action_f_init_l145c13 ||
	   WILL_FIRE_RL_programFSM_action_l93c16 ||
	   WILL_FIRE_RL_programFSM_action_l99c13 ||
	   programFSM_state_mkFSMstate == 5'd11 ||
	   WILL_FIRE_RL_programFSM_action_np_2 ||
	   WILL_FIRE_RL_programFSM_action_l147c26 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l111c16 ||
	   WILL_FIRE_RL_programFSM_action_l117c13 ||
	   programFSM_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_programFSM_action_np_3 ||
	   WILL_FIRE_RL_programFSM_action_l151c13 ||
	   programFSM_state_mkFSMstate == 5'd20 ||
	   WILL_FIRE_RL_programFSM_action_l111c16_1 ||
	   WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	   programFSM_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_programFSM_action_np_4 ||
	   WILL_FIRE_RL_programFSM_action_l157c13))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 131, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_programFSM_action_d_init_np_1] and [RL_programFSM_action_np_1,\n  RL_programFSM_action_f_init_l145c13, RL_programFSM_action_l93c16,\n  RL_programFSM_action_l99c13, RL_programFSM_action_d_init_np_2,\n  RL_programFSM_action_np_2, RL_programFSM_action_l147c26,\n  RL_programFSM_action_f_update_l145c13, RL_programFSM_action_l111c16,\n  RL_programFSM_action_l117c13, RL_programFSM_action_d_init_np_3,\n  RL_programFSM_action_np_3, RL_programFSM_action_l151c13,\n  RL_programFSM_action_l154c22, RL_programFSM_action_l111c16_1,\n  RL_programFSM_action_l117c13_1, RL_programFSM_action_d_init_np_4,\n  RL_programFSM_action_np_4, RL_programFSM_action_l157c13] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_programFSM_action_np_1 &&
	  (WILL_FIRE_RL_programFSM_action_f_init_l145c13 ||
	   WILL_FIRE_RL_programFSM_action_l93c16 ||
	   WILL_FIRE_RL_programFSM_action_l99c13 ||
	   programFSM_state_mkFSMstate == 5'd11 ||
	   WILL_FIRE_RL_programFSM_action_np_2 ||
	   WILL_FIRE_RL_programFSM_action_l147c26 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l111c16 ||
	   WILL_FIRE_RL_programFSM_action_l117c13 ||
	   programFSM_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_programFSM_action_np_3 ||
	   WILL_FIRE_RL_programFSM_action_l151c13 ||
	   programFSM_state_mkFSMstate == 5'd20 ||
	   WILL_FIRE_RL_programFSM_action_l111c16_1 ||
	   WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	   programFSM_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_programFSM_action_np_4 ||
	   WILL_FIRE_RL_programFSM_action_l157c13))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 131, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_np_1] and\n  [RL_programFSM_action_f_init_l145c13, RL_programFSM_action_l93c16,\n  RL_programFSM_action_l99c13, RL_programFSM_action_d_init_np_2,\n  RL_programFSM_action_np_2, RL_programFSM_action_l147c26,\n  RL_programFSM_action_f_update_l145c13, RL_programFSM_action_l111c16,\n  RL_programFSM_action_l117c13, RL_programFSM_action_d_init_np_3,\n  RL_programFSM_action_np_3, RL_programFSM_action_l151c13,\n  RL_programFSM_action_l154c22, RL_programFSM_action_l111c16_1,\n  RL_programFSM_action_l117c13_1, RL_programFSM_action_d_init_np_4,\n  RL_programFSM_action_np_4, RL_programFSM_action_l157c13] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_programFSM_action_l93c16 &&
	  (WILL_FIRE_RL_programFSM_action_l99c13 ||
	   programFSM_state_mkFSMstate == 5'd11 ||
	   WILL_FIRE_RL_programFSM_action_np_2 ||
	   WILL_FIRE_RL_programFSM_action_l147c26 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l111c16 ||
	   WILL_FIRE_RL_programFSM_action_l117c13 ||
	   programFSM_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_programFSM_action_np_3 ||
	   WILL_FIRE_RL_programFSM_action_l151c13 ||
	   programFSM_state_mkFSMstate == 5'd20 ||
	   WILL_FIRE_RL_programFSM_action_l111c16_1 ||
	   WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	   programFSM_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_programFSM_action_np_4 ||
	   WILL_FIRE_RL_programFSM_action_l157c13))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 131, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l93c16] and\n  [RL_programFSM_action_l99c13, RL_programFSM_action_d_init_np_2,\n  RL_programFSM_action_np_2, RL_programFSM_action_l147c26,\n  RL_programFSM_action_f_update_l145c13, RL_programFSM_action_l111c16,\n  RL_programFSM_action_l117c13, RL_programFSM_action_d_init_np_3,\n  RL_programFSM_action_np_3, RL_programFSM_action_l151c13,\n  RL_programFSM_action_l154c22, RL_programFSM_action_l111c16_1,\n  RL_programFSM_action_l117c13_1, RL_programFSM_action_d_init_np_4,\n  RL_programFSM_action_np_4, RL_programFSM_action_l157c13] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_programFSM_action_f_init_l145c13 &&
	  (WILL_FIRE_RL_programFSM_action_l93c16 ||
	   WILL_FIRE_RL_programFSM_action_l99c13 ||
	   programFSM_state_mkFSMstate == 5'd11 ||
	   WILL_FIRE_RL_programFSM_action_np_2 ||
	   WILL_FIRE_RL_programFSM_action_l147c26 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l111c16 ||
	   WILL_FIRE_RL_programFSM_action_l117c13 ||
	   programFSM_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_programFSM_action_np_3 ||
	   WILL_FIRE_RL_programFSM_action_l151c13 ||
	   programFSM_state_mkFSMstate == 5'd20 ||
	   WILL_FIRE_RL_programFSM_action_l111c16_1 ||
	   WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	   programFSM_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_programFSM_action_np_4 ||
	   WILL_FIRE_RL_programFSM_action_l157c13))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 131, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_programFSM_action_f_init_l145c13] and [RL_programFSM_action_l93c16,\n  RL_programFSM_action_l99c13, RL_programFSM_action_d_init_np_2,\n  RL_programFSM_action_np_2, RL_programFSM_action_l147c26,\n  RL_programFSM_action_f_update_l145c13, RL_programFSM_action_l111c16,\n  RL_programFSM_action_l117c13, RL_programFSM_action_d_init_np_3,\n  RL_programFSM_action_np_3, RL_programFSM_action_l151c13,\n  RL_programFSM_action_l154c22, RL_programFSM_action_l111c16_1,\n  RL_programFSM_action_l117c13_1, RL_programFSM_action_d_init_np_4,\n  RL_programFSM_action_np_4, RL_programFSM_action_l157c13] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_programFSM_action_l99c13 &&
	  (programFSM_state_mkFSMstate == 5'd11 ||
	   WILL_FIRE_RL_programFSM_action_np_2 ||
	   WILL_FIRE_RL_programFSM_action_l147c26 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l111c16 ||
	   WILL_FIRE_RL_programFSM_action_l117c13 ||
	   programFSM_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_programFSM_action_np_3 ||
	   WILL_FIRE_RL_programFSM_action_l151c13 ||
	   programFSM_state_mkFSMstate == 5'd20 ||
	   WILL_FIRE_RL_programFSM_action_l111c16_1 ||
	   WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	   programFSM_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_programFSM_action_np_4 ||
	   WILL_FIRE_RL_programFSM_action_l157c13))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 131, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l99c13] and\n  [RL_programFSM_action_d_init_np_2, RL_programFSM_action_np_2,\n  RL_programFSM_action_l147c26, RL_programFSM_action_f_update_l145c13,\n  RL_programFSM_action_l111c16, RL_programFSM_action_l117c13,\n  RL_programFSM_action_d_init_np_3, RL_programFSM_action_np_3,\n  RL_programFSM_action_l151c13, RL_programFSM_action_l154c22,\n  RL_programFSM_action_l111c16_1, RL_programFSM_action_l117c13_1,\n  RL_programFSM_action_d_init_np_4, RL_programFSM_action_np_4,\n  RL_programFSM_action_l157c13] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (programFSM_state_mkFSMstate == 5'd11 &&
	  (WILL_FIRE_RL_programFSM_action_np_2 ||
	   WILL_FIRE_RL_programFSM_action_l147c26 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l111c16 ||
	   WILL_FIRE_RL_programFSM_action_l117c13 ||
	   programFSM_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_programFSM_action_np_3 ||
	   WILL_FIRE_RL_programFSM_action_l151c13 ||
	   programFSM_state_mkFSMstate == 5'd20 ||
	   WILL_FIRE_RL_programFSM_action_l111c16_1 ||
	   WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	   programFSM_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_programFSM_action_np_4 ||
	   WILL_FIRE_RL_programFSM_action_l157c13))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 131, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_programFSM_action_d_init_np_2] and [RL_programFSM_action_np_2,\n  RL_programFSM_action_l147c26, RL_programFSM_action_f_update_l145c13,\n  RL_programFSM_action_l111c16, RL_programFSM_action_l117c13,\n  RL_programFSM_action_d_init_np_3, RL_programFSM_action_np_3,\n  RL_programFSM_action_l151c13, RL_programFSM_action_l154c22,\n  RL_programFSM_action_l111c16_1, RL_programFSM_action_l117c13_1,\n  RL_programFSM_action_d_init_np_4, RL_programFSM_action_np_4,\n  RL_programFSM_action_l157c13] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_programFSM_action_np_2 &&
	  (WILL_FIRE_RL_programFSM_action_l147c26 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l111c16 ||
	   WILL_FIRE_RL_programFSM_action_l117c13 ||
	   programFSM_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_programFSM_action_np_3 ||
	   WILL_FIRE_RL_programFSM_action_l151c13 ||
	   programFSM_state_mkFSMstate == 5'd20 ||
	   WILL_FIRE_RL_programFSM_action_l111c16_1 ||
	   WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	   programFSM_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_programFSM_action_np_4 ||
	   WILL_FIRE_RL_programFSM_action_l157c13))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 131, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_np_2] and\n  [RL_programFSM_action_l147c26, RL_programFSM_action_f_update_l145c13,\n  RL_programFSM_action_l111c16, RL_programFSM_action_l117c13,\n  RL_programFSM_action_d_init_np_3, RL_programFSM_action_np_3,\n  RL_programFSM_action_l151c13, RL_programFSM_action_l154c22,\n  RL_programFSM_action_l111c16_1, RL_programFSM_action_l117c13_1,\n  RL_programFSM_action_d_init_np_4, RL_programFSM_action_np_4,\n  RL_programFSM_action_l157c13] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (programFSM_state_mkFSMstate == 5'd14 &&
	  (WILL_FIRE_RL_programFSM_action_l111c16 ||
	   WILL_FIRE_RL_programFSM_action_l117c13 ||
	   programFSM_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_programFSM_action_np_3 ||
	   WILL_FIRE_RL_programFSM_action_l151c13 ||
	   programFSM_state_mkFSMstate == 5'd20 ||
	   WILL_FIRE_RL_programFSM_action_l111c16_1 ||
	   WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	   programFSM_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_programFSM_action_np_4 ||
	   WILL_FIRE_RL_programFSM_action_l157c13))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 131, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_programFSM_action_f_update_l145c13] and [RL_programFSM_action_l111c16,\n  RL_programFSM_action_l117c13, RL_programFSM_action_d_init_np_3,\n  RL_programFSM_action_np_3, RL_programFSM_action_l151c13,\n  RL_programFSM_action_l154c22, RL_programFSM_action_l111c16_1,\n  RL_programFSM_action_l117c13_1, RL_programFSM_action_d_init_np_4,\n  RL_programFSM_action_np_4, RL_programFSM_action_l157c13] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_programFSM_action_l147c26 &&
	  (programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l111c16 ||
	   WILL_FIRE_RL_programFSM_action_l117c13 ||
	   programFSM_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_programFSM_action_np_3 ||
	   WILL_FIRE_RL_programFSM_action_l151c13 ||
	   programFSM_state_mkFSMstate == 5'd20 ||
	   WILL_FIRE_RL_programFSM_action_l111c16_1 ||
	   WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	   programFSM_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_programFSM_action_np_4 ||
	   WILL_FIRE_RL_programFSM_action_l157c13))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 131, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l147c26]\n  and [RL_programFSM_action_f_update_l145c13, RL_programFSM_action_l111c16,\n  RL_programFSM_action_l117c13, RL_programFSM_action_d_init_np_3,\n  RL_programFSM_action_np_3, RL_programFSM_action_l151c13,\n  RL_programFSM_action_l154c22, RL_programFSM_action_l111c16_1,\n  RL_programFSM_action_l117c13_1, RL_programFSM_action_d_init_np_4,\n  RL_programFSM_action_np_4, RL_programFSM_action_l157c13] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_programFSM_action_l111c16 &&
	  (WILL_FIRE_RL_programFSM_action_l117c13 ||
	   programFSM_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_programFSM_action_np_3 ||
	   WILL_FIRE_RL_programFSM_action_l151c13 ||
	   programFSM_state_mkFSMstate == 5'd20 ||
	   WILL_FIRE_RL_programFSM_action_l111c16_1 ||
	   WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	   programFSM_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_programFSM_action_np_4 ||
	   WILL_FIRE_RL_programFSM_action_l157c13))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 131, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l111c16]\n  and [RL_programFSM_action_l117c13, RL_programFSM_action_d_init_np_3,\n  RL_programFSM_action_np_3, RL_programFSM_action_l151c13,\n  RL_programFSM_action_l154c22, RL_programFSM_action_l111c16_1,\n  RL_programFSM_action_l117c13_1, RL_programFSM_action_d_init_np_4,\n  RL_programFSM_action_np_4, RL_programFSM_action_l157c13] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_programFSM_action_l117c13 &&
	  (programFSM_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_programFSM_action_np_3 ||
	   WILL_FIRE_RL_programFSM_action_l151c13 ||
	   programFSM_state_mkFSMstate == 5'd20 ||
	   WILL_FIRE_RL_programFSM_action_l111c16_1 ||
	   WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	   programFSM_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_programFSM_action_np_4 ||
	   WILL_FIRE_RL_programFSM_action_l157c13))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 131, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l117c13]\n  and [RL_programFSM_action_d_init_np_3, RL_programFSM_action_np_3,\n  RL_programFSM_action_l151c13, RL_programFSM_action_l154c22,\n  RL_programFSM_action_l111c16_1, RL_programFSM_action_l117c13_1,\n  RL_programFSM_action_d_init_np_4, RL_programFSM_action_np_4,\n  RL_programFSM_action_l157c13] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (programFSM_state_mkFSMstate == 5'd17 &&
	  (WILL_FIRE_RL_programFSM_action_np_3 ||
	   WILL_FIRE_RL_programFSM_action_l151c13 ||
	   programFSM_state_mkFSMstate == 5'd20 ||
	   WILL_FIRE_RL_programFSM_action_l111c16_1 ||
	   WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	   programFSM_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_programFSM_action_np_4 ||
	   WILL_FIRE_RL_programFSM_action_l157c13))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 131, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_programFSM_action_d_init_np_3] and [RL_programFSM_action_np_3,\n  RL_programFSM_action_l151c13, RL_programFSM_action_l154c22,\n  RL_programFSM_action_l111c16_1, RL_programFSM_action_l117c13_1,\n  RL_programFSM_action_d_init_np_4, RL_programFSM_action_np_4,\n  RL_programFSM_action_l157c13] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_programFSM_action_l151c13 &&
	  (programFSM_state_mkFSMstate == 5'd20 ||
	   WILL_FIRE_RL_programFSM_action_l111c16_1 ||
	   WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	   programFSM_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_programFSM_action_np_4 ||
	   WILL_FIRE_RL_programFSM_action_l157c13))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 131, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l151c13]\n  and [RL_programFSM_action_l154c22, RL_programFSM_action_l111c16_1,\n  RL_programFSM_action_l117c13_1, RL_programFSM_action_d_init_np_4,\n  RL_programFSM_action_np_4, RL_programFSM_action_l157c13] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_programFSM_action_np_3 &&
	  (WILL_FIRE_RL_programFSM_action_l151c13 ||
	   programFSM_state_mkFSMstate == 5'd20 ||
	   WILL_FIRE_RL_programFSM_action_l111c16_1 ||
	   WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	   programFSM_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_programFSM_action_np_4 ||
	   WILL_FIRE_RL_programFSM_action_l157c13))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 131, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_np_3] and\n  [RL_programFSM_action_l151c13, RL_programFSM_action_l154c22,\n  RL_programFSM_action_l111c16_1, RL_programFSM_action_l117c13_1,\n  RL_programFSM_action_d_init_np_4, RL_programFSM_action_np_4,\n  RL_programFSM_action_l157c13] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (programFSM_state_mkFSMstate == 5'd20 &&
	  (WILL_FIRE_RL_programFSM_action_l111c16_1 ||
	   WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	   programFSM_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_programFSM_action_np_4 ||
	   WILL_FIRE_RL_programFSM_action_l157c13))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 131, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l154c22]\n  and [RL_programFSM_action_l111c16_1, RL_programFSM_action_l117c13_1,\n  RL_programFSM_action_d_init_np_4, RL_programFSM_action_np_4,\n  RL_programFSM_action_l157c13] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_programFSM_action_l111c16_1 &&
	  (WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	   programFSM_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_programFSM_action_np_4 ||
	   WILL_FIRE_RL_programFSM_action_l157c13))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 131, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l111c16_1]\n  and [RL_programFSM_action_l117c13_1, RL_programFSM_action_d_init_np_4,\n  RL_programFSM_action_np_4, RL_programFSM_action_l157c13] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_programFSM_action_l117c13_1 &&
	  (programFSM_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_programFSM_action_np_4 ||
	   WILL_FIRE_RL_programFSM_action_l157c13))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 131, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l117c13_1]\n  and [RL_programFSM_action_d_init_np_4, RL_programFSM_action_np_4,\n  RL_programFSM_action_l157c13] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (programFSM_state_mkFSMstate == 5'd23 &&
	  (WILL_FIRE_RL_programFSM_action_np_4 ||
	   WILL_FIRE_RL_programFSM_action_l157c13))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 131, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_programFSM_action_d_init_np_4] and [RL_programFSM_action_np_4,\n  RL_programFSM_action_l157c13] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_programFSM_action_np_4 &&
	  WILL_FIRE_RL_programFSM_action_l157c13)
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 131, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_np_4] and\n  [RL_programFSM_action_l157c13] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_programFSM_action_l132c13 &&
	  (programFSM_state_mkFSMstate == 5'd1 ||
	   programFSM_state_mkFSMstate == 5'd2 ||
	   WILL_FIRE_RL_programFSM_action_np ||
	   WILL_FIRE_RL_programFSM_action_l138c13 ||
	   programFSM_state_mkFSMstate == 5'd5 ||
	   programFSM_state_mkFSMstate == 5'd6 ||
	   WILL_FIRE_RL_programFSM_action_np_1 ||
	   WILL_FIRE_RL_programFSM_action_f_init_l145c13 ||
	   WILL_FIRE_RL_programFSM_action_l93c16 ||
	   WILL_FIRE_RL_programFSM_action_l99c13 ||
	   programFSM_state_mkFSMstate == 5'd11 ||
	   WILL_FIRE_RL_programFSM_action_np_2 ||
	   WILL_FIRE_RL_programFSM_action_l147c26 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l111c16 ||
	   WILL_FIRE_RL_programFSM_action_l117c13 ||
	   programFSM_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_programFSM_action_np_3 ||
	   WILL_FIRE_RL_programFSM_action_l151c13 ||
	   programFSM_state_mkFSMstate == 5'd20 ||
	   WILL_FIRE_RL_programFSM_action_l111c16_1 ||
	   WILL_FIRE_RL_programFSM_action_l117c13_1 ||
	   programFSM_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_programFSM_action_np_4 ||
	   WILL_FIRE_RL_programFSM_action_l157c13))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 131, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l132c13]\n  and [RL_programFSM_action_l136c22, RL_programFSM_action_d_init_np,\n  RL_programFSM_action_np, RL_programFSM_action_l138c13,\n  RL_programFSM_action_l142c22, RL_programFSM_action_d_init_np_1,\n  RL_programFSM_action_np_1, RL_programFSM_action_f_init_l145c13,\n  RL_programFSM_action_l93c16, RL_programFSM_action_l99c13,\n  RL_programFSM_action_d_init_np_2, RL_programFSM_action_np_2,\n  RL_programFSM_action_l147c26, RL_programFSM_action_f_update_l145c13,\n  RL_programFSM_action_l111c16, RL_programFSM_action_l117c13,\n  RL_programFSM_action_d_init_np_3, RL_programFSM_action_np_3,\n  RL_programFSM_action_l151c13, RL_programFSM_action_l154c22,\n  RL_programFSM_action_l111c16_1, RL_programFSM_action_l117c13_1,\n  RL_programFSM_action_d_init_np_4, RL_programFSM_action_np_4,\n  RL_programFSM_action_l157c13] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkSumeClockProgrammer

