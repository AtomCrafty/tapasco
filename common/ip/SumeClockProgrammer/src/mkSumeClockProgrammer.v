//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Tue Sep 18 10:37:04 CEST 2018
//
//
// Ports:
// Name                         I/O  size props
// resetSwitch                    O     1 reg
// resetClock                     O     1 reg
// scl_debug                      O     1
// sda_debug                      O     1
// ident                          O    16 reg
// step                           O     8 reg
// led_clock                      O     1 reg
// led_init_done                  O     1 reg
// CLK_gt_clk                     I     1 clock
// RST_N_gt_rst_n                 I     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// reprogram_do_reprogram         I     1
// SDA                           IO     1 inout
// SCL                           IO     1 inout
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSumeClockProgrammer(CLK_gt_clk,
			     RST_N_gt_rst_n,
			     CLK,
			     RST_N,

			     .SDA(i2c_tSDA$IO),
			     .SCL(i2c_tSCL$IO),

			     resetSwitch,

			     resetClock,

			     scl_debug,

			     sda_debug,

			     ident,

			     step,

			     led_clock,

			     led_init_done,

			     reprogram_do_reprogram);
  input  CLK_gt_clk;
  input  RST_N_gt_rst_n;
  input  CLK;
  input  RST_N;

  inout  i2c_tSDA$IO;
  inout  i2c_tSCL$IO;

  // value method resetSwitch
  output resetSwitch;

  // value method resetClock
  output resetClock;

  // value method scl_debug
  output scl_debug;

  // value method sda_debug
  output sda_debug;

  // value method ident
  output [15 : 0] ident;

  // value method step
  output [7 : 0] step;

  // value method led_clock
  output led_clock;

  // value method led_init_done
  output led_init_done;

  // action method reprogram
  input  reprogram_do_reprogram;

  // signals for module outputs
  wire [15 : 0] ident;
  wire [7 : 0] step;
  wire led_clock,
       led_init_done,
       resetClock,
       resetSwitch,
       scl_debug,
       sda_debug;

  // inlined wires
  wire programFSM_start_wire$whas, programFSM_state_set_pw$whas;

  // register clk_cntr
  reg [31 : 0] clk_cntr;
  wire [31 : 0] clk_cntr$D_IN;
  wire clk_cntr$EN;

  // register clockResetW
  reg clockResetW;
  wire clockResetW$D_IN, clockResetW$EN;

  // register debounce
  reg [31 : 0] debounce;
  wire [31 : 0] debounce$D_IN;
  wire debounce$EN;

  // register delayCntr
  reg [31 : 0] delayCntr;
  reg [31 : 0] delayCntr$D_IN;
  wire delayCntr$EN;

  // register i2c_rAddress
  reg [7 : 0] i2c_rAddress;
  wire [7 : 0] i2c_rAddress$D_IN;
  wire i2c_rAddress$EN;

  // register i2c_rOutEn
  reg i2c_rOutEn;
  wire i2c_rOutEn$D_IN, i2c_rOutEn$EN;

  // register i2c_rSCL
  reg i2c_rSCL;
  wire i2c_rSCL$D_IN, i2c_rSCL$EN;

  // register i2c_rSDA
  reg i2c_rSDA;
  wire i2c_rSDA$D_IN, i2c_rSDA$EN;

  // register i2c_rSlaveAddr
  reg [6 : 0] i2c_rSlaveAddr;
  wire [6 : 0] i2c_rSlaveAddr$D_IN;
  wire i2c_rSlaveAddr$EN;

  // register i2c_rState
  reg i2c_rState;
  wire i2c_rState$D_IN, i2c_rState$EN;

  // register i2c_rWrite
  reg i2c_rWrite;
  wire i2c_rWrite$D_IN, i2c_rWrite$EN;

  // register i2c_rWriteData
  reg [7 : 0] i2c_rWriteData;
  wire [7 : 0] i2c_rWriteData$D_IN;
  wire i2c_rWriteData$EN;

  // register i2c_vrReadData_0
  reg i2c_vrReadData_0;
  wire i2c_vrReadData_0$D_IN, i2c_vrReadData_0$EN;

  // register i2c_vrReadData_1
  reg i2c_vrReadData_1;
  wire i2c_vrReadData_1$D_IN, i2c_vrReadData_1$EN;

  // register i2c_vrReadData_2
  reg i2c_vrReadData_2;
  wire i2c_vrReadData_2$D_IN, i2c_vrReadData_2$EN;

  // register i2c_vrReadData_3
  reg i2c_vrReadData_3;
  wire i2c_vrReadData_3$D_IN, i2c_vrReadData_3$EN;

  // register i2c_vrReadData_4
  reg i2c_vrReadData_4;
  wire i2c_vrReadData_4$D_IN, i2c_vrReadData_4$EN;

  // register i2c_vrReadData_5
  reg i2c_vrReadData_5;
  wire i2c_vrReadData_5$D_IN, i2c_vrReadData_5$EN;

  // register i2c_vrReadData_6
  reg i2c_vrReadData_6;
  wire i2c_vrReadData_6$D_IN, i2c_vrReadData_6$EN;

  // register i2c_vrReadData_7
  reg i2c_vrReadData_7;
  wire i2c_vrReadData_7$D_IN, i2c_vrReadData_7$EN;

  // register ident_reg
  reg [15 : 0] ident_reg;
  wire [15 : 0] ident_reg$D_IN;
  wire ident_reg$EN;

  // register init
  reg init;
  wire init$D_IN, init$EN;

  // register led_out
  reg led_out;
  wire led_out$D_IN, led_out$EN;

  // register programCntr
  reg [7 : 0] programCntr;
  wire [7 : 0] programCntr$D_IN;
  wire programCntr$EN;

  // register programFSM_start_reg
  reg programFSM_start_reg;
  wire programFSM_start_reg$D_IN, programFSM_start_reg$EN;

  // register programFSM_start_reg_1
  reg programFSM_start_reg_1;
  wire programFSM_start_reg_1$D_IN, programFSM_start_reg_1$EN;

  // register programFSM_state_can_overlap
  reg programFSM_state_can_overlap;
  wire programFSM_state_can_overlap$D_IN, programFSM_state_can_overlap$EN;

  // register programFSM_state_fired
  reg programFSM_state_fired;
  wire programFSM_state_fired$D_IN, programFSM_state_fired$EN;

  // register programFSM_state_mkFSMstate
  reg [4 : 0] programFSM_state_mkFSMstate;
  reg [4 : 0] programFSM_state_mkFSMstate$D_IN;
  wire programFSM_state_mkFSMstate$EN;

  // register reprogram_last
  reg reprogram_last;
  wire reprogram_last$D_IN, reprogram_last$EN;

  // register returnValue
  reg [7 : 0] returnValue;
  wire [7 : 0] returnValue$D_IN;
  wire returnValue$EN;

  // register step_reg
  reg [7 : 0] step_reg;
  wire [7 : 0] step_reg$D_IN;
  wire step_reg$EN;

  // register switchResetW
  reg switchResetW;
  wire switchResetW$D_IN, switchResetW$EN;

  // register writeSuccessful
  reg writeSuccessful;
  wire writeSuccessful$D_IN, writeSuccessful$EN;

  // ports of submodule i2c_fRequest
  wire [23 : 0] i2c_fRequest$D_IN, i2c_fRequest$D_OUT;
  wire i2c_fRequest$CLR,
       i2c_fRequest$DEQ,
       i2c_fRequest$EMPTY_N,
       i2c_fRequest$ENQ,
       i2c_fRequest$FULL_N;

  // ports of submodule i2c_fResponse
  wire [7 : 0] i2c_fResponse$D_IN, i2c_fResponse$D_OUT;
  wire i2c_fResponse$CLR,
       i2c_fResponse$DEQ,
       i2c_fResponse$EMPTY_N,
       i2c_fResponse$ENQ,
       i2c_fResponse$FULL_N;

  // ports of submodule i2c_rPlayIndex
  wire [9 : 0] i2c_rPlayIndex$DATA_A,
	       i2c_rPlayIndex$DATA_B,
	       i2c_rPlayIndex$DATA_C,
	       i2c_rPlayIndex$DATA_F,
	       i2c_rPlayIndex$Q_OUT;
  wire i2c_rPlayIndex$ADDA,
       i2c_rPlayIndex$ADDB,
       i2c_rPlayIndex$SETC,
       i2c_rPlayIndex$SETF;

  // ports of submodule i2c_rPrescaler
  wire [31 : 0] i2c_rPrescaler$DATA_A,
		i2c_rPrescaler$DATA_B,
		i2c_rPrescaler$DATA_C,
		i2c_rPrescaler$DATA_F,
		i2c_rPrescaler$Q_OUT;
  wire i2c_rPrescaler$ADDA,
       i2c_rPrescaler$ADDB,
       i2c_rPrescaler$SETC,
       i2c_rPrescaler$SETF;

  // ports of submodule i2c_tSCL
  wire i2c_tSCL$IO, i2c_tSCL$O;

  // ports of submodule i2c_tSDA
  wire i2c_tSDA$IO, i2c_tSDA$O;

  // rule scheduling signals
  wire WILL_FIRE_RL_do_debounce,
       WILL_FIRE_RL_i2c_done_read,
       WILL_FIRE_RL_i2c_done_write,
       WILL_FIRE_RL_i2c_running_read,
       WILL_FIRE_RL_i2c_running_write,
       WILL_FIRE_RL_programFSM_action_l101c13,
       WILL_FIRE_RL_programFSM_action_l142c23,
       WILL_FIRE_RL_programFSM_action_l143c18,
       WILL_FIRE_RL_programFSM_action_l150c18,
       WILL_FIRE_RL_programFSM_action_l157c18,
       WILL_FIRE_RL_programFSM_action_l175c18,
       WILL_FIRE_RL_programFSM_action_l95c16,
       WILL_FIRE_RL_programFSM_fsm_start,
       WILL_FIRE_RL_programFSM_idle_l141c9;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_delayCntr$write_1__VAL_4;
  wire [7 : 0] MUX_i2c_fResponse$enq_1__VAL_1, MUX_programCntr$write_1__VAL_1;
  wire MUX_i2c_rOutEn$write_1__SEL_1,
       MUX_i2c_rOutEn$write_1__VAL_1,
       MUX_i2c_rOutEn$write_1__VAL_2,
       MUX_i2c_rSCL$write_1__VAL_1,
       MUX_i2c_rSCL$write_1__VAL_2,
       MUX_i2c_rSDA$write_1__VAL_1,
       MUX_i2c_rSDA$write_1__VAL_2,
       MUX_i2c_rState$write_1__SEL_1,
       MUX_i2c_rState$write_1__SEL_2;

  // remaining internal signals
  reg [7 : 0] x__h32328, x__h32638;
  reg [6 : 0] x_slaveaddr__h55369;
  reg SEL_ARR_1_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0__ETC___d213;
  wire [119 : 0] _1044393425259576759155060135206397075__q5,
		 _1329227987119335533342540869413109767__q3,
		 _306783360__q1,
		 wRdData__h1322;
  wire [86 : 0] _121583396715528419856163987__q4,
		_154742503901866210315206599__q2,
		wWrData__h1326;
  wire [2 : 0] a0__h1311,
	       a1__h1310,
	       a2__h1309,
	       a3__h1308,
	       a4__h1307,
	       a5__h1306,
	       a6__h1305,
	       a7__h1304,
	       d0__h1320,
	       d1__h1319,
	       d2__h1318,
	       d3__h1317,
	       d4__h1316,
	       d5__h1315,
	       d6__h1314,
	       d7__h1313,
	       s0__h1302,
	       s1__h1301,
	       s2__h1300,
	       s3__h1299,
	       s4__h1298,
	       s5__h1297,
	       s6__h1296;
  wire NOT_SEL_ARR_116_104_104_104_104_104_104_104_10_ETC___d222,
       _306783360_BIT_i2c_rPlayIndex_value__8_BITS_6_T_ETC___d108,
       programFSM_abort_whas__40_AND_programFSM_abort_ETC___d244,
       reprogram_last_56_AND_NOT_reprogram_w_whas__53_ETC___d270;

  // value method resetSwitch
  assign resetSwitch = switchResetW ;

  // value method resetClock
  assign resetClock = clockResetW ;

  // value method scl_debug
  assign scl_debug = i2c_tSCL$O ;

  // value method sda_debug
  assign sda_debug = i2c_tSDA$O ;

  // value method ident
  assign ident = ident_reg ;

  // value method step
  assign step = step_reg ;

  // value method led_clock
  assign led_clock = led_out ;

  // value method led_init_done
  assign led_init_done = init ;

  // submodule i2c_fRequest
  SizedFIFO #(.p1width(32'd24),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) i2c_fRequest(.RST(RST_N),
					    .CLK(CLK),
					    .D_IN(i2c_fRequest$D_IN),
					    .ENQ(i2c_fRequest$ENQ),
					    .DEQ(i2c_fRequest$DEQ),
					    .CLR(i2c_fRequest$CLR),
					    .D_OUT(i2c_fRequest$D_OUT),
					    .FULL_N(i2c_fRequest$FULL_N),
					    .EMPTY_N(i2c_fRequest$EMPTY_N));

  // submodule i2c_fResponse
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) i2c_fResponse(.RST(RST_N),
					     .CLK(CLK),
					     .D_IN(i2c_fResponse$D_IN),
					     .ENQ(i2c_fResponse$ENQ),
					     .DEQ(i2c_fResponse$DEQ),
					     .CLR(i2c_fResponse$CLR),
					     .D_OUT(i2c_fResponse$D_OUT),
					     .FULL_N(i2c_fResponse$FULL_N),
					     .EMPTY_N(i2c_fResponse$EMPTY_N));

  // submodule i2c_rPlayIndex
  Counter #(.width(32'd10), .init(10'd0)) i2c_rPlayIndex(.CLK(CLK),
							 .RST(RST_N),
							 .DATA_A(i2c_rPlayIndex$DATA_A),
							 .DATA_B(i2c_rPlayIndex$DATA_B),
							 .DATA_C(i2c_rPlayIndex$DATA_C),
							 .DATA_F(i2c_rPlayIndex$DATA_F),
							 .ADDA(i2c_rPlayIndex$ADDA),
							 .ADDB(i2c_rPlayIndex$ADDB),
							 .SETC(i2c_rPlayIndex$SETC),
							 .SETF(i2c_rPlayIndex$SETF),
							 .Q_OUT(i2c_rPlayIndex$Q_OUT));

  // submodule i2c_rPrescaler
  Counter #(.width(32'd32), .init(32'd10000)) i2c_rPrescaler(.CLK(CLK),
							     .RST(RST_N),
							     .DATA_A(i2c_rPrescaler$DATA_A),
							     .DATA_B(i2c_rPrescaler$DATA_B),
							     .DATA_C(i2c_rPrescaler$DATA_C),
							     .DATA_F(i2c_rPrescaler$DATA_F),
							     .ADDA(i2c_rPrescaler$ADDA),
							     .ADDB(i2c_rPrescaler$ADDB),
							     .SETC(i2c_rPrescaler$SETC),
							     .SETF(i2c_rPrescaler$SETF),
							     .Q_OUT(i2c_rPrescaler$Q_OUT));

  // submodule i2c_tSCL
  TriState #(.width(32'd1)) i2c_tSCL(.I(i2c_rSCL),
				     .OE(1'd1),
				     .O(i2c_tSCL$O),
				     .IO(i2c_tSCL$IO));

  // submodule i2c_tSDA
  TriState #(.width(32'd1)) i2c_tSDA(.I(i2c_rSDA),
				     .OE(i2c_rOutEn),
				     .O(i2c_tSDA$O),
				     .IO(i2c_tSDA$IO));

  // rule RL_do_debounce
  assign WILL_FIRE_RL_do_debounce =
	     programFSM_abort_whas__40_AND_programFSM_abort_ETC___d244 &&
	     !programFSM_start_reg &&
	     init ;

  // rule RL_i2c_running_write
  assign WILL_FIRE_RL_i2c_running_write =
	     i2c_rState && i2c_rWrite && i2c_rPrescaler$Q_OUT == 32'd0 &&
	     i2c_rPlayIndex$Q_OUT != 10'd0 ;

  // rule RL_i2c_running_read
  assign WILL_FIRE_RL_i2c_running_read =
	     i2c_rState && !i2c_rWrite && i2c_rPrescaler$Q_OUT == 32'd0 &&
	     i2c_rPlayIndex$Q_OUT != 10'd0 ;

  // rule RL_i2c_done_write
  assign WILL_FIRE_RL_i2c_done_write =
	     i2c_fResponse$FULL_N && i2c_rState && i2c_rWrite &&
	     i2c_rPrescaler$Q_OUT == 32'd0 &&
	     i2c_rPlayIndex$Q_OUT == 10'd0 ;

  // rule RL_i2c_done_read
  assign WILL_FIRE_RL_i2c_done_read =
	     i2c_fResponse$FULL_N && i2c_rState && !i2c_rWrite &&
	     i2c_rPrescaler$Q_OUT == 32'd0 &&
	     i2c_rPlayIndex$Q_OUT == 10'd0 ;

  // rule RL_programFSM_action_l143c18
  assign WILL_FIRE_RL_programFSM_action_l143c18 =
	     delayCntr == 32'd0 && programFSM_state_mkFSMstate == 5'd1 ;

  // rule RL_programFSM_action_l150c18
  assign WILL_FIRE_RL_programFSM_action_l150c18 =
	     delayCntr == 32'd0 && programFSM_state_mkFSMstate == 5'd5 ;

  // rule RL_programFSM_action_l157c18
  assign WILL_FIRE_RL_programFSM_action_l157c18 =
	     delayCntr == 32'd0 && programFSM_state_mkFSMstate == 5'd9 ;

  // rule RL_programFSM_action_l95c16
  assign WILL_FIRE_RL_programFSM_action_l95c16 =
	     i2c_fRequest$FULL_N &&
	     NOT_SEL_ARR_116_104_104_104_104_104_104_104_10_ETC___d222 ;

  // rule RL_programFSM_action_l101c13
  assign WILL_FIRE_RL_programFSM_action_l101c13 =
	     i2c_fResponse$EMPTY_N && programFSM_state_mkFSMstate == 5'd12 ;

  // rule RL_programFSM_action_l175c18
  assign WILL_FIRE_RL_programFSM_action_l175c18 =
	     x_slaveaddr__h55369 == 7'd0 && x__h32328 == 8'd0 &&
	     x__h32638 == 8'd0 &&
	     SEL_ARR_1_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0__ETC___d213 &&
	     (programFSM_state_mkFSMstate == 5'd11 ||
	      programFSM_state_mkFSMstate == 5'd15) ;

  // rule RL_programFSM_fsm_start
  assign WILL_FIRE_RL_programFSM_fsm_start =
	     programFSM_abort_whas__40_AND_programFSM_abort_ETC___d244 &&
	     programFSM_start_reg ;

  // rule RL_programFSM_action_l142c23
  assign WILL_FIRE_RL_programFSM_action_l142c23 =
	     programFSM_start_wire$whas &&
	     (programFSM_state_mkFSMstate == 5'd0 ||
	      programFSM_state_mkFSMstate == 5'd16) ;

  // rule RL_programFSM_idle_l141c9
  assign WILL_FIRE_RL_programFSM_idle_l141c9 =
	     !programFSM_start_wire$whas &&
	     programFSM_state_mkFSMstate == 5'd16 ;

  // inputs to muxes for submodule ports
  assign MUX_i2c_rOutEn$write_1__SEL_1 =
	     WILL_FIRE_RL_i2c_done_write || WILL_FIRE_RL_i2c_running_write ;
  assign MUX_i2c_rState$write_1__SEL_1 =
	     WILL_FIRE_RL_i2c_done_read || WILL_FIRE_RL_i2c_done_write ;
  assign MUX_i2c_rState$write_1__SEL_2 = i2c_fRequest$EMPTY_N && !i2c_rState ;
  assign MUX_delayCntr$write_1__VAL_4 = delayCntr - 32'd1 ;
  assign MUX_i2c_fResponse$enq_1__VAL_1 =
	     { i2c_vrReadData_7,
	       i2c_vrReadData_6,
	       i2c_vrReadData_5,
	       i2c_vrReadData_4,
	       i2c_vrReadData_3,
	       i2c_vrReadData_2,
	       i2c_vrReadData_1,
	       i2c_vrReadData_0 } ;
  assign MUX_i2c_rOutEn$write_1__VAL_1 =
	     _154742503901866210315206599__q2[i2c_rPlayIndex$Q_OUT[6:0]] ;
  assign MUX_i2c_rOutEn$write_1__VAL_2 =
	     _1329227987119335533342540869413109767__q3[i2c_rPlayIndex$Q_OUT[6:0]] ;
  assign MUX_i2c_rSCL$write_1__VAL_1 =
	     _121583396715528419856163987__q4[i2c_rPlayIndex$Q_OUT[6:0]] ;
  assign MUX_i2c_rSCL$write_1__VAL_2 =
	     _1044393425259576759155060135206397075__q5[i2c_rPlayIndex$Q_OUT[6:0]] ;
  assign MUX_i2c_rSDA$write_1__VAL_1 =
	     wWrData__h1326[i2c_rPlayIndex$Q_OUT[6:0]] ;
  assign MUX_i2c_rSDA$write_1__VAL_2 =
	     wRdData__h1322[i2c_rPlayIndex$Q_OUT[6:0]] ;
  assign MUX_programCntr$write_1__VAL_1 = programCntr + 8'd1 ;

  // inlined wires
  assign programFSM_start_wire$whas =
	     WILL_FIRE_RL_programFSM_fsm_start ||
	     programFSM_start_reg_1 && !programFSM_state_fired ;
  assign programFSM_state_set_pw$whas =
	     WILL_FIRE_RL_programFSM_idle_l141c9 ||
	     WILL_FIRE_RL_programFSM_action_l175c18 ||
	     programFSM_state_mkFSMstate == 5'd14 ||
	     programFSM_state_mkFSMstate == 5'd13 ||
	     WILL_FIRE_RL_programFSM_action_l101c13 ||
	     WILL_FIRE_RL_programFSM_action_l95c16 ||
	     programFSM_state_mkFSMstate == 5'd10 ||
	     WILL_FIRE_RL_programFSM_action_l157c18 ||
	     programFSM_state_mkFSMstate == 5'd8 ||
	     programFSM_state_mkFSMstate == 5'd7 ||
	     programFSM_state_mkFSMstate == 5'd6 ||
	     WILL_FIRE_RL_programFSM_action_l150c18 ||
	     programFSM_state_mkFSMstate == 5'd4 ||
	     programFSM_state_mkFSMstate == 5'd3 ||
	     programFSM_state_mkFSMstate == 5'd2 ||
	     WILL_FIRE_RL_programFSM_action_l143c18 ||
	     WILL_FIRE_RL_programFSM_action_l142c23 ;

  // register clk_cntr
  assign clk_cntr$D_IN =
	     (clk_cntr == 32'd0) ? 32'd156000000 : clk_cntr - 32'd1 ;
  assign clk_cntr$EN = 1'd1 ;

  // register clockResetW
  assign clockResetW$D_IN = programFSM_state_mkFSMstate != 5'd6 ;
  assign clockResetW$EN =
	     programFSM_state_mkFSMstate == 5'd6 ||
	     programFSM_state_mkFSMstate == 5'd2 ;

  // register debounce
  assign debounce$D_IN =
	     (!reprogram_last && reprogram_do_reprogram &&
	      debounce == 32'd0) ?
	       32'd10000000 :
	       debounce - 32'd1 ;
  assign debounce$EN =
	     WILL_FIRE_RL_do_debounce &&
	     (!reprogram_last && reprogram_do_reprogram ||
	      debounce != 32'd0) ;

  // register delayCntr
  always@(WILL_FIRE_RL_programFSM_action_l142c23 or
	  programFSM_state_mkFSMstate or
	  delayCntr or MUX_delayCntr$write_1__VAL_4)
  case (1'b1)
    WILL_FIRE_RL_programFSM_action_l142c23: delayCntr$D_IN = 32'd100000000;
    programFSM_state_mkFSMstate == 5'd8 ||
    programFSM_state_mkFSMstate == 5'd4:
	delayCntr$D_IN = 32'd10000000;
    delayCntr != 32'd0: delayCntr$D_IN = MUX_delayCntr$write_1__VAL_4;
    default: delayCntr$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign delayCntr$EN =
	     delayCntr != 32'd0 || programFSM_state_mkFSMstate == 5'd8 ||
	     programFSM_state_mkFSMstate == 5'd4 ||
	     WILL_FIRE_RL_programFSM_action_l142c23 ;

  // register i2c_rAddress
  assign i2c_rAddress$D_IN = i2c_fRequest$D_OUT[15:8] ;
  assign i2c_rAddress$EN = MUX_i2c_rState$write_1__SEL_2 ;

  // register i2c_rOutEn
  assign i2c_rOutEn$D_IN =
	     MUX_i2c_rOutEn$write_1__SEL_1 ?
	       MUX_i2c_rOutEn$write_1__VAL_1 :
	       MUX_i2c_rOutEn$write_1__VAL_2 ;
  assign i2c_rOutEn$EN =
	     WILL_FIRE_RL_i2c_done_write || WILL_FIRE_RL_i2c_running_write ||
	     WILL_FIRE_RL_i2c_done_read ||
	     WILL_FIRE_RL_i2c_running_read ;

  // register i2c_rSCL
  assign i2c_rSCL$D_IN =
	     MUX_i2c_rOutEn$write_1__SEL_1 ?
	       MUX_i2c_rSCL$write_1__VAL_1 :
	       MUX_i2c_rSCL$write_1__VAL_2 ;
  assign i2c_rSCL$EN =
	     WILL_FIRE_RL_i2c_done_write || WILL_FIRE_RL_i2c_running_write ||
	     WILL_FIRE_RL_i2c_done_read ||
	     WILL_FIRE_RL_i2c_running_read ;

  // register i2c_rSDA
  assign i2c_rSDA$D_IN =
	     MUX_i2c_rOutEn$write_1__SEL_1 ?
	       MUX_i2c_rSDA$write_1__VAL_1 :
	       MUX_i2c_rSDA$write_1__VAL_2 ;
  assign i2c_rSDA$EN =
	     WILL_FIRE_RL_i2c_done_write || WILL_FIRE_RL_i2c_running_write ||
	     WILL_FIRE_RL_i2c_done_read ||
	     WILL_FIRE_RL_i2c_running_read ;

  // register i2c_rSlaveAddr
  assign i2c_rSlaveAddr$D_IN = i2c_fRequest$D_OUT[22:16] ;
  assign i2c_rSlaveAddr$EN = MUX_i2c_rState$write_1__SEL_2 ;

  // register i2c_rState
  assign i2c_rState$D_IN = !MUX_i2c_rState$write_1__SEL_1 ;
  assign i2c_rState$EN =
	     WILL_FIRE_RL_i2c_done_read || WILL_FIRE_RL_i2c_done_write ||
	     i2c_fRequest$EMPTY_N && !i2c_rState ;

  // register i2c_rWrite
  assign i2c_rWrite$D_IN = i2c_fRequest$D_OUT[23] ;
  assign i2c_rWrite$EN = MUX_i2c_rState$write_1__SEL_2 ;

  // register i2c_rWriteData
  assign i2c_rWriteData$D_IN = i2c_fRequest$D_OUT[7:0] ;
  assign i2c_rWriteData$EN = MUX_i2c_rState$write_1__SEL_2 ;

  // register i2c_vrReadData_0
  assign i2c_vrReadData_0$D_IN = i2c_tSDA$O ;
  assign i2c_vrReadData_0$EN =
	     WILL_FIRE_RL_i2c_running_read &&
	     _306783360_BIT_i2c_rPlayIndex_value__8_BITS_6_T_ETC___d108 ;

  // register i2c_vrReadData_1
  assign i2c_vrReadData_1$D_IN = i2c_vrReadData_0 ;
  assign i2c_vrReadData_1$EN =
	     WILL_FIRE_RL_i2c_running_read &&
	     _306783360_BIT_i2c_rPlayIndex_value__8_BITS_6_T_ETC___d108 ;

  // register i2c_vrReadData_2
  assign i2c_vrReadData_2$D_IN = i2c_vrReadData_1 ;
  assign i2c_vrReadData_2$EN =
	     WILL_FIRE_RL_i2c_running_read &&
	     _306783360_BIT_i2c_rPlayIndex_value__8_BITS_6_T_ETC___d108 ;

  // register i2c_vrReadData_3
  assign i2c_vrReadData_3$D_IN = i2c_vrReadData_2 ;
  assign i2c_vrReadData_3$EN =
	     WILL_FIRE_RL_i2c_running_read &&
	     _306783360_BIT_i2c_rPlayIndex_value__8_BITS_6_T_ETC___d108 ;

  // register i2c_vrReadData_4
  assign i2c_vrReadData_4$D_IN = i2c_vrReadData_3 ;
  assign i2c_vrReadData_4$EN =
	     WILL_FIRE_RL_i2c_running_read &&
	     _306783360_BIT_i2c_rPlayIndex_value__8_BITS_6_T_ETC___d108 ;

  // register i2c_vrReadData_5
  assign i2c_vrReadData_5$D_IN = i2c_vrReadData_4 ;
  assign i2c_vrReadData_5$EN =
	     WILL_FIRE_RL_i2c_running_read &&
	     _306783360_BIT_i2c_rPlayIndex_value__8_BITS_6_T_ETC___d108 ;

  // register i2c_vrReadData_6
  assign i2c_vrReadData_6$D_IN = i2c_vrReadData_5 ;
  assign i2c_vrReadData_6$EN =
	     WILL_FIRE_RL_i2c_running_read &&
	     _306783360_BIT_i2c_rPlayIndex_value__8_BITS_6_T_ETC___d108 ;

  // register i2c_vrReadData_7
  assign i2c_vrReadData_7$D_IN = i2c_vrReadData_6 ;
  assign i2c_vrReadData_7$EN =
	     WILL_FIRE_RL_i2c_running_read &&
	     _306783360_BIT_i2c_rPlayIndex_value__8_BITS_6_T_ETC___d108 ;

  // register ident_reg
  assign ident_reg$D_IN = 16'h0 ;
  assign ident_reg$EN = 1'b0 ;

  // register init
  assign init$D_IN = 1'd1 ;
  assign init$EN = WILL_FIRE_RL_programFSM_action_l175c18 ;

  // register led_out
  assign led_out$D_IN = !led_out ;
  assign led_out$EN = clk_cntr == 32'd0 ;

  // register programCntr
  assign programCntr$D_IN =
	     (programFSM_state_mkFSMstate == 5'd14) ?
	       MUX_programCntr$write_1__VAL_1 :
	       8'd0 ;
  assign programCntr$EN =
	     programFSM_state_mkFSMstate == 5'd14 ||
	     programFSM_state_mkFSMstate == 5'd10 ;

  // register programFSM_start_reg
  assign programFSM_start_reg$D_IN = !WILL_FIRE_RL_programFSM_fsm_start ;
  assign programFSM_start_reg$EN =
	     WILL_FIRE_RL_do_debounce &&
	     reprogram_last_56_AND_NOT_reprogram_w_whas__53_ETC___d270 ||
	     WILL_FIRE_RL_programFSM_fsm_start ||
	     programFSM_abort_whas__40_AND_programFSM_abort_ETC___d244 &&
	     !programFSM_start_reg &&
	     !init ;

  // register programFSM_start_reg_1
  assign programFSM_start_reg_1$D_IN = programFSM_start_wire$whas ;
  assign programFSM_start_reg_1$EN = 1'd1 ;

  // register programFSM_state_can_overlap
  assign programFSM_state_can_overlap$D_IN =
	     programFSM_state_set_pw$whas || programFSM_state_can_overlap ;
  assign programFSM_state_can_overlap$EN = 1'd1 ;

  // register programFSM_state_fired
  assign programFSM_state_fired$D_IN = programFSM_state_set_pw$whas ;
  assign programFSM_state_fired$EN = 1'd1 ;

  // register programFSM_state_mkFSMstate
  always@(WILL_FIRE_RL_programFSM_idle_l141c9 or
	  WILL_FIRE_RL_programFSM_action_l142c23 or
	  WILL_FIRE_RL_programFSM_action_l143c18 or
	  programFSM_state_mkFSMstate or
	  WILL_FIRE_RL_programFSM_action_l150c18 or
	  WILL_FIRE_RL_programFSM_action_l157c18 or
	  WILL_FIRE_RL_programFSM_action_l95c16 or
	  WILL_FIRE_RL_programFSM_action_l101c13 or
	  WILL_FIRE_RL_programFSM_action_l175c18)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_programFSM_idle_l141c9:
	  programFSM_state_mkFSMstate$D_IN = 5'd0;
      WILL_FIRE_RL_programFSM_action_l142c23:
	  programFSM_state_mkFSMstate$D_IN = 5'd1;
      WILL_FIRE_RL_programFSM_action_l143c18:
	  programFSM_state_mkFSMstate$D_IN = 5'd2;
      programFSM_state_mkFSMstate == 5'd2:
	  programFSM_state_mkFSMstate$D_IN = 5'd3;
      programFSM_state_mkFSMstate == 5'd3:
	  programFSM_state_mkFSMstate$D_IN = 5'd4;
      programFSM_state_mkFSMstate == 5'd4:
	  programFSM_state_mkFSMstate$D_IN = 5'd5;
      WILL_FIRE_RL_programFSM_action_l150c18:
	  programFSM_state_mkFSMstate$D_IN = 5'd6;
      programFSM_state_mkFSMstate == 5'd6:
	  programFSM_state_mkFSMstate$D_IN = 5'd7;
      programFSM_state_mkFSMstate == 5'd7:
	  programFSM_state_mkFSMstate$D_IN = 5'd8;
      programFSM_state_mkFSMstate == 5'd8:
	  programFSM_state_mkFSMstate$D_IN = 5'd9;
      WILL_FIRE_RL_programFSM_action_l157c18:
	  programFSM_state_mkFSMstate$D_IN = 5'd10;
      programFSM_state_mkFSMstate == 5'd10:
	  programFSM_state_mkFSMstate$D_IN = 5'd11;
      WILL_FIRE_RL_programFSM_action_l95c16:
	  programFSM_state_mkFSMstate$D_IN = 5'd12;
      WILL_FIRE_RL_programFSM_action_l101c13:
	  programFSM_state_mkFSMstate$D_IN = 5'd13;
      programFSM_state_mkFSMstate == 5'd13:
	  programFSM_state_mkFSMstate$D_IN = 5'd14;
      programFSM_state_mkFSMstate == 5'd14:
	  programFSM_state_mkFSMstate$D_IN = 5'd15;
      WILL_FIRE_RL_programFSM_action_l175c18:
	  programFSM_state_mkFSMstate$D_IN = 5'd16;
      default: programFSM_state_mkFSMstate$D_IN =
		   5'b01010 /* unspecified value */ ;
    endcase
  end
  assign programFSM_state_mkFSMstate$EN =
	     WILL_FIRE_RL_programFSM_idle_l141c9 ||
	     WILL_FIRE_RL_programFSM_action_l142c23 ||
	     WILL_FIRE_RL_programFSM_action_l143c18 ||
	     programFSM_state_mkFSMstate == 5'd2 ||
	     programFSM_state_mkFSMstate == 5'd3 ||
	     programFSM_state_mkFSMstate == 5'd4 ||
	     WILL_FIRE_RL_programFSM_action_l150c18 ||
	     programFSM_state_mkFSMstate == 5'd6 ||
	     programFSM_state_mkFSMstate == 5'd7 ||
	     programFSM_state_mkFSMstate == 5'd8 ||
	     WILL_FIRE_RL_programFSM_action_l157c18 ||
	     programFSM_state_mkFSMstate == 5'd10 ||
	     WILL_FIRE_RL_programFSM_action_l95c16 ||
	     WILL_FIRE_RL_programFSM_action_l101c13 ||
	     programFSM_state_mkFSMstate == 5'd13 ||
	     programFSM_state_mkFSMstate == 5'd14 ||
	     WILL_FIRE_RL_programFSM_action_l175c18 ;

  // register reprogram_last
  assign reprogram_last$D_IN = reprogram_do_reprogram ;
  assign reprogram_last$EN = WILL_FIRE_RL_do_debounce ;

  // register returnValue
  assign returnValue$D_IN = 8'h0 ;
  assign returnValue$EN = 1'b0 ;

  // register step_reg
  assign step_reg$D_IN = step_reg + 8'd1 ;
  assign step_reg$EN =
	     programFSM_state_mkFSMstate == 5'd13 ||
	     programFSM_state_mkFSMstate == 5'd7 ||
	     programFSM_state_mkFSMstate == 5'd3 ;

  // register switchResetW
  assign switchResetW$D_IN = programFSM_state_mkFSMstate != 5'd6 ;
  assign switchResetW$EN =
	     programFSM_state_mkFSMstate == 5'd6 ||
	     programFSM_state_mkFSMstate == 5'd2 ;

  // register writeSuccessful
  assign writeSuccessful$D_IN = 1'b0 ;
  assign writeSuccessful$EN = 1'b0 ;

  // submodule i2c_fRequest
  assign i2c_fRequest$D_IN =
	     { 1'd1, x_slaveaddr__h55369, x__h32328, x__h32638 } ;
  assign i2c_fRequest$ENQ = WILL_FIRE_RL_programFSM_action_l95c16 ;
  assign i2c_fRequest$DEQ = MUX_i2c_rState$write_1__SEL_2 ;
  assign i2c_fRequest$CLR = 1'b0 ;

  // submodule i2c_fResponse
  assign i2c_fResponse$D_IN =
	     WILL_FIRE_RL_i2c_done_read ?
	       MUX_i2c_fResponse$enq_1__VAL_1 :
	       8'd0 ;
  assign i2c_fResponse$ENQ = MUX_i2c_rState$write_1__SEL_1 ;
  assign i2c_fResponse$DEQ = WILL_FIRE_RL_programFSM_action_l101c13 ;
  assign i2c_fResponse$CLR = 1'b0 ;

  // submodule i2c_rPlayIndex
  assign i2c_rPlayIndex$DATA_A = 10'h0 ;
  assign i2c_rPlayIndex$DATA_B = 10'd1023 ;
  assign i2c_rPlayIndex$DATA_C = 10'h0 ;
  assign i2c_rPlayIndex$DATA_F = i2c_fRequest$D_OUT[23] ? 10'd86 : 10'd119 ;
  assign i2c_rPlayIndex$ADDA = 1'b0 ;
  assign i2c_rPlayIndex$ADDB =
	     WILL_FIRE_RL_i2c_done_write || WILL_FIRE_RL_i2c_running_read ||
	     WILL_FIRE_RL_i2c_running_write ;
  assign i2c_rPlayIndex$SETC = 1'b0 ;
  assign i2c_rPlayIndex$SETF = MUX_i2c_rState$write_1__SEL_2 ;

  // submodule i2c_rPrescaler
  assign i2c_rPrescaler$DATA_A = 32'h0 ;
  assign i2c_rPrescaler$DATA_B = 32'hFFFFFFFF ;
  assign i2c_rPrescaler$DATA_C = 32'h0 ;
  assign i2c_rPrescaler$DATA_F = 32'd10000 ;
  assign i2c_rPrescaler$ADDA = 1'b0 ;
  assign i2c_rPrescaler$ADDB = i2c_rPrescaler$Q_OUT != 32'd0 ;
  assign i2c_rPrescaler$SETC = 1'b0 ;
  assign i2c_rPrescaler$SETF = i2c_rPrescaler$Q_OUT == 32'd0 ;

  // remaining internal signals
  assign NOT_SEL_ARR_116_104_104_104_104_104_104_104_10_ETC___d222 =
	     (x_slaveaddr__h55369 != 7'd0 || x__h32328 != 8'd0 ||
	      x__h32638 != 8'd0 ||
	      !SEL_ARR_1_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0__ETC___d213) &&
	     (programFSM_state_mkFSMstate == 5'd11 ||
	      programFSM_state_mkFSMstate == 5'd15) ;
  assign _1044393425259576759155060135206397075__q5 =
	     120'hC92492492492493E92492492492493 ;
  assign _121583396715528419856163987__q4 = 87'h6492492492492492492493 ;
  assign _1329227987119335533342540869413109767__q3 =
	     120'hFFFFFFE3FFFFFC7FFFFFFE00000007 ;
  assign _154742503901866210315206599__q2 = 87'h7FFFFFF1FFFFFE3FFFFFC7 ;
  assign _306783360_BIT_i2c_rPlayIndex_value__8_BITS_6_T_ETC___d108 =
	     _306783360__q1[i2c_rPlayIndex$Q_OUT[6:0]] ;
  assign _306783360__q1 = 120'd306783360 ;
  assign a0__h1311 = {3{i2c_rAddress[0]}} ;
  assign a1__h1310 = {3{i2c_rAddress[1]}} ;
  assign a2__h1309 = {3{i2c_rAddress[2]}} ;
  assign a3__h1308 = {3{i2c_rAddress[3]}} ;
  assign a4__h1307 = {3{i2c_rAddress[4]}} ;
  assign a5__h1306 = {3{i2c_rAddress[5]}} ;
  assign a6__h1305 = {3{i2c_rAddress[6]}} ;
  assign a7__h1304 = {3{i2c_rAddress[7]}} ;
  assign d0__h1320 = {3{i2c_rWriteData[0]}} ;
  assign d1__h1319 = {3{i2c_rWriteData[1]}} ;
  assign d2__h1318 = {3{i2c_rWriteData[2]}} ;
  assign d3__h1317 = {3{i2c_rWriteData[3]}} ;
  assign d4__h1316 = {3{i2c_rWriteData[4]}} ;
  assign d5__h1315 = {3{i2c_rWriteData[5]}} ;
  assign d6__h1314 = {3{i2c_rWriteData[6]}} ;
  assign d7__h1313 = {3{i2c_rWriteData[7]}} ;
  assign programFSM_abort_whas__40_AND_programFSM_abort_ETC___d244 =
	     (programFSM_state_mkFSMstate == 5'd0 ||
	      programFSM_state_mkFSMstate == 5'd16) &&
	     (!programFSM_start_reg_1 || programFSM_state_fired) ;
  assign reprogram_last_56_AND_NOT_reprogram_w_whas__53_ETC___d270 =
	     reprogram_last && !reprogram_do_reprogram && debounce == 32'd0 ;
  assign s0__h1302 = {3{i2c_rSlaveAddr[0]}} ;
  assign s1__h1301 = {3{i2c_rSlaveAddr[1]}} ;
  assign s2__h1300 = {3{i2c_rSlaveAddr[2]}} ;
  assign s3__h1299 = {3{i2c_rSlaveAddr[3]}} ;
  assign s4__h1298 = {3{i2c_rSlaveAddr[4]}} ;
  assign s5__h1297 = {3{i2c_rSlaveAddr[5]}} ;
  assign s6__h1296 = {3{i2c_rSlaveAddr[6]}} ;
  assign wRdData__h1322 =
	     { 3'b100,
	       s6__h1296,
	       s5__h1297,
	       s4__h1298,
	       s3__h1299,
	       s2__h1300,
	       s1__h1301,
	       s0__h1302,
	       6'd0,
	       a7__h1304,
	       a6__h1305,
	       a5__h1306,
	       a4__h1307,
	       a3__h1308,
	       a2__h1309,
	       a1__h1310,
	       a0__h1311,
	       9'd14,
	       s6__h1296,
	       s5__h1297,
	       s4__h1298,
	       s3__h1299,
	       s2__h1300,
	       s1__h1301,
	       s0__h1302,
	       36'hE00000001 } ;
  assign wWrData__h1326 =
	     { 3'b100,
	       s6__h1296,
	       s5__h1297,
	       s4__h1298,
	       s3__h1299,
	       s2__h1300,
	       s1__h1301,
	       s0__h1302,
	       6'd0,
	       a7__h1304,
	       a6__h1305,
	       a5__h1306,
	       a4__h1307,
	       a3__h1308,
	       a2__h1309,
	       a1__h1310,
	       a0__h1311,
	       3'b0,
	       d7__h1313,
	       d6__h1314,
	       d5__h1315,
	       d4__h1316,
	       d3__h1317,
	       d2__h1318,
	       d1__h1319,
	       d0__h1320,
	       6'd1 } ;
  always@(programCntr)
  begin
    case (programCntr)
      8'd0: x_slaveaddr__h55369 = 7'd116;
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd15,
      8'd16,
      8'd17,
      8'd18,
      8'd19,
      8'd20,
      8'd21:
	  x_slaveaddr__h55369 = 7'd104;
      8'd22,
      8'd23,
      8'd24,
      8'd25,
      8'd26,
      8'd27,
      8'd28,
      8'd29,
      8'd30,
      8'd31,
      8'd32,
      8'd33,
      8'd34,
      8'd35,
      8'd36,
      8'd37,
      8'd38,
      8'd39,
      8'd40,
      8'd41,
      8'd42,
      8'd43,
      8'd44,
      8'd45,
      8'd46,
      8'd47,
      8'd48,
      8'd49,
      8'd50,
      8'd51,
      8'd52,
      8'd53,
      8'd54,
      8'd55,
      8'd56,
      8'd57,
      8'd58,
      8'd59,
      8'd60,
      8'd61,
      8'd62,
      8'd63,
      8'd64,
      8'd65,
      8'd66,
      8'd67,
      8'd68,
      8'd69,
      8'd70,
      8'd71,
      8'd72,
      8'd73,
      8'd74,
      8'd75,
      8'd76,
      8'd77,
      8'd78,
      8'd79,
      8'd80,
      8'd81,
      8'd82,
      8'd83,
      8'd84,
      8'd85,
      8'd86,
      8'd87,
      8'd88,
      8'd89,
      8'd90,
      8'd91,
      8'd92,
      8'd93,
      8'd94,
      8'd95,
      8'd96,
      8'd97,
      8'd98,
      8'd99,
      8'd100,
      8'd101,
      8'd102,
      8'd103,
      8'd104,
      8'd105,
      8'd106,
      8'd107,
      8'd108,
      8'd109,
      8'd110,
      8'd111,
      8'd112,
      8'd113,
      8'd114,
      8'd115,
      8'd116,
      8'd117,
      8'd118,
      8'd119,
      8'd120,
      8'd121,
      8'd122,
      8'd123,
      8'd124,
      8'd125,
      8'd126,
      8'd127,
      8'd128,
      8'd129,
      8'd130,
      8'd131,
      8'd132,
      8'd133,
      8'd134,
      8'd135,
      8'd136,
      8'd137,
      8'd138,
      8'd139,
      8'd140,
      8'd141,
      8'd142,
      8'd143,
      8'd144,
      8'd145,
      8'd146,
      8'd147,
      8'd148,
      8'd149,
      8'd150,
      8'd151,
      8'd152,
      8'd153,
      8'd154,
      8'd155,
      8'd156,
      8'd157,
      8'd158,
      8'd159,
      8'd160,
      8'd161,
      8'd162,
      8'd163,
      8'd164,
      8'd165,
      8'd166,
      8'd167,
      8'd168,
      8'd169,
      8'd170,
      8'd171,
      8'd172,
      8'd173,
      8'd174,
      8'd175,
      8'd176,
      8'd177,
      8'd178,
      8'd179,
      8'd180,
      8'd181,
      8'd182,
      8'd183,
      8'd184,
      8'd185,
      8'd186,
      8'd187,
      8'd188,
      8'd189,
      8'd190,
      8'd191,
      8'd192,
      8'd193,
      8'd194,
      8'd195,
      8'd196,
      8'd197,
      8'd198,
      8'd199,
      8'd200,
      8'd201,
      8'd202,
      8'd203,
      8'd204,
      8'd205,
      8'd206,
      8'd207,
      8'd208,
      8'd209,
      8'd210,
      8'd211,
      8'd212,
      8'd213,
      8'd214,
      8'd215,
      8'd216,
      8'd217,
      8'd218,
      8'd219,
      8'd220,
      8'd221,
      8'd222,
      8'd223,
      8'd224,
      8'd225,
      8'd226,
      8'd227,
      8'd228,
      8'd229,
      8'd230,
      8'd231,
      8'd232,
      8'd233,
      8'd234,
      8'd235,
      8'd236,
      8'd237,
      8'd238,
      8'd239,
      8'd240,
      8'd241,
      8'd242,
      8'd243,
      8'd244,
      8'd245,
      8'd246,
      8'd247,
      8'd248,
      8'd249,
      8'd250,
      8'd251,
      8'd252,
      8'd253,
      8'd254,
      8'd255:
	  x_slaveaddr__h55369 = 7'd0;
    endcase
  end
  always@(programCntr)
  begin
    case (programCntr)
      8'd0: x__h32328 = 8'd16;
      8'd1,
      8'd22,
      8'd23,
      8'd24,
      8'd25,
      8'd26,
      8'd27,
      8'd28,
      8'd29,
      8'd30,
      8'd31,
      8'd32,
      8'd33,
      8'd34,
      8'd35,
      8'd36,
      8'd37,
      8'd38,
      8'd39,
      8'd40,
      8'd41,
      8'd42,
      8'd43,
      8'd44,
      8'd45,
      8'd46,
      8'd47,
      8'd48,
      8'd49,
      8'd50,
      8'd51,
      8'd52,
      8'd53,
      8'd54,
      8'd55,
      8'd56,
      8'd57,
      8'd58,
      8'd59,
      8'd60,
      8'd61,
      8'd62,
      8'd63,
      8'd64,
      8'd65,
      8'd66,
      8'd67,
      8'd68,
      8'd69,
      8'd70,
      8'd71,
      8'd72,
      8'd73,
      8'd74,
      8'd75,
      8'd76,
      8'd77,
      8'd78,
      8'd79,
      8'd80,
      8'd81,
      8'd82,
      8'd83,
      8'd84,
      8'd85,
      8'd86,
      8'd87,
      8'd88,
      8'd89,
      8'd90,
      8'd91,
      8'd92,
      8'd93,
      8'd94,
      8'd95,
      8'd96,
      8'd97,
      8'd98,
      8'd99,
      8'd100,
      8'd101,
      8'd102,
      8'd103,
      8'd104,
      8'd105,
      8'd106,
      8'd107,
      8'd108,
      8'd109,
      8'd110,
      8'd111,
      8'd112,
      8'd113,
      8'd114,
      8'd115,
      8'd116,
      8'd117,
      8'd118,
      8'd119,
      8'd120,
      8'd121,
      8'd122,
      8'd123,
      8'd124,
      8'd125,
      8'd126,
      8'd127,
      8'd128,
      8'd129,
      8'd130,
      8'd131,
      8'd132,
      8'd133,
      8'd134,
      8'd135,
      8'd136,
      8'd137,
      8'd138,
      8'd139,
      8'd140,
      8'd141,
      8'd142,
      8'd143,
      8'd144,
      8'd145,
      8'd146,
      8'd147,
      8'd148,
      8'd149,
      8'd150,
      8'd151,
      8'd152,
      8'd153,
      8'd154,
      8'd155,
      8'd156,
      8'd157,
      8'd158,
      8'd159,
      8'd160,
      8'd161,
      8'd162,
      8'd163,
      8'd164,
      8'd165,
      8'd166,
      8'd167,
      8'd168,
      8'd169,
      8'd170,
      8'd171,
      8'd172,
      8'd173,
      8'd174,
      8'd175,
      8'd176,
      8'd177,
      8'd178,
      8'd179,
      8'd180,
      8'd181,
      8'd182,
      8'd183,
      8'd184,
      8'd185,
      8'd186,
      8'd187,
      8'd188,
      8'd189,
      8'd190,
      8'd191,
      8'd192,
      8'd193,
      8'd194,
      8'd195,
      8'd196,
      8'd197,
      8'd198,
      8'd199,
      8'd200,
      8'd201,
      8'd202,
      8'd203,
      8'd204,
      8'd205,
      8'd206,
      8'd207,
      8'd208,
      8'd209,
      8'd210,
      8'd211,
      8'd212,
      8'd213,
      8'd214,
      8'd215,
      8'd216,
      8'd217,
      8'd218,
      8'd219,
      8'd220,
      8'd221,
      8'd222,
      8'd223,
      8'd224,
      8'd225,
      8'd226,
      8'd227,
      8'd228,
      8'd229,
      8'd230,
      8'd231,
      8'd232,
      8'd233,
      8'd234,
      8'd235,
      8'd236,
      8'd237,
      8'd238,
      8'd239,
      8'd240,
      8'd241,
      8'd242,
      8'd243,
      8'd244,
      8'd245,
      8'd246,
      8'd247,
      8'd248,
      8'd249,
      8'd250,
      8'd251,
      8'd252,
      8'd253,
      8'd254,
      8'd255:
	  x__h32328 = 8'd0;
      8'd2: x__h32328 = 8'd1;
      8'd3: x__h32328 = 8'd2;
      8'd4: x__h32328 = 8'h03;
      8'd5: x__h32328 = 8'd4;
      8'd6: x__h32328 = 8'd10;
      8'd7: x__h32328 = 8'h0B;
      8'd8: x__h32328 = 8'd25;
      8'd9: x__h32328 = 8'd31;
      8'd10: x__h32328 = 8'd32;
      8'd11: x__h32328 = 8'd33;
      8'd12: x__h32328 = 8'd40;
      8'd13: x__h32328 = 8'd41;
      8'd14: x__h32328 = 8'd42;
      8'd15: x__h32328 = 8'd43;
      8'd16: x__h32328 = 8'd44;
      8'd17: x__h32328 = 8'd45;
      8'd18: x__h32328 = 8'd46;
      8'd19: x__h32328 = 8'd47;
      8'd20: x__h32328 = 8'd48;
      8'd21: x__h32328 = 8'd136;
    endcase
  end
  always@(programCntr)
  begin
    case (programCntr)
      8'd0: x__h32638 = 8'd16;
      8'd1: x__h32638 = 8'h54;
      8'd2: x__h32638 = 8'hE4;
      8'd3: x__h32638 = 8'h12;
      8'd4: x__h32638 = 8'h15;
      8'd5: x__h32638 = 8'h92;
      8'd6: x__h32638 = 8'h08;
      8'd7, 8'd21: x__h32638 = 8'h40;
      8'd8: x__h32638 = 8'hA0;
      8'd9,
      8'd10,
      8'd15,
      8'd18,
      8'd22,
      8'd23,
      8'd24,
      8'd25,
      8'd26,
      8'd27,
      8'd28,
      8'd29,
      8'd30,
      8'd31,
      8'd32,
      8'd33,
      8'd34,
      8'd35,
      8'd36,
      8'd37,
      8'd38,
      8'd39,
      8'd40,
      8'd41,
      8'd42,
      8'd43,
      8'd44,
      8'd45,
      8'd46,
      8'd47,
      8'd48,
      8'd49,
      8'd50,
      8'd51,
      8'd52,
      8'd53,
      8'd54,
      8'd55,
      8'd56,
      8'd57,
      8'd58,
      8'd59,
      8'd60,
      8'd61,
      8'd62,
      8'd63,
      8'd64,
      8'd65,
      8'd66,
      8'd67,
      8'd68,
      8'd69,
      8'd70,
      8'd71,
      8'd72,
      8'd73,
      8'd74,
      8'd75,
      8'd76,
      8'd77,
      8'd78,
      8'd79,
      8'd80,
      8'd81,
      8'd82,
      8'd83,
      8'd84,
      8'd85,
      8'd86,
      8'd87,
      8'd88,
      8'd89,
      8'd90,
      8'd91,
      8'd92,
      8'd93,
      8'd94,
      8'd95,
      8'd96,
      8'd97,
      8'd98,
      8'd99,
      8'd100,
      8'd101,
      8'd102,
      8'd103,
      8'd104,
      8'd105,
      8'd106,
      8'd107,
      8'd108,
      8'd109,
      8'd110,
      8'd111,
      8'd112,
      8'd113,
      8'd114,
      8'd115,
      8'd116,
      8'd117,
      8'd118,
      8'd119,
      8'd120,
      8'd121,
      8'd122,
      8'd123,
      8'd124,
      8'd125,
      8'd126,
      8'd127,
      8'd128,
      8'd129,
      8'd130,
      8'd131,
      8'd132,
      8'd133,
      8'd134,
      8'd135,
      8'd136,
      8'd137,
      8'd138,
      8'd139,
      8'd140,
      8'd141,
      8'd142,
      8'd143,
      8'd144,
      8'd145,
      8'd146,
      8'd147,
      8'd148,
      8'd149,
      8'd150,
      8'd151,
      8'd152,
      8'd153,
      8'd154,
      8'd155,
      8'd156,
      8'd157,
      8'd158,
      8'd159,
      8'd160,
      8'd161,
      8'd162,
      8'd163,
      8'd164,
      8'd165,
      8'd166,
      8'd167,
      8'd168,
      8'd169,
      8'd170,
      8'd171,
      8'd172,
      8'd173,
      8'd174,
      8'd175,
      8'd176,
      8'd177,
      8'd178,
      8'd179,
      8'd180,
      8'd181,
      8'd182,
      8'd183,
      8'd184,
      8'd185,
      8'd186,
      8'd187,
      8'd188,
      8'd189,
      8'd190,
      8'd191,
      8'd192,
      8'd193,
      8'd194,
      8'd195,
      8'd196,
      8'd197,
      8'd198,
      8'd199,
      8'd200,
      8'd201,
      8'd202,
      8'd203,
      8'd204,
      8'd205,
      8'd206,
      8'd207,
      8'd208,
      8'd209,
      8'd210,
      8'd211,
      8'd212,
      8'd213,
      8'd214,
      8'd215,
      8'd216,
      8'd217,
      8'd218,
      8'd219,
      8'd220,
      8'd221,
      8'd222,
      8'd223,
      8'd224,
      8'd225,
      8'd226,
      8'd227,
      8'd228,
      8'd229,
      8'd230,
      8'd231,
      8'd232,
      8'd233,
      8'd234,
      8'd235,
      8'd236,
      8'd237,
      8'd238,
      8'd239,
      8'd240,
      8'd241,
      8'd242,
      8'd243,
      8'd244,
      8'd245,
      8'd246,
      8'd247,
      8'd248,
      8'd249,
      8'd250,
      8'd251,
      8'd252,
      8'd253,
      8'd254,
      8'd255:
	  x__h32638 = 8'd0;
      8'd11: x__h32638 = 8'h03;
      8'd12: x__h32638 = 8'hC2;
      8'd13: x__h32638 = 8'h49;
      8'd14: x__h32638 = 8'hEF;
      8'd16, 8'd19: x__h32638 = 8'h77;
      8'd17, 8'd20: x__h32638 = 8'h0B;
    endcase
  end
  always@(programCntr)
  begin
    case (programCntr)
      8'd0,
      8'd21,
      8'd22,
      8'd23,
      8'd24,
      8'd25,
      8'd26,
      8'd27,
      8'd28,
      8'd29,
      8'd30,
      8'd31,
      8'd32,
      8'd33,
      8'd34,
      8'd35,
      8'd36,
      8'd37,
      8'd38,
      8'd39,
      8'd40,
      8'd41,
      8'd42,
      8'd43,
      8'd44,
      8'd45,
      8'd46,
      8'd47,
      8'd48,
      8'd49,
      8'd50,
      8'd51,
      8'd52,
      8'd53,
      8'd54,
      8'd55,
      8'd56,
      8'd57,
      8'd58,
      8'd59,
      8'd60,
      8'd61,
      8'd62,
      8'd63,
      8'd64,
      8'd65,
      8'd66,
      8'd67,
      8'd68,
      8'd69,
      8'd70,
      8'd71,
      8'd72,
      8'd73,
      8'd74,
      8'd75,
      8'd76,
      8'd77,
      8'd78,
      8'd79,
      8'd80,
      8'd81,
      8'd82,
      8'd83,
      8'd84,
      8'd85,
      8'd86,
      8'd87,
      8'd88,
      8'd89,
      8'd90,
      8'd91,
      8'd92,
      8'd93,
      8'd94,
      8'd95,
      8'd96,
      8'd97,
      8'd98,
      8'd99,
      8'd100,
      8'd101,
      8'd102,
      8'd103,
      8'd104,
      8'd105,
      8'd106,
      8'd107,
      8'd108,
      8'd109,
      8'd110,
      8'd111,
      8'd112,
      8'd113,
      8'd114,
      8'd115,
      8'd116,
      8'd117,
      8'd118,
      8'd119,
      8'd120,
      8'd121,
      8'd122,
      8'd123,
      8'd124,
      8'd125,
      8'd126,
      8'd127,
      8'd128,
      8'd129,
      8'd130,
      8'd131,
      8'd132,
      8'd133,
      8'd134,
      8'd135,
      8'd136,
      8'd137,
      8'd138,
      8'd139,
      8'd140,
      8'd141,
      8'd142,
      8'd143,
      8'd144,
      8'd145,
      8'd146,
      8'd147,
      8'd148,
      8'd149,
      8'd150,
      8'd151,
      8'd152,
      8'd153,
      8'd154,
      8'd155,
      8'd156,
      8'd157,
      8'd158,
      8'd159,
      8'd160,
      8'd161,
      8'd162,
      8'd163,
      8'd164,
      8'd165,
      8'd166,
      8'd167,
      8'd168,
      8'd169,
      8'd170,
      8'd171,
      8'd172,
      8'd173,
      8'd174,
      8'd175,
      8'd176,
      8'd177,
      8'd178,
      8'd179,
      8'd180,
      8'd181,
      8'd182,
      8'd183,
      8'd184,
      8'd185,
      8'd186,
      8'd187,
      8'd188,
      8'd189,
      8'd190,
      8'd191,
      8'd192,
      8'd193,
      8'd194,
      8'd195,
      8'd196,
      8'd197,
      8'd198,
      8'd199,
      8'd200,
      8'd201,
      8'd202,
      8'd203,
      8'd204,
      8'd205,
      8'd206,
      8'd207,
      8'd208,
      8'd209,
      8'd210,
      8'd211,
      8'd212,
      8'd213,
      8'd214,
      8'd215,
      8'd216,
      8'd217,
      8'd218,
      8'd219,
      8'd220,
      8'd221,
      8'd222,
      8'd223,
      8'd224,
      8'd225,
      8'd226,
      8'd227,
      8'd228,
      8'd229,
      8'd230,
      8'd231,
      8'd232,
      8'd233,
      8'd234,
      8'd235,
      8'd236,
      8'd237,
      8'd238,
      8'd239,
      8'd240,
      8'd241,
      8'd242,
      8'd243,
      8'd244,
      8'd245,
      8'd246,
      8'd247,
      8'd248,
      8'd249,
      8'd250,
      8'd251,
      8'd252,
      8'd253,
      8'd254,
      8'd255:
	  SEL_ARR_1_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0__ETC___d213 = 1'd1;
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd15,
      8'd16,
      8'd17,
      8'd18,
      8'd19,
      8'd20:
	  SEL_ARR_1_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0__ETC___d213 = 1'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        clockResetW <= `BSV_ASSIGNMENT_DELAY 1'd0;
	debounce <= `BSV_ASSIGNMENT_DELAY 32'd0;
	delayCntr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	i2c_rOutEn <= `BSV_ASSIGNMENT_DELAY 1'd1;
	i2c_rSCL <= `BSV_ASSIGNMENT_DELAY 1'd1;
	i2c_rSDA <= `BSV_ASSIGNMENT_DELAY 1'd1;
	i2c_rState <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ident_reg <= `BSV_ASSIGNMENT_DELAY 16'hFFFF;
	init <= `BSV_ASSIGNMENT_DELAY 1'd0;
	programCntr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	programFSM_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	programFSM_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	programFSM_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	programFSM_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	programFSM_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 5'd0;
	reprogram_last <= `BSV_ASSIGNMENT_DELAY 1'd0;
	returnValue <= `BSV_ASSIGNMENT_DELAY 8'd0;
	step_reg <= `BSV_ASSIGNMENT_DELAY 8'd0;
	switchResetW <= `BSV_ASSIGNMENT_DELAY 1'd0;
	writeSuccessful <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (clockResetW$EN)
	  clockResetW <= `BSV_ASSIGNMENT_DELAY clockResetW$D_IN;
	if (debounce$EN) debounce <= `BSV_ASSIGNMENT_DELAY debounce$D_IN;
	if (delayCntr$EN) delayCntr <= `BSV_ASSIGNMENT_DELAY delayCntr$D_IN;
	if (i2c_rOutEn$EN)
	  i2c_rOutEn <= `BSV_ASSIGNMENT_DELAY i2c_rOutEn$D_IN;
	if (i2c_rSCL$EN) i2c_rSCL <= `BSV_ASSIGNMENT_DELAY i2c_rSCL$D_IN;
	if (i2c_rSDA$EN) i2c_rSDA <= `BSV_ASSIGNMENT_DELAY i2c_rSDA$D_IN;
	if (i2c_rState$EN)
	  i2c_rState <= `BSV_ASSIGNMENT_DELAY i2c_rState$D_IN;
	if (ident_reg$EN) ident_reg <= `BSV_ASSIGNMENT_DELAY ident_reg$D_IN;
	if (init$EN) init <= `BSV_ASSIGNMENT_DELAY init$D_IN;
	if (programCntr$EN)
	  programCntr <= `BSV_ASSIGNMENT_DELAY programCntr$D_IN;
	if (programFSM_start_reg$EN)
	  programFSM_start_reg <= `BSV_ASSIGNMENT_DELAY
	      programFSM_start_reg$D_IN;
	if (programFSM_start_reg_1$EN)
	  programFSM_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      programFSM_start_reg_1$D_IN;
	if (programFSM_state_can_overlap$EN)
	  programFSM_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      programFSM_state_can_overlap$D_IN;
	if (programFSM_state_fired$EN)
	  programFSM_state_fired <= `BSV_ASSIGNMENT_DELAY
	      programFSM_state_fired$D_IN;
	if (programFSM_state_mkFSMstate$EN)
	  programFSM_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      programFSM_state_mkFSMstate$D_IN;
	if (reprogram_last$EN)
	  reprogram_last <= `BSV_ASSIGNMENT_DELAY reprogram_last$D_IN;
	if (returnValue$EN)
	  returnValue <= `BSV_ASSIGNMENT_DELAY returnValue$D_IN;
	if (step_reg$EN) step_reg <= `BSV_ASSIGNMENT_DELAY step_reg$D_IN;
	if (switchResetW$EN)
	  switchResetW <= `BSV_ASSIGNMENT_DELAY switchResetW$D_IN;
	if (writeSuccessful$EN)
	  writeSuccessful <= `BSV_ASSIGNMENT_DELAY writeSuccessful$D_IN;
      end
    if (i2c_rAddress$EN)
      i2c_rAddress <= `BSV_ASSIGNMENT_DELAY i2c_rAddress$D_IN;
    if (i2c_rSlaveAddr$EN)
      i2c_rSlaveAddr <= `BSV_ASSIGNMENT_DELAY i2c_rSlaveAddr$D_IN;
    if (i2c_rWrite$EN) i2c_rWrite <= `BSV_ASSIGNMENT_DELAY i2c_rWrite$D_IN;
    if (i2c_rWriteData$EN)
      i2c_rWriteData <= `BSV_ASSIGNMENT_DELAY i2c_rWriteData$D_IN;
    if (i2c_vrReadData_0$EN)
      i2c_vrReadData_0 <= `BSV_ASSIGNMENT_DELAY i2c_vrReadData_0$D_IN;
    if (i2c_vrReadData_1$EN)
      i2c_vrReadData_1 <= `BSV_ASSIGNMENT_DELAY i2c_vrReadData_1$D_IN;
    if (i2c_vrReadData_2$EN)
      i2c_vrReadData_2 <= `BSV_ASSIGNMENT_DELAY i2c_vrReadData_2$D_IN;
    if (i2c_vrReadData_3$EN)
      i2c_vrReadData_3 <= `BSV_ASSIGNMENT_DELAY i2c_vrReadData_3$D_IN;
    if (i2c_vrReadData_4$EN)
      i2c_vrReadData_4 <= `BSV_ASSIGNMENT_DELAY i2c_vrReadData_4$D_IN;
    if (i2c_vrReadData_5$EN)
      i2c_vrReadData_5 <= `BSV_ASSIGNMENT_DELAY i2c_vrReadData_5$D_IN;
    if (i2c_vrReadData_6$EN)
      i2c_vrReadData_6 <= `BSV_ASSIGNMENT_DELAY i2c_vrReadData_6$D_IN;
    if (i2c_vrReadData_7$EN)
      i2c_vrReadData_7 <= `BSV_ASSIGNMENT_DELAY i2c_vrReadData_7$D_IN;
  end

  always@(posedge CLK_gt_clk)
  begin
    if (RST_N_gt_rst_n == `BSV_RESET_VALUE)
      begin
        clk_cntr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	led_out <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (clk_cntr$EN) clk_cntr <= `BSV_ASSIGNMENT_DELAY clk_cntr$D_IN;
	if (led_out$EN) led_out <= `BSV_ASSIGNMENT_DELAY led_out$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    clk_cntr = 32'hAAAAAAAA;
    clockResetW = 1'h0;
    debounce = 32'hAAAAAAAA;
    delayCntr = 32'hAAAAAAAA;
    i2c_rAddress = 8'hAA;
    i2c_rOutEn = 1'h0;
    i2c_rSCL = 1'h0;
    i2c_rSDA = 1'h0;
    i2c_rSlaveAddr = 7'h2A;
    i2c_rState = 1'h0;
    i2c_rWrite = 1'h0;
    i2c_rWriteData = 8'hAA;
    i2c_vrReadData_0 = 1'h0;
    i2c_vrReadData_1 = 1'h0;
    i2c_vrReadData_2 = 1'h0;
    i2c_vrReadData_3 = 1'h0;
    i2c_vrReadData_4 = 1'h0;
    i2c_vrReadData_5 = 1'h0;
    i2c_vrReadData_6 = 1'h0;
    i2c_vrReadData_7 = 1'h0;
    ident_reg = 16'hAAAA;
    init = 1'h0;
    led_out = 1'h0;
    programCntr = 8'hAA;
    programFSM_start_reg = 1'h0;
    programFSM_start_reg_1 = 1'h0;
    programFSM_state_can_overlap = 1'h0;
    programFSM_state_fired = 1'h0;
    programFSM_state_mkFSMstate = 5'h0A;
    reprogram_last = 1'h0;
    returnValue = 8'hAA;
    step_reg = 8'hAA;
    switchResetW = 1'h0;
    writeSuccessful = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_programFSM_action_l101c13)
	$display("Done %d", i2c_fResponse$D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_programFSM_action_l143c18 &&
	  (programFSM_state_mkFSMstate == 5'd2 ||
	   programFSM_state_mkFSMstate == 5'd3 ||
	   programFSM_state_mkFSMstate == 5'd4 ||
	   WILL_FIRE_RL_programFSM_action_l150c18 ||
	   programFSM_state_mkFSMstate == 5'd6 ||
	   programFSM_state_mkFSMstate == 5'd7 ||
	   programFSM_state_mkFSMstate == 5'd8 ||
	   WILL_FIRE_RL_programFSM_action_l157c18 ||
	   programFSM_state_mkFSMstate == 5'd10 ||
	   WILL_FIRE_RL_programFSM_action_l95c16 ||
	   WILL_FIRE_RL_programFSM_action_l101c13 ||
	   programFSM_state_mkFSMstate == 5'd13 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l175c18))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 141, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l143c18]\n  and [RL_programFSM_action_l144c13, RL_programFSM_action_l148c22,\n  RL_programFSM_action_l149c23, RL_programFSM_action_l150c18,\n  RL_programFSM_action_l151c13, RL_programFSM_action_l155c22,\n  RL_programFSM_action_l156c23, RL_programFSM_action_l157c18,\n  RL_programFSM_action_f_init_l159c13, RL_programFSM_action_l95c16,\n  RL_programFSM_action_l101c13, RL_programFSM_action_l161c26,\n  RL_programFSM_action_f_update_l159c13, RL_programFSM_action_l175c18] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (programFSM_state_mkFSMstate == 5'd2 &&
	  (programFSM_state_mkFSMstate == 5'd3 ||
	   programFSM_state_mkFSMstate == 5'd4 ||
	   WILL_FIRE_RL_programFSM_action_l150c18 ||
	   programFSM_state_mkFSMstate == 5'd6 ||
	   programFSM_state_mkFSMstate == 5'd7 ||
	   programFSM_state_mkFSMstate == 5'd8 ||
	   WILL_FIRE_RL_programFSM_action_l157c18 ||
	   programFSM_state_mkFSMstate == 5'd10 ||
	   WILL_FIRE_RL_programFSM_action_l95c16 ||
	   WILL_FIRE_RL_programFSM_action_l101c13 ||
	   programFSM_state_mkFSMstate == 5'd13 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l175c18))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 141, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l144c13]\n  and [RL_programFSM_action_l148c22, RL_programFSM_action_l149c23,\n  RL_programFSM_action_l150c18, RL_programFSM_action_l151c13,\n  RL_programFSM_action_l155c22, RL_programFSM_action_l156c23,\n  RL_programFSM_action_l157c18, RL_programFSM_action_f_init_l159c13,\n  RL_programFSM_action_l95c16, RL_programFSM_action_l101c13,\n  RL_programFSM_action_l161c26, RL_programFSM_action_f_update_l159c13,\n  RL_programFSM_action_l175c18] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (programFSM_state_mkFSMstate == 5'd3 &&
	  (programFSM_state_mkFSMstate == 5'd4 ||
	   WILL_FIRE_RL_programFSM_action_l150c18 ||
	   programFSM_state_mkFSMstate == 5'd6 ||
	   programFSM_state_mkFSMstate == 5'd7 ||
	   programFSM_state_mkFSMstate == 5'd8 ||
	   WILL_FIRE_RL_programFSM_action_l157c18 ||
	   programFSM_state_mkFSMstate == 5'd10 ||
	   WILL_FIRE_RL_programFSM_action_l95c16 ||
	   WILL_FIRE_RL_programFSM_action_l101c13 ||
	   programFSM_state_mkFSMstate == 5'd13 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l175c18))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 141, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l148c22]\n  and [RL_programFSM_action_l149c23, RL_programFSM_action_l150c18,\n  RL_programFSM_action_l151c13, RL_programFSM_action_l155c22,\n  RL_programFSM_action_l156c23, RL_programFSM_action_l157c18,\n  RL_programFSM_action_f_init_l159c13, RL_programFSM_action_l95c16,\n  RL_programFSM_action_l101c13, RL_programFSM_action_l161c26,\n  RL_programFSM_action_f_update_l159c13, RL_programFSM_action_l175c18] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (programFSM_state_mkFSMstate == 5'd4 &&
	  (WILL_FIRE_RL_programFSM_action_l150c18 ||
	   programFSM_state_mkFSMstate == 5'd6 ||
	   programFSM_state_mkFSMstate == 5'd7 ||
	   programFSM_state_mkFSMstate == 5'd8 ||
	   WILL_FIRE_RL_programFSM_action_l157c18 ||
	   programFSM_state_mkFSMstate == 5'd10 ||
	   WILL_FIRE_RL_programFSM_action_l95c16 ||
	   WILL_FIRE_RL_programFSM_action_l101c13 ||
	   programFSM_state_mkFSMstate == 5'd13 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l175c18))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 141, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l149c23]\n  and [RL_programFSM_action_l150c18, RL_programFSM_action_l151c13,\n  RL_programFSM_action_l155c22, RL_programFSM_action_l156c23,\n  RL_programFSM_action_l157c18, RL_programFSM_action_f_init_l159c13,\n  RL_programFSM_action_l95c16, RL_programFSM_action_l101c13,\n  RL_programFSM_action_l161c26, RL_programFSM_action_f_update_l159c13,\n  RL_programFSM_action_l175c18] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_programFSM_action_l150c18 &&
	  (programFSM_state_mkFSMstate == 5'd6 ||
	   programFSM_state_mkFSMstate == 5'd7 ||
	   programFSM_state_mkFSMstate == 5'd8 ||
	   WILL_FIRE_RL_programFSM_action_l157c18 ||
	   programFSM_state_mkFSMstate == 5'd10 ||
	   WILL_FIRE_RL_programFSM_action_l95c16 ||
	   WILL_FIRE_RL_programFSM_action_l101c13 ||
	   programFSM_state_mkFSMstate == 5'd13 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l175c18))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 141, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l150c18]\n  and [RL_programFSM_action_l151c13, RL_programFSM_action_l155c22,\n  RL_programFSM_action_l156c23, RL_programFSM_action_l157c18,\n  RL_programFSM_action_f_init_l159c13, RL_programFSM_action_l95c16,\n  RL_programFSM_action_l101c13, RL_programFSM_action_l161c26,\n  RL_programFSM_action_f_update_l159c13, RL_programFSM_action_l175c18] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (programFSM_state_mkFSMstate == 5'd7 &&
	  (programFSM_state_mkFSMstate == 5'd8 ||
	   WILL_FIRE_RL_programFSM_action_l157c18 ||
	   programFSM_state_mkFSMstate == 5'd10 ||
	   WILL_FIRE_RL_programFSM_action_l95c16 ||
	   WILL_FIRE_RL_programFSM_action_l101c13 ||
	   programFSM_state_mkFSMstate == 5'd13 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l175c18))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 141, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l155c22]\n  and [RL_programFSM_action_l156c23, RL_programFSM_action_l157c18,\n  RL_programFSM_action_f_init_l159c13, RL_programFSM_action_l95c16,\n  RL_programFSM_action_l101c13, RL_programFSM_action_l161c26,\n  RL_programFSM_action_f_update_l159c13, RL_programFSM_action_l175c18] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (programFSM_state_mkFSMstate == 5'd6 &&
	  (programFSM_state_mkFSMstate == 5'd7 ||
	   programFSM_state_mkFSMstate == 5'd8 ||
	   WILL_FIRE_RL_programFSM_action_l157c18 ||
	   programFSM_state_mkFSMstate == 5'd10 ||
	   WILL_FIRE_RL_programFSM_action_l95c16 ||
	   WILL_FIRE_RL_programFSM_action_l101c13 ||
	   programFSM_state_mkFSMstate == 5'd13 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l175c18))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 141, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l151c13]\n  and [RL_programFSM_action_l155c22, RL_programFSM_action_l156c23,\n  RL_programFSM_action_l157c18, RL_programFSM_action_f_init_l159c13,\n  RL_programFSM_action_l95c16, RL_programFSM_action_l101c13,\n  RL_programFSM_action_l161c26, RL_programFSM_action_f_update_l159c13,\n  RL_programFSM_action_l175c18] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (programFSM_state_mkFSMstate == 5'd8 &&
	  (WILL_FIRE_RL_programFSM_action_l157c18 ||
	   programFSM_state_mkFSMstate == 5'd10 ||
	   WILL_FIRE_RL_programFSM_action_l95c16 ||
	   WILL_FIRE_RL_programFSM_action_l101c13 ||
	   programFSM_state_mkFSMstate == 5'd13 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l175c18))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 141, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l156c23]\n  and [RL_programFSM_action_l157c18, RL_programFSM_action_f_init_l159c13,\n  RL_programFSM_action_l95c16, RL_programFSM_action_l101c13,\n  RL_programFSM_action_l161c26, RL_programFSM_action_f_update_l159c13,\n  RL_programFSM_action_l175c18] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_programFSM_action_l157c18 &&
	  (programFSM_state_mkFSMstate == 5'd10 ||
	   WILL_FIRE_RL_programFSM_action_l95c16 ||
	   WILL_FIRE_RL_programFSM_action_l101c13 ||
	   programFSM_state_mkFSMstate == 5'd13 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l175c18))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 141, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l157c18]\n  and [RL_programFSM_action_f_init_l159c13, RL_programFSM_action_l95c16,\n  RL_programFSM_action_l101c13, RL_programFSM_action_l161c26,\n  RL_programFSM_action_f_update_l159c13, RL_programFSM_action_l175c18] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (programFSM_state_mkFSMstate == 5'd10 &&
	  (WILL_FIRE_RL_programFSM_action_l95c16 ||
	   WILL_FIRE_RL_programFSM_action_l101c13 ||
	   programFSM_state_mkFSMstate == 5'd13 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l175c18))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 141, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_programFSM_action_f_init_l159c13] and [RL_programFSM_action_l95c16,\n  RL_programFSM_action_l101c13, RL_programFSM_action_l161c26,\n  RL_programFSM_action_f_update_l159c13, RL_programFSM_action_l175c18] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_programFSM_action_l95c16 &&
	  (WILL_FIRE_RL_programFSM_action_l101c13 ||
	   programFSM_state_mkFSMstate == 5'd13 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l175c18))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 141, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l95c16] and\n  [RL_programFSM_action_l101c13, RL_programFSM_action_l161c26,\n  RL_programFSM_action_f_update_l159c13, RL_programFSM_action_l175c18] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_programFSM_action_l101c13 &&
	  (programFSM_state_mkFSMstate == 5'd13 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l175c18))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 141, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l101c13]\n  and [RL_programFSM_action_l161c26, RL_programFSM_action_f_update_l159c13,\n  RL_programFSM_action_l175c18] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (programFSM_state_mkFSMstate == 5'd13 &&
	  (programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l175c18))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 141, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l161c26]\n  and [RL_programFSM_action_f_update_l159c13, RL_programFSM_action_l175c18] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (programFSM_state_mkFSMstate == 5'd14 &&
	  WILL_FIRE_RL_programFSM_action_l175c18)
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 141, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_programFSM_action_f_update_l159c13] and [RL_programFSM_action_l175c18] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_programFSM_action_l142c23 &&
	  (WILL_FIRE_RL_programFSM_action_l143c18 ||
	   programFSM_state_mkFSMstate == 5'd2 ||
	   programFSM_state_mkFSMstate == 5'd3 ||
	   programFSM_state_mkFSMstate == 5'd4 ||
	   WILL_FIRE_RL_programFSM_action_l150c18 ||
	   programFSM_state_mkFSMstate == 5'd6 ||
	   programFSM_state_mkFSMstate == 5'd7 ||
	   programFSM_state_mkFSMstate == 5'd8 ||
	   WILL_FIRE_RL_programFSM_action_l157c18 ||
	   programFSM_state_mkFSMstate == 5'd10 ||
	   WILL_FIRE_RL_programFSM_action_l95c16 ||
	   WILL_FIRE_RL_programFSM_action_l101c13 ||
	   programFSM_state_mkFSMstate == 5'd13 ||
	   programFSM_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_programFSM_action_l175c18))
	$display("Error: \"src/SumeClockProgrammer.bsv\", line 141, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_programFSM_action_l142c23]\n  and [RL_programFSM_action_l143c18, RL_programFSM_action_l144c13,\n  RL_programFSM_action_l148c22, RL_programFSM_action_l149c23,\n  RL_programFSM_action_l150c18, RL_programFSM_action_l151c13,\n  RL_programFSM_action_l155c22, RL_programFSM_action_l156c23,\n  RL_programFSM_action_l157c18, RL_programFSM_action_f_init_l159c13,\n  RL_programFSM_action_l95c16, RL_programFSM_action_l101c13,\n  RL_programFSM_action_l161c26, RL_programFSM_action_f_update_l159c13,\n  RL_programFSM_action_l175c18] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkSumeClockProgrammer

