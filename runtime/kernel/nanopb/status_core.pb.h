/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.0-dev */

#ifndef PB_STATUS_CORE_PB_H_INCLUDED
#define PB_STATUS_CORE_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _Clock {
    pb_callback_t name;
    uint32_t frequency_mhz;
/* @@protoc_insertion_point(struct:Clock) */
} Clock;


typedef struct _PE {
    pb_callback_t name;
    uint32_t id;
    uint64_t offset;
    uint64_t local_memory;
/* @@protoc_insertion_point(struct:PE) */
} PE;


typedef struct _Platform {
    pb_callback_t name;
    uint64_t offset;
/* @@protoc_insertion_point(struct:Platform) */
} Platform;


typedef struct _Status {
    uint64_t timestamp;
    uint64_t arch_base;
    uint64_t platform_base;
    pb_callback_t pe;
    pb_callback_t platform;
    pb_callback_t clocks;
    pb_callback_t versions;
/* @@protoc_insertion_point(struct:Status) */
} Status;


typedef struct _Version {
    pb_callback_t software;
    uint32_t year;
    uint32_t release;
/* @@protoc_insertion_point(struct:Version) */
} Version;


/* Initializer values for message structs */
#define PE_init_default                          {{{NULL}, NULL}, 0, 0, 0}
#define Platform_init_default                    {{{NULL}, NULL}, 0}
#define Clock_init_default                       {{{NULL}, NULL}, 0}
#define Version_init_default                     {{{NULL}, NULL}, 0, 0}
#define Status_init_default                      {0, 0, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define PE_init_zero                             {{{NULL}, NULL}, 0, 0, 0}
#define Platform_init_zero                       {{{NULL}, NULL}, 0}
#define Clock_init_zero                          {{{NULL}, NULL}, 0}
#define Version_init_zero                        {{{NULL}, NULL}, 0, 0}
#define Status_init_zero                         {0, 0, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define Clock_name_tag                           1
#define Clock_frequency_mhz_tag                  2
#define PE_name_tag                              1
#define PE_id_tag                                2
#define PE_offset_tag                            3
#define PE_local_memory_tag                      4
#define Platform_name_tag                        1
#define Platform_offset_tag                      2
#define Status_timestamp_tag                     1
#define Status_arch_base_tag                     2
#define Status_platform_base_tag                 3
#define Status_pe_tag                            4
#define Status_platform_tag                      5
#define Status_clocks_tag                        6
#define Status_versions_tag                      7
#define Version_software_tag                     1
#define Version_year_tag                         2
#define Version_release_tag                      3

/* Struct field encoding specification for nanopb */
#define PE_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING, name, 1) \
X(a, STATIC, SINGULAR, UINT32, id, 2) \
X(a, STATIC, SINGULAR, UINT64, offset, 3) \
X(a, STATIC, SINGULAR, UINT64, local_memory, 4)
#define PE_CALLBACK pb_default_field_callback
#define PE_DEFAULT NULL

#define Platform_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING, name, 1) \
X(a, STATIC, SINGULAR, UINT64, offset, 2)
#define Platform_CALLBACK pb_default_field_callback
#define Platform_DEFAULT NULL

#define Clock_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING, name, 1) \
X(a, STATIC, SINGULAR, UINT32, frequency_mhz, 2)
#define Clock_CALLBACK pb_default_field_callback
#define Clock_DEFAULT NULL

#define Version_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING, software, 1) \
X(a, STATIC, SINGULAR, UINT32, year, 2) \
X(a, STATIC, SINGULAR, UINT32, release, 3)
#define Version_CALLBACK pb_default_field_callback
#define Version_DEFAULT NULL

#define Status_FIELDLIST(X, a) \
X(a, STATIC, SINGULAR, UINT64, timestamp, 1) \
X(a, STATIC, SINGULAR, UINT64, arch_base, 2) \
X(a, STATIC, SINGULAR, UINT64, platform_base, 3) \
X(a, CALLBACK, REPEATED, MESSAGE, pe, 4) \
X(a, CALLBACK, REPEATED, MESSAGE, platform, 5) \
X(a, CALLBACK, REPEATED, MESSAGE, clocks, 6) \
X(a, CALLBACK, REPEATED, MESSAGE, versions, 7)
#define Status_CALLBACK pb_default_field_callback
#define Status_DEFAULT NULL
#define Status_pe_MSGTYPE PE
#define Status_platform_MSGTYPE Platform
#define Status_clocks_MSGTYPE Clock
#define Status_versions_MSGTYPE Version

extern const pb_msgdesc_t PE_msg;
extern const pb_msgdesc_t Platform_msg;
extern const pb_msgdesc_t Clock_msg;
extern const pb_msgdesc_t Version_msg;
extern const pb_msgdesc_t Status_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define PE_fields &PE_msg
#define Platform_fields &Platform_msg
#define Clock_fields &Clock_msg
#define Version_fields &Version_msg
#define Status_fields &Status_msg

/* Maximum encoded size of messages (where known) */
/* PE_size depends on runtime parameters */
/* Platform_size depends on runtime parameters */
/* Clock_size depends on runtime parameters */
/* Version_size depends on runtime parameters */
/* Status_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
